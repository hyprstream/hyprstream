{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro","span-locations"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/proc-macro2-0458c2d304c0aef7/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93","linked_libs":[],"linked_paths":[],"cfgs":["span_locations","wrap_proc_macro"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/proc-macro2-f86a29c969ffebb8/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.14","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_ident","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.14/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libunicode_ident-60f8316d2540323d.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libunicode_ident-60f8316d2540323d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","extra_traits","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/libc-22a6e4aa70c27386/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#autocfg@1.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"autocfg","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.4.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libautocfg-072974cf7fdf4d76.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libautocfg-072974cf7fdf4d76.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcfg_if-ccd6001793aa8495.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/libc-25d3be75fe551cb5/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"shlex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libshlex-e0bc981f35c2f971.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libshlex-e0bc981f35c2f971.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libonce_cell-8a888e020ee9dcdd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro","span-locations"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libproc_macro2-227765d52176a56e.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libproc_macro2-227765d52176a56e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/libc-8ed607338346a54d/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/libc-cd6e258eb93f3e38/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"version_check","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libversion_check-e4e51b3e54dc818f.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libversion_check-e4e51b3e54dc818f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","serde_derive","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/serde-3c3a5fa275ae2aa5/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/crossbeam-utils-ae0f1eb4b811765b/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/libm-2033fff005ac7278/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","libm","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/num-traits-5f12ef33dcd25735/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.38/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"quote","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.38/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libquote-3128526867fa5905.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libquote-3128526867fa5905.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","extra_traits","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblibc-dbb5a112210bc754.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.169","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblibc-80c337e81e5b3662.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/liblibc-80c337e81e5b3662.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/serde-159034a2ca4311f4/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/crossbeam-utils-c05de4a608be6a95/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/libm-291fdbf5f540e192/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","linked_libs":[],"linked_paths":[],"cfgs":["has_total_cmp"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/num-traits-1f2169679cfca422/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytes@1.9.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytes","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytes-1.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbytes-ed4ed2ca9d6d69d3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@2.0.96","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.96/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.96/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","fold","full","parsing","printing","proc-macro","visit","visit-mut"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsyn-17a53bfd69481cb9.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libsyn-17a53bfd69481cb9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#jobserver@0.1.32","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/jobserver-0.1.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"jobserver","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/jobserver-0.1.32/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libjobserver-1dd69099962ea17f.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libjobserver-1dd69099962ea17f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgetrandom-151fd163295457a2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrossbeam_utils-a4e18373306acd07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libm@0.2.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libm","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblibm-01f2458311693bd6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/rayon-core-2eea48df800221ce/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmemchr-71fa7b833ad826a9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.13.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libeither-99f5b3189c440f21.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cc@1.2.32","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cc","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["parallel"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcc-1a83bf6cf836e71e.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcc-1a83bf6cf836e71e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.217","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.217/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"serde_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.217/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libserde_derive-d3f903964b4f25b0.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-traits@0.2.19","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_traits","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","i128","libm","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_traits-6c8615877bc0eae4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrossbeam_epoch-e397215d79b18d51.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/rayon-core-1b8919f5af310674/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"byteorder","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/byteorder-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbyteorder-cfa35b80a9106189.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy-derive@0.7.35","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-derive-0.7.35/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerocopy_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-derive-0.7.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzerocopy_derive-d3574f3904aa548c.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.14","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.14/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libitoa-ee8fc0839cdc6e4b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.217","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","serde_derive","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libserde-98e351f723320e81.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrossbeam_deque-45faa9bc552c86d3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.7.35","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.7.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.7.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["byteorder","default","derive","simd","zerocopy-derive"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzerocopy-b472ba552843f28c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#allocator-api2@0.2.21","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"allocator_api2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liballocator_api2-e22a3d72c52d31ed.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","getrandom","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librand_core-2dcb5735e7f51c3f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfoldhash-2ccbf52c898ce198.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck_derive@1.8.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck_derive-1.8.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"bytemuck_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck_derive-1.8.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbytemuck_derive-a26c3d71d19a100e.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libequivalent-94b63588b594306a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librayon_core-61f6b8c310ed3447.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.20","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.20/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libppv_lite86-e0b6c01ec79f9852.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bytemuck@1.21.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck-1.21.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bytemuck","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck-1.21.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aarch64_simd","bytemuck_derive","derive","extern_crate_alloc","must_cast"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbytemuck-28720360c8c368f8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","unicode-perl"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex_syntax-2cd772fa79f88811.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libregex_syntax-2cd772fa79f88811.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#smallvec@1.13.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/smallvec-1.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"smallvec","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/smallvec-1.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["const_generics","const_new"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsmallvec-6bd419f664aa7000.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.8.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbitflags-6d7f55e4f5899d1a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project_lite","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpin_project_lite-122f3390a1d68135.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.19/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.19/build/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/rustversion-c6cb07b8b3f9798c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librayon-11336490a10459f1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librand_chacha-ed32cf99e8ef9bc5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","meta","nfa-pikevm","nfa-thompson","std","syntax","unicode-perl","unicode-word-boundary"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex_automata-54a60efb39396a7f.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libregex_automata-54a60efb39396a7f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/rustversion-4df148d3fbdd7528/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.25","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblog-422e7256a7f68c1e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stable_deref_trait@1.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stable_deref_trait","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstable_deref_trait-eeb4893e798033e5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libryu-ab63b14a1f2cc6d0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pkg-config-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pkg_config","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pkg-config-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpkg_config-6b6920496f9f3de0.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libpkg_config-6b6920496f9f3de0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["allocator-api2","default","default-hasher","equivalent","inline-more","raw-entry","rayon","serde"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhashbrown-a664f196cb35a01c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","getrandom","libc","rand_chacha","small_rng","std","std_rng"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librand-e9616f76ec24152b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std","unicode-perl"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex-fcd6b682ab025e48.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libregex-fcd6b682ab025e48.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustversion@1.0.19","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.19/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"rustversion","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustversion-1.0.19/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustversion-2c44f2c6c094fbd8.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#siphasher@1.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"siphasher","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsiphasher-fec7498243af543d.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libsiphasher-fec7498243af543d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.6.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.6.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librand_core-51de0c0c8fb940dc.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/librand_core-51de0c0c8fb940dc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom","runtime-rng","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/ahash-14b9091f8a30b2aa/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#iana-time-zone@0.1.61","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/iana-time-zone-0.1.61/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"iana_time_zone","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/iana-time-zone-0.1.61/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["fallback"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libiana_time_zone-671043464a7c0e51.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.7.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libindexmap-795ac6e76c53d7bc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_shared@0.11.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_shared-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_shared","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_shared-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libphf_shared-265d00723827ca3b.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libphf_shared-265d00723827ca3b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.8.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["small_rng"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librand-dffda4663c0c2094.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/librand-dffda4663c0c2094.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.11","linked_libs":[],"linked_paths":[],"cfgs":["feature=\"folded_multiply\""],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/ahash-19da5c222cae3dab/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono@0.4.39","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.39/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.39/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","android-tzdata","clock","default","iana-time-zone","js-sys","now","oldtime","std","wasm-bindgen","wasmbind","winapi","windows-targets"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libchrono-8a5712c2ddbb8f8d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#static_assertions@1.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"static_assertions","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstatic_assertions-50df17ef46736597.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parse-zoneinfo@0.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parse-zoneinfo-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parse_zoneinfo","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parse-zoneinfo-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libparse_zoneinfo-7512785fc156c1ce.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libparse_zoneinfo-7512785fc156c1ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-complex@0.4.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-complex-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_complex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-complex-0.4.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytemuck","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_complex-a62164f533e6b6d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_generator@0.11.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_generator-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_generator","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_generator-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libphf_generator-3ce96f0a4a0c5543.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libphf_generator-3ce96f0a4a0c5543.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom","runtime-rng","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libahash-5ef078f57aa9b64d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-core-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_core-f7dcccd4ef2043f7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_distr@0.4.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_distr-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_distr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_distr-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librand_distr-c8bfbfcc990d8781.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#siphasher@1.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"siphasher","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/siphasher-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsiphasher-ef92f0869db351ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/heck-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"heck","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/heck-0.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libheck-885ddee7521d46eb.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libheck-885ddee7521d46eb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-macros-2.5.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tokio_macros","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-macros-2.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtokio_macros-35283bea74bcf641.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mio@1.0.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mio-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mio","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mio-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["net","os-ext","os-poll"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmio-c181b58b391b9700.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_codegen@0.11.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_codegen-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_codegen","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_codegen-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libphf_codegen-ca4670b9f4e7f297.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libphf_codegen-ca4670b9f4e7f297.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf_shared@0.11.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_shared-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf_shared","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf_shared-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libphf_shared-61d8b02c605e1392.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#half@2.4.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/half-2.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"half","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/half-2.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","bytemuck","default","num-traits","rand_distr","std","use-intrinsics"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhalf-5f95048bf2e57794.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#signal-hook-registry@1.4.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/signal-hook-registry-1.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"signal_hook_registry","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/signal-hook-registry-1.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsignal_hook_registry-39a4e2fa1f2d0ec6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#socket2@0.5.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.5.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"socket2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/socket2-0.5.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["all"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsocket2-260ac1cc706aebb7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.12","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.12/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.12/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/lock_api-f5af6c2c0560d41e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.9/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.9/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/slab-5746f0d5fbc6248d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-sink-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_sink","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-sink-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_sink-78dec52933ba0d0c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono-tz-build@0.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-tz-build-0.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono_tz_build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-tz-build-0.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libchrono_tz_build-10d1008aacec7f33.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libchrono_tz_build-10d1008aacec7f33.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#phf@0.11.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"phf","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/phf-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libphf-5cd8cb6537c0fcdf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.10/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.10/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/parking_lot_core-53a9fb9eefe52bb0/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/slab-436b0ab502fc5e7f/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio@1.43.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bytes","default","fs","io-std","io-util","libc","macros","mio","net","rt","rt-multi-thread","signal","signal-hook-registry","socket2","sync","time","tokio-macros"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtokio-2aea1c4b2e3b9dff.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.12","linked_libs":[],"linked_paths":[],"cfgs":["has_const_fn_trait_bound"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/lock_api-0ebc3b34cc409a44/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#synstructure@0.13.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/synstructure-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"synstructure","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/synstructure-0.13.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","proc-macro"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsynstructure-316a8df22be33c09.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libsynstructure-316a8df22be33c09.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-core@0.1.33","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.33/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.33/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","once_cell","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtracing_core-5945e954d4c648cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono-tz@0.10.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-tz-0.10.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-tz-0.10.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/chrono-tz-2eef6066d85bce8e/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.10","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/parking_lot_core-56a58a8d2bb1cbed/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scopeguard","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scopeguard-1.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libscopeguard-dfe724bff06c711f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"slab","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/slab-0.4.9/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libslab-5631135dc2e33207.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-attributes@0.1.28","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.28/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"tracing_attributes","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtracing_attributes-81adc553d80da769.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_io","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-io-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_io-53684bd2132ae1ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/paste-1.0.15/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/paste-1.0.15/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/paste-84184980cdc21ba9/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom-derive@0.1.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-derive-0.1.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerofrom_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-derive-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzerofrom_derive-be31fdfd764155a9.so"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono-tz@0.10.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/chrono-tz-abca17c112abd036/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot_core@0.9.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot_core-0.9.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libparking_lot_core-11a524ee2fdda4cb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lock_api@0.4.12","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lock_api","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lock_api-0.4.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atomic_usize","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblock_api-28f90a7e013e6423.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing@0.1.41","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.41/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-0.1.41/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["attributes","default","log","std","tracing-attributes"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtracing-57a16b08de63ee94.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/paste-41497175361536b9/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-channel-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_channel","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-channel-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","futures-sink","sink","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_channel-e5707713b5a1c3cb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aho-corasick@1.1.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["perf-literal","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libaho_corasick-e2be150d0afffa40.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-macro-0.3.31/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"futures_macro","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-macro-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_macro-221938c982815124.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#chrono-tz@0.10.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-tz-0.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"chrono_tz","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-tz-0.10.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libchrono_tz-6370ebe43dbfa99d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-task-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_task","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-task-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_task-ae2a7a4b206794f8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-utils-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_utils","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-utils-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpin_utils-5d37ef2c7cd41091.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.8.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex_syntax-1c6cd508bb030f14.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.43","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.43/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.43/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fs","libc-extra-traits","std","stdio","termios","use-libc-auxv"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/rustix-66d2fad5f18c6e7f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#paste@1.0.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/paste-1.0.15/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"paste","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/paste-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpaste-a8d392a3a89c211c.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parking_lot@0.12.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.12.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parking_lot","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parking_lot-0.12.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libparking_lot-838b307f4e002398.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerofrom@0.1.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerofrom","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerofrom-0.1.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","derive"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzerofrom-9d0808e5971196e2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_util","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-util-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","async-await-macro","channel","futures-channel","futures-io","futures-macro","futures-sink","io","memchr","sink","slab","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_util-e05cc4377c377697.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.4.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","dfa-onepass","hybrid","meta","nfa-backtrack","nfa-pikevm","nfa-thompson","perf-inline","perf-literal","perf-literal-multisubstring","perf-literal-substring","std","syntax","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment","unicode-word-boundary"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex_automata-ecf25b78d753640e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.43","linked_libs":[],"linked_paths":[],"cfgs":["static_assertions","linux_raw","linux_like","linux_kernel"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/rustix-d5b96266c5854a70/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke-derive@0.7.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-derive-0.7.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"yoke_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-derive-0.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libyoke_derive-912fa04ff57766d5.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-integer@0.1.46","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-integer-0.1.46/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_integer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-integer-0.1.46/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_integer-46bd207aba935fd0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linux-raw-sys@0.4.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linux-raw-sys-0.4.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linux_raw_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linux-raw-sys-0.4.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["elf","errno","general","ioctl","no_std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblinux_raw_sys-2da0a90fa40ae4b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strum_macros@0.26.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strum_macros-0.26.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"strum_macros","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strum_macros-0.26.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstrum_macros-5a7dfcca68a93e54.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#displaydoc@0.2.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.2.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"displaydoc","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/displaydoc-0.2.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdisplaydoc-4be8353ce4f300e9.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yoke@0.7.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-0.7.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yoke","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/yoke-0.7.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","derive","zerofrom"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libyoke-94fd48bcdab765c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex@1.11.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","perf","perf-backtrack","perf-cache","perf-dfa","perf-inline","perf-literal","perf-onepass","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex-69d37ab13d862f43.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustix@0.38.43","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.43/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustix","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.43/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","fs","libc-extra-traits","std","stdio","termios","use-libc-auxv"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustix-d8bce4ee1a2c4566.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-bigint@0.4.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-bigint-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_bigint","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-bigint-0.4.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_bigint-70888227f75e2b63.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@1.3.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbitflags-59f7b46a030b839b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-iter@0.1.45","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-iter-0.1.45/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_iter","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-iter-0.1.45/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["i128","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_iter-ffc03d8d4a2b48ed.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec-derive@0.10.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-derive-0.10.3/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"zerovec_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-derive-0.10.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzerovec_derive-1bd4f81af73a0be4.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_width","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cjk","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libunicode_width-29ada3f3cd732e65.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-rational@0.4.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_rational","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-rational-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["num-bigint","num-bigint-std","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_rational-5ad036579679b4bc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerovec@0.10.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerovec","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerovec-0.10.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["derive","yoke"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzerovec-dd9f047d274c705a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.136","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/serde_json-a628b0abeb0a97d2/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-schema@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-schema-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_schema","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-schema-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_schema-9f17bc7dc07d75bc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossterm@0.28.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossterm-0.28.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossterm","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossterm-0.28.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrossterm-22b6fa34280046be.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strum@0.26.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strum-0.26.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strum","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strum-0.26.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","std","strum_macros"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstrum-766ca59745ded009.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#writeable@0.5.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/writeable-0.5.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"writeable","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/writeable-0.5.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwriteable-481f3a7a303607e7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#litemap@0.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/litemap-0.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"litemap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/litemap-0.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblitemap-69883698296bde44.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num@0.4.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-0.4.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["num-bigint","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum-0b3f7487a2f226a4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tinystr@0.7.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tinystr-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tinystr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tinystr-0.7.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","zerovec"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtinystr-db9c9d1c5965cee9.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.136","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/serde_json-a1961f84d1fbab41/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#percent-encoding@2.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"percent_encoding","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/percent-encoding-2.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpercent_encoding-389027a265e7c410.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#comfy-table@7.1.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/comfy-table-7.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"comfy_table","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/comfy-table-7.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["crossterm","tty"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcomfy_table-4b980842d6521005.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lexical-util@1.0.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-util-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lexical_util","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-util-1.0.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["floats","integers","parse","parse-floats","parse-integers","write","write-floats","write-integers"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblexical_util-f61e33ba3f2272d4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider_macros@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider_macros-1.5.0/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"icu_provider_macros","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider_macros-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_provider_macros-71d50629062ed75c.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.22.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.22.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbase64-0f0084a11136547d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-buffer@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-buffer-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_buffer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-buffer-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_buffer-5d42c2b02ab9f0c0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.136","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","raw_value","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libserde_json-11a5bfb87db8a177.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locid@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locid-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locid","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locid-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["zerovec"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_locid-7a1700e52e8f6dc4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locid_transform_data@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locid_transform_data-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locid_transform_data","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locid_transform_data-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_locid_transform_data-bd31e2c3211f1d33.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#form_urlencoded@1.2.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/form_urlencoded-1.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"form_urlencoded","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/form_urlencoded-1.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libform_urlencoded-8e436f64533fa2d4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_collections@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_collections-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_collections","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_collections-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_collections-deb1cc95b78d0dca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atoi@2.0.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/atoi-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atoi","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/atoi-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libatoi-9fde2b32e85f43d9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.24","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/semver-1.0.24/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/semver-1.0.24/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/semver-83dfb7757962e825/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-data@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-data-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_data","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-data-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_data-7cde207f094d3879.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_provider@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_provider","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_provider-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["macros"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_provider-5633491db3f7483a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#seq-macro@0.3.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/seq-macro-0.3.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"seq_macro","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/seq-macro-0.3.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libseq_macro-6be9b67c08b456ff.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties_data@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties_data","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties_data-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_properties_data-f27dac4df9627757.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.24","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/semver-8c2e4def35ea2a29/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lexical-write-integer@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-write-integer-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lexical_write_integer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-write-integer-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblexical_write_integer-7f7856188192eb93.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lexical-parse-integer@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-parse-integer-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lexical_parse_integer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-parse-integer-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblexical_parse_integer-9a154bba1194dcb9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer_data@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer_data","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer_data-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_normalizer_data-e7a6a26c2ea3d7ec.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-array@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_array","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-array-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["chrono-tz"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_array-15bc5b1000606199.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_locid_transform@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locid_transform-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_locid_transform","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_locid_transform-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_locid_transform-7f4d75ce56db7ba4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf16_iter@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/utf16_iter-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf16_iter","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/utf16_iter-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libutf16_iter-4f59cc7501caae06.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#write16@1.0.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/write16-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"write16","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/write16-1.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwrite16-f5e0bb03125f47a4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8_iter@1.0.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8_iter-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8_iter","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8_iter-1.0.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libutf8_iter-7fa95496b80f410c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lexical-write-float@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-write-float-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lexical_write_float","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-write-float-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblexical_write_float-24d1e1a6f9abe5fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lexical-parse-float@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-parse-float-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lexical_parse_float","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-parse-float-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblexical_parse_float-35b0e03e5a738a7a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#semver@1.0.24","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/semver-1.0.24/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"semver","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/semver-1.0.24/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsemver-01cc8e942a047462.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libsemver-01cc8e942a047462.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-select@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-select-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_select","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-select-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_select-ebe0bc6ca22bf8aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_properties@1.5.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties-1.5.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_properties","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_properties-1.5.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_properties-e82bb7486a75040c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crc32fast@1.4.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crc32fast","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrc32fast-cdf42d145cc3ec27.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lexical-core@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-core-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lexical_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lexical-core-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["floats","integers","lexical-parse-float","lexical-parse-integer","lexical-write-float","lexical-write-integer","parse","parse-floats","parse-integers","write","write-floats","write-integers"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblexical_core-83f264cae7004254.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc_version@0.4.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc_version-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_version","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc_version-0.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustc_version-1ebecb11bcfd30f4.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/librustc_version-1ebecb11bcfd30f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-sys@2.0.13+zstd.1.5.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-sys-2.0.13+zstd.1.5.6/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-sys-2.0.13+zstd.1.5.6/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/zstd-sys-bf03c6f513027638/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-trait@0.1.85","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.85/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_trait","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-trait-0.1.85/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libasync_trait-3fb212fe83a01f98.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblazy_static-0d710c21aa4e1e5b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#icu_normalizer@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"icu_normalizer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/icu_normalizer-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libicu_normalizer-6cb50bc4b06b07f3.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-sys@2.0.13+zstd.1.5.6","linked_libs":["static=zstd"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/zstd-sys-012ce489238b4a85/out"],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/zstd-sys-012ce489238b4a85/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-cast@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-cast-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_cast","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-cast-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["comfy-table","prettyprint"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_cast-8be0edb11472bcb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flatbuffers@24.12.23","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flatbuffers-24.12.23/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flatbuffers-24.12.23/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/flatbuffers-aa0518a1119a1169/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.14.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.14.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","allocator-api2","default","inline-more","raw","rayon","serde"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhashbrown-db1995d4465ff63f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#adler2@2.0.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"adler2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libadler2-7cf55add929a9f25.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-executor-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures_executor","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-executor-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures_executor-a2e81587adbe11d4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#twox-hash@1.6.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/twox-hash-1.6.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"twox_hash","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/twox-hash-1.6.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtwox_hash-ea806ebc76eb389f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna_adapter@1.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna_adapter-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna_adapter","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna_adapter-1.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["compiled_data"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libidna_adapter-2162c2353f8435d1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#miniz_oxide@0.8.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"miniz_oxide","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["with-alloc"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libminiz_oxide-61d8bc1be31b4f9b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#flatbuffers@24.12.23","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/flatbuffers-edcab2a10fb5c248/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-safe@7.2.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-safe-7.2.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-safe-7.2.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/zstd-safe-dbffd97616b89b8e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-2.0.11/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-2.0.11/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/thiserror-7a046d7ebc366b5f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#futures@0.3.31","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.3.31/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"futures","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/futures-0.3.31/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","async-await","default","executor","futures-executor","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfutures-ba4c6c384980dc57.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-sys@2.0.13+zstd.1.5.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-sys-2.0.13+zstd.1.5.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zstd_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-sys-2.0.13+zstd.1.5.6/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzstd_sys-a4d2bb2d467fd3f9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lz4_flex@0.11.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lz4_flex-0.11.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lz4_flex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lz4_flex-0.11.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["frame","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblz4_flex-45279adcf780d9aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#idna@1.0.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"idna","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-1.0.3/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","compiled_data","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libidna-0f3ac471efa78b84.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flatbuffers@24.12.23","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flatbuffers-24.12.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flatbuffers","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flatbuffers-24.12.23/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libflatbuffers-e95802cc2856acd8.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-safe@7.2.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/zstd-safe-c528214a0fe5df38/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.11","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/thiserror-b94cfdd56fbd0c06/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#flate2@1.0.35","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.0.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"flate2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.0.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["any_impl","default","miniz_oxide","rust_backend"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libflate2-c013f419ca69983d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-2.0.11/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-2.0.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthiserror_impl-012dea5f04b3f2ea.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#alloc-no-stdlib@2.0.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/alloc-no-stdlib-2.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"alloc_no_stdlib","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/alloc-no-stdlib-2.0.4/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liballoc_no_stdlib-3b5b8cdbac8c35da.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#snafu-derive@0.8.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snafu-derive-0.8.5/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"snafu_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snafu-derive-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rust_1_61"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsnafu_derive-2f6145a9bd20095d.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#url@2.5.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"url","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liburl-1a3850144a8357f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd-safe@7.2.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-safe-7.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zstd_safe","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-safe-7.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzstd_safe-d719193e357daa41.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-ipc@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-ipc-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_ipc","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-ipc-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","lz4","lz4_flex"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_ipc-bd2a40e23669aff9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#alloc-stdlib@0.2.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/alloc-stdlib-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"alloc_stdlib","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/alloc-stdlib-0.2.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liballoc_stdlib-555aa992b5762b34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#csv-core@0.1.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/csv-core-0.1.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"csv_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/csv-core-0.1.11/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcsv_core-121180550fabdf26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_cpus@1.16.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num_cpus-1.16.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_cpus","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num_cpus-1.16.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_cpus-002a2a1530817db7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#snap@1.1.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snap-1.1.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snap-1.1.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/snap-7d2bb82a29d8caa1/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsame_file-a32cf4481e400462.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#snap@1.1.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/snap-2063ea53de3d67eb/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#brotli-decompressor@4.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/brotli-decompressor-4.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"brotli_decompressor","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/brotli-decompressor-4.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc-stdlib","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbrotli_decompressor-f90dfb1e9624cbc8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#csv@1.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/csv-1.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"csv","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/csv-1.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcsv-1bc38fdc567f0d2e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwalkdir-b0b5914a6f0b3ee7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zstd@0.13.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-0.13.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zstd","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zstd-0.13.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzstd-a27350743c6242fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#snafu@0.8.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snafu-0.8.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"snafu","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snafu-0.8.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rust_1_61","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsnafu-e5b86b42b4c3fd82.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-ord@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-ord-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_ord","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-ord-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_ord-87b343e50b280961.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-string@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-string-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_string","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-string-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_string-7cb0915be6af1934.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-row@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-row-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_row","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-row-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_row-d6acce470130a5f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-arith@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_arith","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-arith-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_arith-dceec2ed872922fb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ordered-float@2.10.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ordered-float-2.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ordered_float","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ordered-float-2.10.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libordered_float-f2f987f9ab19fa7f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.13.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libitertools-3c48415aeb037dc3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#humantime@2.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/humantime-2.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"humantime","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/humantime-2.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhumantime-3610daeb9d5e723a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#integer-encoding@3.0.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/integer-encoding-3.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"integer_encoding","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/integer-encoding-3.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libinteger_encoding-dccff57a915f8ea8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#brotli@7.0.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/brotli-7.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"brotli","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/brotli-7.0.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc-stdlib","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbrotli-d34d67a543526738.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#snap@1.1.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snap-1.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"snap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/snap-1.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsnap-94ecbe03bd504ec3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#object_store@0.11.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object_store-0.11.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"object_store","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object_store-0.11.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libobject_store-aa6be04d7011284b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thrift@0.17.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thrift-0.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thrift","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thrift-0.17.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthrift-463193e53d56f4fc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-csv@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-csv-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_csv","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-csv-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_csv-2df9ee9629633849.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-json@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-json-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_json","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-json-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_json-1b81a7b9bc6eb95c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlparser_derive@0.2.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlparser_derive-0.2.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"sqlparser_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlparser_derive-0.2.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsqlparser_derive-d999af6c10f751d9.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfnv-dbd1d5183e430dc6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cmake@0.1.52","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cmake-0.1.52/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cmake","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cmake-0.1.52/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcmake-f4d537e1bfedde81.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcmake-f4d537e1bfedde81.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmemchr-5c7287ec138d5ff8.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libmemchr-5c7287ec138d5ff8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#parquet@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parquet-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"parquet","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/parquet-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arrow","arrow-array","arrow-buffer","arrow-cast","arrow-data","arrow-ipc","arrow-schema","arrow-select","async","base64","brotli","default","flate2","futures","lz4","lz4_flex","object_store","snap","tokio","zstd","zstd-sys"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libparquet-180ff403581a2486.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arrow-csv","arrow-ipc","arrow-json","csv","default","ipc","json","prettyprint"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow-8c7a371b996e1bd7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlparser@0.50.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlparser-0.50.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sqlparser","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlparser-0.50.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","sqlparser_derive","std","visitor"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsqlparser-d470c794d978f739.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-2.0.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-2.0.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthiserror-a08ac1ec44ae9cfb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-util@0.7.13","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-util-0.7.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_util","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-util-0.7.13/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["codec","default","io"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtokio_util-45e2ba73feeb295b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.24","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.24/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.24/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/psm-b4ecdd77331380b4/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#array-init-cursor@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/array-init-cursor-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"array_init_cursor","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/array-init-cursor-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarray_init_cursor-df377101021be7c7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glob@0.3.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glob-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glob","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glob-0.3.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libglob-6bc7d6e98c487f57.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libglob-6bc7d6e98c487f57.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-common@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-common-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_common","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-common-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["object_store","parquet"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_common-4906cd4d1a1568a2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-features@0.1.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-features-0.1.6/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-features-0.1.6/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/target-features-8ad5da61b679a29d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.13.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["use_std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libeither-a4e6a6a60a309f8d.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libeither-a4e6a6a60a309f8d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.24","linked_libs":["static=psm_s"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/psm-bd7cc28488a68693/out"],"cfgs":["asm","link_asm","switchable_stack"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/psm-bd7cc28488a68693/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#planus@0.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/planus-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"planus","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/planus-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libplanus-44bdb9ee63a49ddc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memmap2@0.9.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memmap2-0.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memmap2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memmap2-0.9.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["stable_deref_trait"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmemmap2-015ed25c0f53f9f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.17","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.17/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.17/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/stacker-56de16d875cae368/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote","visit-mut"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/syn-0f505a205cabd52a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-expr-common@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-expr-common-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_expr_common","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-expr-common-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_expr_common-0fc6eaa105916aa6.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-features@0.1.6","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/target-features-26c2d12d41babfe3/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itertools@0.13.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itertools","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","use_alloc","use_std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libitertools-67b9902a9ae58d8e.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libitertools-67b9902a9ae58d8e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/subtle-2.6.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"subtle","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/subtle-2.6.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsubtle-e23e0340962dce69.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dunce@1.0.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dunce-1.0.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dunce","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dunce-1.0.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdunce-734739ab270cfed8.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libdunce-734739ab270cfed8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fs_extra@1.3.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fs_extra-1.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fs_extra","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fs_extra-1.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfs_extra-7b2f0216b56577c9.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libfs_extra-7b2f0216b56577c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#psm@0.1.24","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.24/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"psm","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/psm-0.1.24/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpsm-41c831789b2a637b.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.17","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/stacker-d22ecd6365d3d70b/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-physical-expr-common@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-expr-common-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_physical_expr_common","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-expr-common-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_physical_expr_common-bb8bd81cae7c7216.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.25.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.25.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-main","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.25.0/builder/main.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["prebuilt-nasm"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/aws-lc-sys-d2ea58fc25cb4347/build-script-main"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","linked_libs":[],"linked_paths":[],"cfgs":["syn_disable_nightly_tests"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/syn-589760d47352f62a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-arrow-format@0.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-arrow-format-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_arrow_format","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-arrow-format-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","ipc","planus","serde"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_arrow_format-e5262ac7a756aad6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clang-sys@1.8.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clang_10_0","clang_11_0","clang_3_5","clang_3_6","clang_3_7","clang_3_8","clang_3_9","clang_4_0","clang_5_0","clang_6_0","clang_7_0","clang_8_0","clang_9_0","libloading","runtime"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/clang-sys-a8c9c743b6d89c5b/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#castaway@0.2.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/castaway-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"castaway","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/castaway-0.2.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcastaway-3e778fde4c92a44d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-utils@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-utils-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-utils-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["memmap","mmap"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-utils-af610faeadab10f3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.29","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prettyplease-0.2.29/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prettyplease-0.2.29/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["verbatim"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/prettyplease-0309edf316b23b74/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-functions-aggregate-common@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-aggregate-common-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_functions_aggregate_common","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-aggregate-common-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_functions_aggregate_common-b6794d3890e40b93.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-main","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/build/main.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/typenum-8f5f3acbb3e12413/build-script-main"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#simdutf8@0.1.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/simdutf8-0.1.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"simdutf8","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/simdutf8-0.1.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsimdutf8-6c14fde4b27c7626.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-service-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_service","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-service-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtower_service-ab0518e55302db6b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.9.5/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.9.5/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/httparse-3d556e36b0dc16d3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/vcpkg-0.2.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"vcpkg","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/vcpkg-0.2.15/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libvcpkg-2aab12a15a30f4f7.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libvcpkg-2aab12a15a30f4f7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.25.0","linked_libs":["static=aws_lc_0_25_0_crypto"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/aws-lc-sys-054a673768d2a6aa/out"],"cfgs":["x86_64_unknown_linux_gnu"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/aws-lc-sys-054a673768d2a6aa/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-utils@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-utils-4c6132b911f84a36/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-expr@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-expr-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_expr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-expr-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_expr-7a393bb54b15d347.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5","linked_libs":[],"linked_paths":[],"cfgs":["httparse_simd_neon_intrinsics","httparse_simd"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/httparse-98c7410ecbc85d03/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-error@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-error-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_error","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-error-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arrow-format","regex"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_error-67fc2559c9ab79a7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/typenum-d3904e6437145926/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.109","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-sys-0.9.109/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-main","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-sys-0.9.109/build/main.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/openssl-sys-6076f4b04b0d53ee/build-script-main"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#compact_str@0.8.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compact_str-0.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"compact_str","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compact_str-0.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","serde","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcompact_str-5e6fe359f3293e54.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.29","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/prettyplease-137b72039634601a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"syn","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clone-impls","default","derive","extra-traits","full","parsing","printing","proc-macro","quote","visit-mut"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsyn-4b774e69c4654c79.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libsyn-4b774e69c4654c79.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#clang-sys@1.8.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/clang-sys-710642cd1798fb1c/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#stacker@0.1.17","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"stacker","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stacker-0.1.17/src/lib.rs","edition":"2015","doc":true,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstacker-ea6179ab7ec4290a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-features@0.1.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-features-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"target_features","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-features-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtarget_features-d0ebd45de0ba5d52.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libtarget_features-d0ebd45de0ba5d52.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#raw-cpuid@11.3.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-cpuid-11.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"raw_cpuid","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-cpuid-11.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libraw_cpuid-86bf66d827fbad9b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-schema@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-schema-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-schema-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-schema-6f2221e0fbf35e46/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/generic-array-873f0cb9f45cdc0a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fastrand@2.3.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fastrand-2.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fastrand","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fastrand-2.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfastrand-99d8ec7ac2873b0d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#reborrow@0.5.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reborrow-0.5.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"reborrow","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reborrow-0.5.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libreborrow-28808581e57cc7c4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#try-lock@0.2.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/try-lock-0.2.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"try_lock","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/try-lock-0.2.5/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtry_lock-8a25a5dbe3a16363.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-schema@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-schema-d5ab0081701570ee/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","linked_libs":[],"linked_paths":[],"cfgs":["relaxed_coherence"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/generic-array-b32fa9943e73849d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multiversion-macros@0.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversion-macros-0.7.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"multiversion_macros","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversion-macros-0.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmultiversion_macros-51749cb8926719b3.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tempfile@3.15.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tempfile-3.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tempfile","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tempfile-3.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","getrandom"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtempfile-0b1f530f19b206b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-utils@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-utils-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_utils","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-utils-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["memmap","mmap"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_utils-1e80354bf0898ddf.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#typenum@1.17.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"typenum","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtypenum-863115bd6169df35.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httparse@1.9.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.9.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httparse","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/httparse-1.9.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttparse-420c0b924833f817.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#want@0.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/want-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"want","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/want-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwant-eab51d71ec09eeef.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.109","linked_libs":["ssl","crypto"],"linked_paths":[],"cfgs":["osslconf=\"OPENSSL_NO_IDEA\"","osslconf=\"OPENSSL_NO_SSL3_METHOD\"","openssl","ossl300","ossl101","ossl102","ossl102f","ossl102h","ossl110","ossl110f","ossl110g","ossl110h","ossl111","ossl111b","ossl111c","ossl111d"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/openssl-sys-cd6326797024d5c3/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#target-features@0.1.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-features-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"target_features","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/target-features-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtarget_features-a2778fb86153b3c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@1.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-1.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-1.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttp-935c23e1adac40a5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dashmap@6.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dashmap-6.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dashmap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dashmap-6.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdashmap-3f221e906854b39a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.8/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/ring-f1fc48a59c17f19a/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-arrow@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-arrow-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-arrow-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arrow-format","chrono-tz","compute","compute_aggregate","compute_arithmetics","compute_arithmetics_decimal","compute_bitwise","compute_boolean","compute_boolean_kleene","compute_comparison","compute_hash","compute_take","compute_temporal","io_ipc","multiversion","strength_reduce","temporal"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-arrow-3595f7f926c0d5f3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.7.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.7.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.7.8/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/ahash-73f4bd637fd8b808/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#httpdate@1.0.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/httpdate-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"httpdate","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/httpdate-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttpdate-c7118c247270bae9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcfg_if-8a092ab2134337e4.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcfg_if-8a092ab2134337e4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#minimal-lexical@0.2.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/minimal-lexical-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"minimal_lexical","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/minimal-lexical-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libminimal_lexical-b624de130e3be35a.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libminimal_lexical-b624de130e3be35a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.12.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-rs-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-rs-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aws-lc-sys","prebuilt-nasm"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/aws-lc-rs-afb5080c9517c12c/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.8","linked_libs":["static=ring_core_0_17_8_","static=ring_core_0_17_8_test"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/ring-c02b814c390bdbc0/out"],"cfgs":[],"env":[["RING_CORE_PREFIX","ring_core_0_17_8_"]],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/ring-c02b814c390bdbc0/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-execution@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-execution-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_execution","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-execution-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_execution-c21ce2a094766076.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#multiversion@0.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversion-0.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"multiversion","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversion-0.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmultiversion-fa0961b0a351870d.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-arrow@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-arrow-20a68b16dc59605a/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/aws-lc-rs-3c86d7556b3f5fd6/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nom@7.1.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nom","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnom-d992e9a5f19702bb.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libnom-d992e9a5f19702bb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libloading@0.8.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libloading-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libloading","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libloading-0.8.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblibloading-4d081fcbce93b327.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/liblibloading-4d081fcbce93b327.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.7.8","linked_libs":[],"linked_paths":[],"cfgs":["feature=\"runtime-rng\"","feature=\"folded_multiply\""],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/ahash-d00c822055e1a442/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-schema@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-schema-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_schema","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-schema-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_schema-8c60f9b858f9a00b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"generic_array","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/generic-array-0.14.7/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["more_lengths"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgeneric_array-5a3b68b15ff3eb10.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dyn-stack@0.10.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dyn-stack-0.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dyn_stack","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dyn-stack-0.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdyn_stack-1c6eaf9a0f3d2c67.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pulp@0.18.22","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pulp-0.18.22/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pulp","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pulp-0.18.22/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpulp-f925631909474ba9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#raw-cpuid@10.7.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-cpuid-10.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"raw_cpuid","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-cpuid-10.7.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libraw_cpuid-84670cbc789770f5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-compute@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-compute-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-compute-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["approx_unique","cast"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-compute-6bdf76785a49a399/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ethnum@1.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ethnum-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ethnum","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ethnum-1.5.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libethnum-4824d19bb55c1fcc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.10.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pki-types-1.10.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pki_types","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pki-types-1.10.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustls_pki_types-6249d1e49190bcc4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strength_reduce@0.2.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strength_reduce-0.2.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strength_reduce","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strength_reduce-0.2.4/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstrength_reduce-73f6088be1c881c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hex-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hex-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhex-819e31895134482f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fixedbitset@0.4.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fixedbitset-0.4.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fixedbitset","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fixedbitset-0.4.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfixedbitset-0d34953dd52c0872.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dyn-clone@1.0.17","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dyn-clone-1.0.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dyn_clone","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dyn-clone-1.0.17/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdyn_clone-bf8a02fc69d0810a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#streaming-iterator@0.1.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/streaming-iterator-0.1.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"streaming_iterator","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/streaming-iterator-0.1.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstreaming_iterator-3d5ad6a061e21b66.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-compute@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-compute-fb3e8999132befc5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#petgraph@0.6.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/petgraph-0.6.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"petgraph","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/petgraph-0.6.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","graphmap","matrix_graph","stable_graph"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpetgraph-4e582a888463e726.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm-common@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-common-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm_common","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-common-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["f16","half","rayon","std","sysctl","wasm-simd128-enable"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm_common-009be851fb6b85dc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clang-sys@1.8.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clang_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clang-sys-1.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["clang_10_0","clang_11_0","clang_3_5","clang_3_6","clang_3_7","clang_3_8","clang_3_9","clang_4_0","clang_5_0","clang_6_0","clang_7_0","clang_8_0","clang_9_0","libloading","runtime"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libclang_sys-53a193fbb7c65ac2.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libclang_sys-53a193fbb7c65ac2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cexpr@0.6.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cexpr-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cexpr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cexpr-0.6.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcexpr-07b15975568413a8.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcexpr-07b15975568413a8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ahash@0.7.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.7.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ahash","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.7.8/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libahash-0e7749625d32a3d7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@1.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttp_body-980fcbe3a034f80d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-arrow@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-arrow-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_arrow","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-arrow-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["arrow-format","chrono-tz","compute","compute_aggregate","compute_arithmetics","compute_arithmetics_decimal","compute_bitwise","compute_boolean","compute_boolean_kleene","compute_comparison","compute_hash","compute_take","compute_temporal","io_ipc","multiversion","strength_reduce","temporal"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_arrow-550c8cc53c82cafe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prettyplease@0.2.29","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prettyplease-0.2.29/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prettyplease","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prettyplease-0.2.29/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["verbatim"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libprettyplease-59e3486abc6bed5e.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libprettyplease-59e3486abc6bed5e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.25.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.25.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aws_lc_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.25.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["prebuilt-nasm"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libaws_lc_sys-9730ad98095afd4e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.95/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.95/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/anyhow-72e68292ded972b2/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/thiserror-60f9c097750051db/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoap@1.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoap-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoap-1.0.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","simd","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libitoap-3a1ab336e2a5fb85.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhashbrown-311189566127608b.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libhashbrown-311189566127608b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libequivalent-6237ed9240d9f13a.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libequivalent-6237ed9240d9f13a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#log@0.4.25","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"log","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblog-3dd3e2117baeeb3f.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/liblog-3dd3e2117baeeb3f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.73","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-0.10.73/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-0.10.73/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/openssl-664740726eb91b39/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bitflags@2.8.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bitflags","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbitflags-2b25a2533051d7fe.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libbitflags-2b25a2533051d7fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foreign-types-shared@0.1.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foreign-types-shared-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foreign_types_shared","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foreign-types-shared-0.1.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libforeign_types_shared-494032a4c52f3be2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#spin@0.9.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"spin","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spin-0.9.8/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["once"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libspin-7bdb6fb90124f7d6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fast-float2@0.2.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fast-float2-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fast_float2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fast-float2-0.2.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfast_float2-168aae22a1a0e3e5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zeroize","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zeroize-1.8.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzeroize-c4551f79df3fffe5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/untrusted-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"untrusted","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/untrusted-0.9.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libuntrusted-3325daa048d44a4c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atoi_simd@0.16.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/atoi_simd-0.16.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atoi_simd","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/atoi_simd-0.16.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libatoi_simd-381bf0c0225e78b3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ring@0.17.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ring","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ring-0.17.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","dev_urandom_fallback"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libring-ea387bbb44e2b3cd.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.73","linked_libs":[],"linked_paths":[],"cfgs":["osslconf=\"OPENSSL_NO_IDEA\"","osslconf=\"OPENSSL_NO_SSL3_METHOD\"","ossl101","ossl102","ossl110","ossl110g","ossl110h","ossl111","ossl111d","ossl300"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/openssl-3793a728a4cf42d4/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foreign-types@0.3.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foreign-types-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foreign_types","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foreign-types-0.3.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libforeign_types-fff60a419e1e3cb0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.12.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-rs-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aws_lc_rs","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-rs-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aws-lc-sys","prebuilt-nasm"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libaws_lc_rs-b76f0a03c8cbd205.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","linked_libs":[],"linked_paths":[],"cfgs":["std_backtrace"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/anyhow-f74affc18abd1e44/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@2.7.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libindexmap-7c37f3377a9fdce4.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libindexmap-7c37f3377a9fdce4.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/thiserror-cabeee307b09e8de/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-compute@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-compute-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_compute","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-compute-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["approx_unique","cast"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_compute-ea9d31c1a404d617.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-physical-expr@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-expr-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_physical_expr","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-expr-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["base64","default","encoding_expressions","hex","regex","regex_expressions"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_physical_expr-9a242a6700882335.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.12.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.12.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.12.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ahash","default","inline-more","raw"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhashbrown-4d28335036aa086f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crypto_common","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crypto-common-0.1.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrypto_common-4d0aa31aaa332841.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"block_buffer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/block-buffer-0.10.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libblock_buffer-0f031f65bde96765.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-sys@0.9.109","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-sys-0.9.109/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-sys-0.9.109/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libopenssl_sys-f9121898d39a4f73.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-macros@0.1.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-macros-0.1.1/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"openssl_macros","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-macros-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libopenssl_macros-2bcf29c2582caa56.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@1.0.69","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-1.0.69/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"thiserror_impl","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-impl-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthiserror_impl-b33e6fe0c4d524c0.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#atomic-waker@1.1.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/atomic-waker-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"atomic_waker","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/atomic-waker-1.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libatomic_waker-ec8bfcc7ccfced48.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.21","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.23.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.23.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aws_lc_rs","default","log","logging","ring","std","tls12"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/rustls-697826fa641d3fd6/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.12","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"winnow","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/winnow-0.7.12/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwinnow-f6e668009452d471.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libwinnow-f6e668009452d471.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#native-tls@0.2.14","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/native-tls-0.2.14/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/native-tls-0.2.14/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/native-tls-a5990912251115c3/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_datetime","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_datetime-0.6.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtoml_datetime-6277f3ee32e8fe2d.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libtoml_datetime-6277f3ee32e8fe2d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl@0.10.73","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-0.10.73/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-0.10.73/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libopenssl-27beeff80c475495.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@1.0.69","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-1.0.69/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthiserror-67711c4c7eadc152.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"digest","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/digest-0.10.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","block-buffer","core-api","default","mac","std","subtle"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdigest-0cf51cb07f6320d5.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#native-tls@0.2.14","linked_libs":[],"linked_paths":[],"cfgs":["have_min_max_version"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/native-tls-6f7a73efb3ab05d5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.27","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml_edit","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml_edit-0.22.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["parse"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtoml_edit-007c2470d49975ea.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libtoml_edit-007c2470d49975ea.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.4.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.4.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.4.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libh2-fdfdc695de3be2cf.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/rustls-ece405d0fd666fc7/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-webpki@0.102.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-webpki-0.102.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-webpki-0.102.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","aws_lc_rs","ring","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwebpki-c989a6fbdea34fe1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http@0.2.12","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-0.2.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-0.2.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttp-7604b074d82f0039.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thiserror@2.0.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-2.0.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thiserror","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thiserror-2.0.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthiserror-2c7c6f808b3511e6.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libthiserror-2c7c6f808b3511e6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-core@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-core-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-core-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["algorithm_group_by","chrono","comfy-table","docs","dtype-date","dtype-datetime","dtype-duration","dtype-time","fmt","regex","rows","temporal","zip_with"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-core-385ef308d0a52551/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ucd-trie@0.1.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ucd-trie-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ucd_trie","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ucd-trie-0.1.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libucd_trie-0e9f7cedaa03f262.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libucd_trie-0e9f7cedaa03f262.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-layer-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower_layer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-layer-0.3.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtower_layer-174e8c4ba563a2c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#mime@0.3.17","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mime-0.3.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"mime","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mime-0.3.17/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmime-af6524c4c625de55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#openssl-probe@0.1.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-probe-0.1.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"openssl_probe","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/openssl-probe-0.1.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libopenssl_probe-20e2a6a3439562f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bindgen@0.72.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.72.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.72.0/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","prettyplease","runtime"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/bindgen-97772c99db324013/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls@0.23.21","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.23.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-0.23.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aws_lc_rs","default","log","logging","ring","std","tls12"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustls-7f7fcc60a990f38d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@1.5.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-1.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-1.5.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","default","http1","http2","server"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhyper-4b4e774d7095913b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#proc-macro-crate@3.3.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-crate-3.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"proc_macro_crate","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro-crate-3.3.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libproc_macro_crate-83c79789d1eda0a7.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libproc_macro_crate-83c79789d1eda0a7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#bindgen@0.72.0","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/bindgen-e3afc48a3d9ca187/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#native-tls@0.2.14","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/native-tls-0.2.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"native_tls","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/native-tls-0.2.14/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnative_tls-0d9afa43d7745f4d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest@2.7.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest-2.7.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest-2.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","memchr","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpest-4bee7848d285f3c1.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libpest-4bee7848d285f3c1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-core@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-core-582b6bd31b0a5271/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-row@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-row-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_row","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-row-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_row-20142b7faca977f1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-functions-aggregate@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-aggregate-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_functions_aggregate","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-aggregate-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_functions_aggregate-3e0d8648d19ccb45.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.95/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libanyhow-3e9ef56fa6f5f3a7.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libanyhow-3e9ef56fa6f5f3a7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_urlencoded@0.7.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_urlencoded-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_urlencoded","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_urlencoded-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libserde_urlencoded-9d99896d18b96254.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bzip2-sys@0.1.11+1.0.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bzip2-sys-0.1.11+1.0.8/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bzip2-sys-0.1.11+1.0.8/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/bzip2-sys-0e5c3ed9dbd64668/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lzma-sys@0.1.20","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lzma-sys-0.1.20/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lzma-sys-0.1.20/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["static"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/lzma-sys-04e3afb8ae00b5a2/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#blake3@1.5.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blake3-1.5.5/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blake3-1.5.5/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/blake3-d1984c311086b53e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#link-cplusplus@1.0.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/link-cplusplus-1.0.10/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/link-cplusplus-1.0.10/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/link-cplusplus-a94e684861982f11/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-ops@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-ops-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-ops-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dtype-date","dtype-datetime","dtype-duration"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-ops-f1d30953498aedab/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@1.9.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-1.9.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-1.9.3/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/indexmap-dcbdc7b6ff8b372c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@1.0.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-1.0.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsync_wrapper-bcf8808ff4ecc239.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#same-file@1.0.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"same_file","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/same-file-1.0.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsame_file-0929a57bc8207a05.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libsame_file-0929a57bc8207a05.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#utf8parse@0.2.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8parse-0.2.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"utf8parse","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/utf8parse-0.2.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libutf8parse-37a336dfec8f36fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc-hash@2.1.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-2.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_hash","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-2.1.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustc_hash-7bc655bf38b142c2.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/librustc_hash-7bc655bf38b142c2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#once_cell@1.20.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"once_cell","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","race","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libonce_cell-8115223a37e4ce5e.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libonce_cell-8115223a37e4ce5e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scratch@1.0.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scratch-1.0.9/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scratch-1.0.9/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/scratch-ab33601d2d0e96fd/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xxhash-rust@0.8.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xxhash-rust-0.8.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xxhash_rust","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xxhash-rust-0.8.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["xxh3"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libxxhash_rust-8c4c0e7579dff4cd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-syntax@0.6.29","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_syntax","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex_syntax-39dc48d1f79dbbc7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-ops@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-ops-b46f0504ad050ebf/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#walkdir@2.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"walkdir","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/walkdir-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwalkdir-302886d3285f6da7.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libwalkdir-302886d3285f6da7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#regex-automata@0.1.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex_automata","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.1.10/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","regex-syntax","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libregex_automata-94a1f2a6ab3b7617.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-core@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-core-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-core-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["algorithm_group_by","chrono","comfy-table","docs","dtype-date","dtype-datetime","dtype-duration","dtype-time","fmt","regex","rows","temporal","zip_with"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_core-aa9303c24cf88b35.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#scratch@1.0.9","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/scratch-7442e11d5ef5f342/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bindgen@0.72.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.72.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bindgen","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.72.0/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","prettyplease","runtime"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbindgen-52f38e023df1bc36.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libbindgen-52f38e023df1bc36.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest_meta@2.7.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest_meta-2.7.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest_meta","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest_meta-2.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpest_meta-3d545838b31b8a0e.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libpest_meta-3d545838b31b8a0e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle-parse@0.2.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstyle-parse-0.2.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle_parse","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstyle-parse-0.2.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","utf8"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libanstyle_parse-f24fee31fe5fb2d7.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#bzip2-sys@0.1.11+1.0.8","linked_libs":["static=bz2"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/bzip2-sys-241c6347b260d7ab/out/lib"],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/bzip2-sys-241c6347b260d7ab/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@1.9.3","linked_libs":[],"linked_paths":[],"cfgs":["has_std"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/indexmap-20afcc5a4c37b3e3/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#link-cplusplus@1.0.10","linked_libs":["static=link-cplusplus","stdc++"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/link-cplusplus-cc425d3a76d136bd/out"],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/link-cplusplus-cc425d3a76d136bd/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#blake3@1.5.5","linked_libs":["static=blake3_sse2_sse41_avx2_assembly","static=blake3_avx512_assembly"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/blake3-cd8346dc273e3109/out","native=/mnt/hyprstream/hyprstream/target/debug/build/blake3-cd8346dc273e3109/out"],"cfgs":["blake3_sse2_ffi","blake3_sse41_ffi","blake3_avx2_ffi","blake3_avx512_ffi"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/blake3-cd8346dc273e3109/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#lzma-sys@0.1.20","linked_libs":["static=lzma"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/lzma-sys-87057b6cf01bb0b5/out"],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/lzma-sys-87057b6cf01bb0b5/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-derive@0.13.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-derive-0.13.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"prost_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-derive-0.13.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libprost_derive-a7395039f46ead2a.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-util@0.1.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-util-0.1.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_util","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-util-0.1.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","client-legacy","default","http1","http2","server","server-auto","service","tokio"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhyper_util-034d9c0a1f86ab60.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_enum_derive@0.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num_enum_derive-0.7.4/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"num_enum_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num_enum_derive-0.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["proc-macro-crate","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_enum_derive-44ca18020bab4d99.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#h2@0.3.27","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.3.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"h2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/h2-0.3.27/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libh2-efb7306d74e9a9d0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body@0.4.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-0.4.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttp_body-84199f4699527628.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#http-body-util@0.1.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-util-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"http_body_util","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/http-body-util-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhttp_body_util-a88dc3f35be363b5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm-f32@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-f32-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm_f32","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-f32-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rayon","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm_f32-19a15ad7e8e74c40.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#webpki-roots@0.26.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/webpki-roots-0.26.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"webpki_roots","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/webpki-roots-0.26.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libwebpki_roots-7376fea299343fc5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#find_cuda_helper@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/find_cuda_helper-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"find_cuda_helper","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/find_cuda_helper-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfind_cuda_helper-9cd5768681442408.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libfind_cuda_helper-9cd5768681442408.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-common-runtime@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-common-runtime-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_common_runtime","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-common-runtime-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_common_runtime-b5ea978c7d2f12ad.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#argminmax@0.6.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/argminmax-0.6.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"argminmax","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/argminmax-0.6.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["float"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libargminmax-c5559884be67e551.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project-internal@1.1.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-internal-1.1.8/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"pin_project_internal","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-internal-1.1.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpin_project_internal-75e15309b7bd6af4.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayvec@0.7.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayvec-0.7.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayvec","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayvec-0.7.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrayvec-47bbce9e57fede12.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.16","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.16/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cpufeatures","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpufeatures-0.2.16/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcpufeatures-d79b86f95948e299.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bindgen@0.70.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.70.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.70.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","prettyplease","runtime"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/bindgen-9faacd6a9d20354c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle-query@1.1.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstyle-query-1.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle_query","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstyle-query-1.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libanstyle_query-ff0a2b00b2ebf083.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#overload@0.1.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"overload","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liboverload-ee8af486788a97ab.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstyle@1.0.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstyle-1.0.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstyle","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstyle-1.0.10/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libanstyle-ffc86a55dd04ef71.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#constant_time_eq@0.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/constant_time_eq-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"constant_time_eq","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/constant_time_eq-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libconstant_time_eq-ef74bc3d2358538f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#is_terminal_polyfill@1.70.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/is_terminal_polyfill-1.70.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"is_terminal_polyfill","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/is_terminal_polyfill-1.70.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libis_terminal_polyfill-7126ee169c00f8a9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrayref@0.3.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayref-0.3.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrayref","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayref-0.3.9/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrayref-04e782d578f3fe82.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_width","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-width-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cjk","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libunicode_width-7f7e09ff1556a5df.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libunicode_width-7f7e09ff1556a5df.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cxxbridge-flags@1.0.158","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxxbridge-flags-1.0.158/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cxxbridge_flags","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxxbridge-flags-1.0.158/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcxxbridge_flags-09a6274b2fe8cef4.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcxxbridge_flags-09a6274b2fe8cef4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#termcolor@1.4.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/termcolor-1.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"termcolor","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/termcolor-1.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtermcolor-7572c4cfb36a91af.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libtermcolor-7572c4cfb36a91af.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zip@1.1.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-1.1.4/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-1.1.4/src/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/zip-4ce7bc73573bf682/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/portable-atomic-1.11.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/portable-atomic-1.11.1/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fallback"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/portable-atomic-69b847a38773337c/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#colorchoice@1.0.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/colorchoice-1.0.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"colorchoice","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/colorchoice-1.0.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcolorchoice-4d0174673931ac96.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#blake3@1.5.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blake3-1.5.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"blake3","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blake3-1.5.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libblake3-32f0ad5c06612ac4.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#bindgen@0.70.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/bindgen-6ad8117551523127/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#codespan-reporting@0.12.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/codespan-reporting-0.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"codespan_reporting","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/codespan-reporting-0.12.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std","termcolor"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcodespan_reporting-ccf2db941d04869c.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcodespan_reporting-ccf2db941d04869c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cxx@1.0.158","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/cxx-31ac11422523e41e/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.1","linked_libs":[],"linked_paths":[],"cfgs":["portable_atomic_pre_llvm_20"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/portable-atomic-9dcb5bc664482a23/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anstream@0.6.18","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstream-0.6.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anstream","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anstream-0.6.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["auto","default","wincon"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libanstream-0116a8e265185944.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zip@1.1.4","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/zip-6e0a915b804b858d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nu-ansi-term@0.46.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nu_ansi_term","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnu_ansi_term-a267e1c362d2e599.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sha2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sha2-0.10.8/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsha2-20867f7f946f93f3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-physical-plan@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-plan-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_physical_plan","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-plan-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_physical_plan-732ba0b557ecb696.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#llama-cpp-sys-2@0.1.116","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/llama-cpp-sys-2-0.1.116/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/llama-cpp-sys-2-0.1.116/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["openmp","shared-stdcxx"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/llama-cpp-sys-2-fa3a1a07d7a4a709/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-core@0.4.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-core-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-core-0.4.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["tracing"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libaxum_core-f9da505ed5598e49.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm-f16@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-f16-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm_f16","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-f16-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rayon","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm_f16-66a30dcd465b5c7a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-ops@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-ops-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_ops","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-ops-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dtype-date","dtype-datetime","dtype-duration"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_ops-63300b92d8dcbafd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pin-project@1.1.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-1.1.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pin_project","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-1.1.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpin_project-99b2f45d8df046ca.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num_enum@0.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num_enum-0.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_enum","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num_enum-0.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_enum-7b35c1544c46a89b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper@0.14.32","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-0.14.32/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-0.14.32/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["client","h2","http1","http2","runtime","socket2","tcp"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhyper-adad9313dff0da3b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lzma-sys@0.1.20","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lzma-sys-0.1.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lzma_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lzma-sys-0.1.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["static"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblzma_sys-2d36c91ed3d12046.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost@0.13.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.13.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-0.13.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","derive","prost-derive","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libprost-1f87bf56686bdb9b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indexmap@1.9.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-1.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indexmap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-1.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libindexmap-1f355fa887e6582c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest_generator@2.7.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest_generator-2.7.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest_generator","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest_generator-2.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpest_generator-24fe9d904a292ffe.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libpest_generator-24fe9d904a292ffe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bzip2-sys@0.1.11+1.0.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bzip2-sys-0.1.11+1.0.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bzip2_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bzip2-sys-0.1.11+1.0.8/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbzip2_sys-24a6b163af8c909d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchers@0.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchers-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchers","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchers-0.1.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmatchers-5d8e1eafd041e1e0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#scratch@1.0.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scratch-1.0.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"scratch","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/scratch-1.0.9/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libscratch-0aca7eb36044c2f0.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libscratch-0aca7eb36044c2f0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower@0.5.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__common","futures-core","futures-util","log","make","pin-project-lite","sync_wrapper","tokio","tracing","util"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtower-98e3e999f90c4e4b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-native-tls@0.3.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-native-tls-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_native_tls","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-native-tls-0.3.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtokio_native_tls-b8e9e6722e2750fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#blake2@0.10.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blake2-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"blake2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/blake2-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libblake2-ba5f88e760a6b00c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#md-5@0.10.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/md-5-0.10.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/md-5-0.10.6/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmd5-6bc96e73ff5cdd1a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm-f64@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-f64-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm_f64","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-f64-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rayon","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm_f64-06a503b90552141b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm-c64@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-c64-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm_c64","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-c64-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rayon","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm_c64-b7da0568397d1de1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm-c32@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-c32-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm_c32","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-c32-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["rayon","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm_c32-aaf6492620736c61.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sharded-slab@0.1.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sharded_slab","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsharded_slab-038bbfa7a058e03c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#terminal_size@0.4.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/terminal_size-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"terminal_size","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/terminal_size-0.4.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libterminal_size-856183dd559bfd30.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-log@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_log","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","log-tracer","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtracing_log-b31c96cf9cafea35.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#now@0.1.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/now-0.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"now","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/now-0.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnow-c8c5af4f9a1e144d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#uuid@1.12.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"uuid","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uuid-1.12.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","rng","serde","std","v4"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libuuid-a751bb19df0ba093.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_path_to_error@0.1.17","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_path_to_error-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_path_to_error","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_path_to_error-0.1.17/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libserde_path_to_error-9cc8d80a67d51b2b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum-macros@0.4.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-macros-0.4.2/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"axum_macros","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-macros-0.4.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libaxum_macros-4ce1b0bd0e9ae3be.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream-impl@0.3.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-impl-0.3.6/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"async_stream_impl","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-impl-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libasync_stream_impl-92e0ff0c2f714e9e.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#thread_local@1.1.8","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"thread_local","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libthread_local-28c9d70059571c34.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#strsim@0.11.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strsim-0.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"strsim","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/strsim-0.11.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstrsim-3881b6c05838e0cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#matchit@0.7.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchit-0.7.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"matchit","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchit-0.7.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libmatchit-b8bcd80b02a42de2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_lex@0.7.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap_lex-0.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap_lex","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap_lex-0.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libclap_lex-b48cf3244864866a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dlv-list@0.3.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dlv-list-0.3.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dlv_list","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dlv-list-0.3.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdlv_list-590f660f5743941a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.21.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.21.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.21.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbase64-77a83388b8361a2c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.12.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-segmentation-1.12.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"unicode_segmentation","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-segmentation-1.12.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libunicode_segmentation-fb7bc3acc4a163cc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fallible-streaming-iterator@0.1.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fallible-streaming-iterator-0.1.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fallible_streaming_iterator","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fallible-streaming-iterator-0.1.9/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libfallible_streaming_iterator-7840b14f42a9d1e4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#option-ext@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/option-ext-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"option_ext","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/option-ext-0.2.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liboption_ext-24808384cb8c2b78.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/powerfmt-0.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"powerfmt","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/powerfmt-0.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpowerfmt-c5791d9e9adaf39e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustc-hash@1.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-1.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustc_hash","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-1.1.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustc_hash-c9f2d0ff9cfc684c.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/librustc_hash-c9f2d0ff9cfc684c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#glob@0.3.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glob-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"glob","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glob-0.3.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libglob-7de6911af084b8d6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ucd-trie@0.1.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ucd-trie-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ucd_trie","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ucd-trie-0.1.7/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libucd_trie-142460c16d867902.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bindgen@0.70.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.70.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bindgen","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bindgen-0.70.1/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","logging","prettyplease","runtime"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbindgen-846aca0b9fbf6c03.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libbindgen-846aca0b9fbf6c03.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs-sys@0.4.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dirs-sys-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs_sys","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dirs-sys-0.4.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdirs_sys-7810855ef6a39e07.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ordered-multimap@0.4.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ordered-multimap-0.4.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ordered_multimap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ordered-multimap-0.4.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libordered_multimap-6a348d0e9deba112.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_builder@4.5.26","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap_builder-4.5.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap_builder","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap_builder-4.5.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color","env","error-context","help","std","suggestions","usage","wrap_help"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libclap_builder-5c1263c0875d63d4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#streaming-decompression@0.1.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/streaming-decompression-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"streaming_decompression","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/streaming-decompression-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libstreaming_decompression-78285429d7cb3f5d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#deranged@0.3.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/deranged-0.3.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"deranged","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/deranged-0.3.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","powerfmt","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libderanged-bd455e99f0db139a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest@2.7.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest-2.7.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pest","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest-2.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","memchr","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpest-17744e6623111de0.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@1.0.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-1.0.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pemfile","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-1.0.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustls_pemfile-b7336580f61766fe.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-functions@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_functions","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["base64","blake2","blake3","core_expressions","crypto_expressions","datetime_expressions","default","encoding_expressions","hashbrown","hex","math_expressions","md-5","regex","regex_expressions","sha2","string_expressions","unicode-segmentation","unicode_expressions","uuid"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_functions-057d253f9af5e603.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-stream@0.3.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-0.3.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_stream","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-stream-0.3.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libasync_stream-651cb6492f1317b9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-time@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-time-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_time","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-time-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["dtype-date","dtype-datetime","dtype-duration","dtype-time","temporal"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_time-6a52cfc881c4e687.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-subscriber@0.3.19","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-subscriber-0.3.19/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_subscriber","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-subscriber-0.3.19/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","ansi","chrono","default","env-filter","fmt","matchers","nu-ansi-term","once_cell","regex","registry","sharded-slab","smallvec","std","thread_local","tracing","tracing-log"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtracing_subscriber-df7653698a1c16d6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#axum@0.7.9","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"axum","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","form","http1","json","macros","matched-path","original-uri","query","tokio","tower-log","tracing"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libaxum-f5948f7edb39d4b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#gemm@0.17.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-0.17.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"gemm","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gemm-0.17.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","f16","gemm-f16","rayon","std","wasm-simd128-enable"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libgemm-a9cdb3616fdebc29.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cxx-build@1.0.158","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-build-1.0.158/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cxx_build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-build-1.0.158/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcxx_build-50c760f9852757dc.rlib","/mnt/hyprstream/hyprstream/target/debug/deps/libcxx_build-50c760f9852757dc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tower@0.4.13","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.4.13/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tower","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tower-0.4.13/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__common","balance","buffer","discover","futures-core","futures-util","indexmap","limit","load","make","pin-project","pin-project-lite","rand","ready-cache","slab","tokio","tokio-util","tracing","util"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtower-9af8ffcf94a9cd02.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-tls@0.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-tls-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_tls","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-tls-0.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhyper_tls-634f83eea18ad05d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pest_derive@2.7.15","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest_derive-2.7.15/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"pest_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pest_derive-2.7.15/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpest_derive-3db96c685c063989.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bzip2@0.4.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bzip2-0.4.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bzip2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bzip2-0.4.4/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbzip2-ec9e855267c26097.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xz2@0.1.7","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xz2-0.1.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xz2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xz2-0.1.7/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["static"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libxz2-751b636a7c77294e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zip@1.1.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-1.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zip","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zip-1.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libzip-33f41b908695813e.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#llama-cpp-sys-2@0.1.116","linked_libs":["static=ggml-base","static=ggml-cpu","static=ggml","static=llama","gomp","dylib=stdc++"],"linked_paths":["/mnt/hyprstream/hyprstream/target/debug/build/llama-cpp-sys-2-98651f5b2e82efb6/out/lib","/mnt/hyprstream/hyprstream/target/debug/build/llama-cpp-sys-2-98651f5b2e82efb6/out/lib64","/mnt/hyprstream/hyprstream/target/debug/build/llama-cpp-sys-2-98651f5b2e82efb6/out"],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/llama-cpp-sys-2-98651f5b2e82efb6/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#cxx@1.0.158","linked_libs":["static=cxxbridge1"],"linked_paths":["native=/mnt/hyprstream/hyprstream/target/debug/build/cxx-d0e3c3c3d22e24bb/out"],"cfgs":["built_with_cargo","seek_relative","error_in_core"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/cxx-d0e3c3c3d22e24bb/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#portable-atomic@1.11.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/portable-atomic-1.11.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"portable_atomic","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/portable-atomic-1.11.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","fallback"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libportable_atomic-af3992a070d1c110.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hyper-timeout@0.5.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-timeout-0.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyper_timeout","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hyper-timeout-0.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhyper_timeout-bd06ff4009dbff6a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-rustls@0.26.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-rustls-0.26.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_rustls","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-rustls-0.26.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aws_lc_rs","default","logging","ring","tls12"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtokio_rustls-6c895c1458c9f9d5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rustls-pemfile@2.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-2.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rustls_pemfile","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustls-pemfile-2.2.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librustls_pemfile-6f5ee01b3bae3b19.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#safetensors@0.4.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/safetensors-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"safetensors","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/safetensors-0.4.5/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsafetensors-bc9e2f95d8fbce06.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#console@0.15.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/console-0.15.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"console","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/console-0.15.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["ansi-parsing","unicode-width"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libconsole-b2c659fa3209fd68.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tokio-stream@0.1.17","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-stream-0.1.17/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tokio_stream","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-stream-0.1.17/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","net","time"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtokio_stream-6408cf98f0f17200.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap_derive@4.5.24","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap_derive-4.5.24/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"clap_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap_derive-4.5.24/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libclap_derive-8a3c5c75fcfd2058.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enumflags2_derive@0.7.12","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/enumflags2_derive-0.7.12/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"enumflags2_derive","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/enumflags2_derive-0.7.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libenumflags2_derive-1b48e8d20126b8d4.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-0.45.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-0.45.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["csv","default","docs","dtype-date","dtype-datetime","dtype-duration","dtype-slim","fmt","polars-io","polars-ops","polars-time","temporal","zip_with"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/polars-08614713f922e075/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#encoding_rs@0.8.35","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/encoding_rs-0.8.35/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"encoding_rs","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/encoding_rs-0.8.35/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libencoding_rs-7e43230d9e6ef8f2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ipnet@2.11.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ipnet-2.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ipnet","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ipnet-2.11.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libipnet-db7ada66bb16c44d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-conv-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"num_conv","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-conv-0.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnum_conv-39b00b21dd48edba.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rlimit@0.10.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rlimit-0.10.2/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rlimit-0.10.2/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/rlimit-dfbb8f0856bfc86d/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#linked-hash-map@0.5.6","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linked-hash-map-0.5.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"linked_hash_map","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linked-hash-map-0.5.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblinked_hash_map-a01683623f6b6fe3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#base64@0.13.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.13.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"base64","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/base64-0.13.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbase64-c4b56a1ab430ec55.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-parquet-format@0.1.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-parquet-format-0.1.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_parquet_format","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-parquet-format-0.1.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_parquet_format-e87cea0d4c09e1fc.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#minimal-lexical@0.2.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/minimal-lexical-0.2.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"minimal_lexical","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/minimal-lexical-0.2.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libminimal_lexical-1cbaa57b515c12d1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/time-core-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/time-core-0.1.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtime_core-ab880c14b9f62dd4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#home@0.5.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/home-0.5.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"home","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/home-0.5.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhome-0ef2e5b9d8932391.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sync_wrapper@0.1.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-0.1.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sync_wrapper","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sync_wrapper-0.1.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsync_wrapper-8d77b3996d90d66f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#number_prefix@0.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/number_prefix-0.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"number_prefix","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/number_prefix-0.4.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnumber_prefix-ef74d66e5aa673bb.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars@0.45.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/polars-703295d0af427230/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-parquet@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-parquet-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_parquet","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-parquet-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_parquet-1caed00dd2f63ea6.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#indicatif@0.17.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indicatif-0.17.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"indicatif","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indicatif-0.17.11/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode-width"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libindicatif-6d3edba2f5c70690.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nom@7.1.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nom","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnom-af1d436075cef92f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#time@0.3.37","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/time-0.3.37/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"time","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/time-0.3.37/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","formatting","parsing","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtime-cee46d34f91e4028.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ron@0.7.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ron-0.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ron","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ron-0.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libron-668fd6b9db9dead3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars-io@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-io-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars_io","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-io-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["atoi_simd","chrono","csv","dtype-date","dtype-datetime","dtype-time","fast-float2","itoa","polars-time","ryu","simdutf8","temporal"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars_io-1bc776b5e6fb9e3c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#reqwest@0.11.27","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"reqwest","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/reqwest-0.11.27/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["__tls","default","default-tls","hyper-tls","json","native-tls-crate","serde_json","stream","tokio-native-tls","tokio-util","wasm-streams"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libreqwest-4efc1967b567d48b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#yaml-rust@0.4.5","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/yaml-rust-0.4.5/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"yaml_rust","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/yaml-rust-0.4.5/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libyaml_rust-f48a9f8b9f79c95d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#clap@4.5.26","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap-4.5.26/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"clap","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/clap-4.5.26/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["color","default","derive","env","error-context","help","std","suggestions","usage","wrap_help"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libclap-e71f19037868e00a.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rlimit@0.10.2","linked_libs":[],"linked_paths":[],"cfgs":["rlimit__has_prlimit64"],"env":[],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/rlimit-99c8ed6b744fb352/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#enumflags2@0.7.12","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/enumflags2-0.7.12/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"enumflags2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/enumflags2-0.7.12/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libenumflags2-3d125913f2a27313.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#candle-core@0.6.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/candle-core-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"candle_core","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/candle-core-0.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcandle_core-5a845a8c6c0fe93b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tonic@0.12.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tonic","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["channel","codegen","default","prost","router","server","tls","tls-webpki-roots","transport"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtonic-05566df117a7eb3c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#async-compression@0.4.18","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-compression-0.4.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"async_compression","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-compression-0.4.18/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["bzip2","flate2","futures-io","gzip","libzstd","tokio","xz","xz2","zstd","zstd-safe"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libasync_compression-77099c89cd28d11e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#llama-cpp-sys-2@0.1.116","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/llama-cpp-sys-2-0.1.116/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"llama_cpp_sys_2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/llama-cpp-sys-2-0.1.116/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["openmp","shared-stdcxx"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libllama_cpp_sys_2-23cac5d00cd2d592.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#json5@0.4.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/json5-0.4.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"json5","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/json5-0.4.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libjson5-c8de527b42ab8e63.rmeta"],"executable":null,"fresh":true}
   Compiling hyprstream v0.1.0-alpha-7 (/mnt/hyprstream/hyprstream)
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-functions-nested@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-nested-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_functions_nested","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-nested-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_functions_nested-11b9b5a6bbe0bf74.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#dirs@5.0.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dirs-5.0.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"dirs","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/dirs-5.0.1/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdirs-9d6e4b525b27cc6b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rust-ini@0.18.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-ini-0.18.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ini","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rust-ini-0.18.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libini-be058aaf2fdd5e89.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#prost-types@0.13.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"prost_types","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.4/src/lib.rs","edition":"2021","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libprost_types-a6a0019b56c8bb97.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-physical-optimizer@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-optimizer-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_physical_optimizer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-physical-optimizer-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_physical_optimizer-2831a210c451cb37.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-catalog@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-catalog-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_catalog","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-catalog-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_catalog-5ae0396085fcf156.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ureq@2.12.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ureq-2.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ureq","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ureq-2.12.1/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","gzip","json","native-tls","tls"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libureq-fa6f7db4d3aef132.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#link-cplusplus@1.0.10","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/link-cplusplus-1.0.10/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"link_cplusplus","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/link-cplusplus-1.0.10/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liblink_cplusplus-bbb3febe1330fd2a.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-optimizer@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-optimizer-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_optimizer","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-optimizer-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["regex_expressions"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_optimizer-c1dab350835dcbb5.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#anyhow@1.0.95","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.95/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"anyhow","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.95/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libanyhow-1ae09577cdff4a36.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-sql@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-sql-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_sql","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-sql-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode_expressions","unparser"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_sql-05a21ae0a2bb80ef.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion-functions-window@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-window-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion_functions_window","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-functions-window-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion_functions_window-5d16472922a8e00c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cxxbridge-macro@1.0.158","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxxbridge-macro-1.0.158/Cargo.toml","target":{"kind":["proc-macro"],"crate_types":["proc-macro"],"name":"cxxbridge_macro","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxxbridge-macro-1.0.158/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcxxbridge_macro-1064b0f256e50a53.so"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#toml@0.5.11","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.5.11/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"toml","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/toml-0.5.11/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtoml-fc41cc1553a1adde.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-channel@0.5.14","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-channel-0.5.14/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_channel","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-channel-0.5.14/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcrossbeam_channel-0b4863492e048780.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#pathdiff@0.2.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pathdiff-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"pathdiff","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pathdiff-0.2.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpathdiff-cb75901b5e128257.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cxx@1.0.158","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cxx","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcxx-f26f50b33702df3b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#datafusion@42.2.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-42.2.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"datafusion","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/datafusion-42.2.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["async-compression","bzip2","compression","crypto_expressions","datafusion-functions-nested","datetime_expressions","default","encoding_expressions","flate2","nested_expressions","parquet","regex_expressions","string_expressions","tokio-util","unicode_expressions","xz2","zstd"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdatafusion-cd1c647d3be64131.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#arrow-flight@53.4.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"arrow_flight","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["anyhow","arrow-arith","arrow-data","arrow-ord","arrow-row","arrow-select","arrow-string","clap","cli","default","flight-sql-experimental","once_cell","tls","tracing-log","tracing-subscriber"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libarrow_flight-cb63350daf7e42ff.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#hf-hub@0.3.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hf-hub-0.3.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hf_hub","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hf-hub-0.3.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","online","tokio"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libhf_hub-e5a5b96c19d9a671.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#candle-nn@0.6.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/candle-nn-0.6.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"candle_nn","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/candle-nn-0.6.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libcandle_nn-02dc2cb5db66ad1b.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#tracing-appender@0.2.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-appender-0.2.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"tracing_appender","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-appender-0.2.3/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libtracing_appender-67600515f0a3ff64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#config@0.13.4","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/config-0.13.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"config","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/config-0.13.4/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","ini","json","json5","json5_rs","ron","rust-ini","serde_json","toml","yaml","yaml-rust"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libconfig-18083e7fb6cdf900.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rlimit@0.10.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rlimit-0.10.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rlimit","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rlimit-0.10.2/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/librlimit-58b94787add33b01.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#llama-cpp-2@0.1.116","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/llama-cpp-2-0.1.116/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"llama_cpp_2","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/llama-cpp-2-0.1.116/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["android-shared-stdcxx","default","openmp"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libllama_cpp_2-d8918857951b937f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#polars@0.45.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-0.45.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"polars","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/polars-0.45.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["csv","default","docs","dtype-date","dtype-datetime","dtype-duration","dtype-slim","fmt","polars-io","polars-ops","polars-time","temporal","zip_with"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libpolars-e70f28f492c7a2aa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#users@0.11.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/users-0.11.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"users","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/users-0.11.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cache","default","log","logging","mock"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libusers-1fe9a65e2f3fd57c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#sqlparser@0.39.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlparser-0.39.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"sqlparser","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlparser-0.39.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libsqlparser-b3221383cb6d2551.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#nix@0.27.1","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.27.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"nix","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nix-0.27.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libnix-6a01ae739dadd92f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bincode@1.3.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bincode-1.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bincode","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bincode-1.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libbincode-d0f6022b7200c9de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#daemonize@0.5.0","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/daemonize-0.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"daemonize","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/daemonize-0.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libdaemonize-8808cd70aa783f9c.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#urlencoding@2.1.3","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/urlencoding-2.1.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"urlencoding","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/urlencoding-2.1.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/liburlencoding-3bb5a617c5b474e3.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#xdg@2.5.2","manifest_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xdg-2.5.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"xdg","src_path":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xdg-2.5.2/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/mnt/hyprstream/hyprstream/target/debug/deps/libxdg-ce8f30346422959e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/mnt/hyprstream/hyprstream/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["cuda","default","vdb"],"filenames":["/mnt/hyprstream/hyprstream/target/debug/build/hyprstream-a8634151a9ced34f/build-script-build"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","linked_libs":["openvdb","tbb","Imath","blosc","static=openvdb_bridge"],"linked_paths":["native=/usr/local/cuda/lib64","native=/usr/local/cuda/lib","native=/usr/local/lib","native=/usr/lib/x86_64-linux-gnu","native=/usr/lib64","native=/mnt/hyprstream/hyprstream/target/debug/deps","native=/mnt/hyprstream/hyprstream/target/debug","native=/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib","native=/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib","native=/usr/lib/x86_64-linux-gnu","native=/mnt/hyprstream/hyprstream/target/debug/build/hyprstream-c0cf08643ca1bba8/out"],"cfgs":["feature=\"vdb\""],"env":[["LLAMA_CUDA","1"]],"out_dir":"/mnt/hyprstream/hyprstream/target/debug/build/hyprstream-c0cf08643ca1bba8/out"}
warning: hyprstream@0.1.0-alpha-7: Found CUDA at /usr/local/cuda, enabling GPU acceleration
warning: hyprstream@0.1.0-alpha-7: Building CPU-only version (CUDA integration in progress)
warning: hyprstream@0.1.0-alpha-7: pkg-config failed, trying system OpenVDB installation...
warning: hyprstream@0.1.0-alpha-7: Found system OpenVDB installation
warning: hyprstream@0.1.0-alpha-7: ✅ Built with OpenVDB support - VDB features enabled
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `ModelInfo` in module `crate::api::model_registry`\n  --> src/api/huggingface.rs:52:116\n   |\n52 |     pub async fn search_models(&self, query: &str, limit: Option<usize>) -> Result<Vec<crate::api::model_registry::ModelInfo>> {\n   |                                                                                                                    ^^^^^^^^^ not found in `crate::api::model_registry`\n   |\nhelp: consider importing one of these structs\n   |\n3  + use crate::ModelInfo;\n   |\n3  + use crate::api::model_management::ModelInfo;\n   |\nhelp: if you import `ModelInfo`, refer to it directly\n   |\n52 -     pub async fn search_models(&self, query: &str, limit: Option<usize>) -> Result<Vec<crate::api::model_registry::ModelInfo>> {\n52 +     pub async fn search_models(&self, query: &str, limit: Option<usize>) -> Result<Vec<ModelInfo>> {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]},{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::api::model_management::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ModelInfo`, refer to it directly","rendered":null,"spans":[{"byte_end":1878,"byte_start":1850,"column_end":116,"column_start":88,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":52,"line_start":52,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":116,"highlight_start":88,"text":"    pub async fn search_models(&self, query: &str, limit: Option<usize>) -> Result<Vec<crate::api::model_registry::ModelInfo>> {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `ModelInfo` in module `crate::api::model_registry`","spans":[{"byte_end":1887,"byte_start":1878,"column_end":125,"column_start":116,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":"not found in `crate::api::model_registry`","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":125,"highlight_start":116,"text":"    pub async fn search_models(&self, query: &str, limit: Option<usize>) -> Result<Vec<crate::api::model_registry::ModelInfo>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0422]: cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`\n  --> src/api/huggingface.rs:63:45\n   |\n63 |                 crate::api::model_registry::ModelInfo {\n   |                                             ^^^^^^^^^ not found in `crate::api::model_registry`\n   |\nhelp: consider importing one of these structs\n   |\n3  + use crate::ModelInfo;\n   |\n3  + use crate::api::model_management::ModelInfo;\n   |\nhelp: if you import `ModelInfo`, refer to it directly\n   |\n63 -                 crate::api::model_registry::ModelInfo {\n63 +                 ModelInfo {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]},{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::api::model_management::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ModelInfo`, refer to it directly","rendered":null,"spans":[{"byte_end":2430,"byte_start":2402,"column_end":45,"column_start":17,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":63,"line_start":63,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":45,"highlight_start":17,"text":"                crate::api::model_registry::ModelInfo {"}]}]}],"code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","message":"cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`","spans":[{"byte_end":2439,"byte_start":2430,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":"not found in `crate::api::model_registry`","line_end":63,"line_start":63,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"                crate::api::model_registry::ModelInfo {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0422]: cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`\n  --> src/api/huggingface.rs:73:45\n   |\n73 |                 crate::api::model_registry::ModelInfo {\n   |                                             ^^^^^^^^^ not found in `crate::api::model_registry`\n   |\nhelp: consider importing one of these structs\n   |\n3  + use crate::ModelInfo;\n   |\n3  + use crate::api::model_management::ModelInfo;\n   |\nhelp: if you import `ModelInfo`, refer to it directly\n   |\n73 -                 crate::api::model_registry::ModelInfo {\n73 +                 ModelInfo {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]},{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::api::model_management::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ModelInfo`, refer to it directly","rendered":null,"spans":[{"byte_end":2989,"byte_start":2961,"column_end":45,"column_start":17,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":73,"line_start":73,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":45,"highlight_start":17,"text":"                crate::api::model_registry::ModelInfo {"}]}]}],"code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","message":"cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`","spans":[{"byte_end":2998,"byte_start":2989,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":"not found in `crate::api::model_registry`","line_end":73,"line_start":73,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"                crate::api::model_registry::ModelInfo {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0422]: cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`\n  --> src/api/huggingface.rs:83:45\n   |\n83 |                 crate::api::model_registry::ModelInfo {\n   |                                             ^^^^^^^^^ not found in `crate::api::model_registry`\n   |\nhelp: consider importing one of these structs\n   |\n3  + use crate::ModelInfo;\n   |\n3  + use crate::api::model_management::ModelInfo;\n   |\nhelp: if you import `ModelInfo`, refer to it directly\n   |\n83 -                 crate::api::model_registry::ModelInfo {\n83 +                 ModelInfo {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]},{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::api::model_management::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ModelInfo`, refer to it directly","rendered":null,"spans":[{"byte_end":3490,"byte_start":3462,"column_end":45,"column_start":17,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":45,"highlight_start":17,"text":"                crate::api::model_registry::ModelInfo {"}]}]}],"code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","message":"cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`","spans":[{"byte_end":3499,"byte_start":3490,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":"not found in `crate::api::model_registry`","line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"                crate::api::model_registry::ModelInfo {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `ModelInfo` in module `crate::api::model_registry`\n  --> src/api/huggingface.rs:99:101\n   |\n99 |     pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {\n   |                                                                                                     ^^^^^^^^^ not found in `crate::api::model_registry`\n   |\nhelp: consider importing one of these structs\n   |\n3  + use crate::ModelInfo;\n   |\n3  + use crate::api::model_management::ModelInfo;\n   |\nhelp: if you import `ModelInfo`, refer to it directly\n   |\n99 -     pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {\n99 +     pub async fn get_model_info(&self, org: &str, name: &str) -> Result<ModelInfo> {\n   |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]},{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::api::model_management::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ModelInfo`, refer to it directly","rendered":null,"spans":[{"byte_end":4203,"byte_start":4175,"column_end":101,"column_start":73,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":99,"line_start":99,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":101,"highlight_start":73,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `ModelInfo` in module `crate::api::model_registry`","spans":[{"byte_end":4212,"byte_start":4203,"column_end":110,"column_start":101,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":"not found in `crate::api::model_registry`","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":110,"highlight_start":101,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0422]: cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`\n   --> src/api/huggingface.rs:110:40\n    |\n110 |         Ok(crate::api::model_registry::ModelInfo {\n    |                                        ^^^^^^^^^ not found in `crate::api::model_registry`\n    |\nhelp: consider importing one of these structs\n    |\n3   + use crate::ModelInfo;\n    |\n3   + use crate::api::model_management::ModelInfo;\n    |\nhelp: if you import `ModelInfo`, refer to it directly\n    |\n110 -         Ok(crate::api::model_registry::ModelInfo {\n110 +         Ok(ModelInfo {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]},{"byte_end":55,"byte_start":55,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"use crate::api::model_management::ModelInfo;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_management::ModelUri;"}]}]},{"children":[],"code":null,"level":"help","message":"if you import `ModelInfo`, refer to it directly","rendered":null,"spans":[{"byte_end":4665,"byte_start":4637,"column_end":40,"column_start":12,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":110,"line_start":110,"suggested_replacement":"","suggestion_applicability":"Unspecified","text":[{"highlight_end":40,"highlight_start":12,"text":"        Ok(crate::api::model_registry::ModelInfo {"}]}]}],"code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","message":"cannot find struct, variant or union type `ModelInfo` in module `crate::api::model_registry`","spans":[{"byte_end":4674,"byte_start":4665,"column_end":49,"column_start":40,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":"not found in `crate::api::model_registry`","line_end":110,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":40,"text":"        Ok(crate::api::model_registry::ModelInfo {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Path`\n --> src/api/model_management.rs:6:15\n  |\n6 |     extract::{Path, State, Json, Query},\n  |               ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":136,"byte_start":130,"column_end":21,"column_start":15,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":15,"text":"    extract::{Path, State, Json, Query},"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Path`","spans":[{"byte_end":134,"byte_start":130,"column_end":19,"column_start":15,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":15,"text":"    extract::{Path, State, Json, Query},"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::api::huggingface::HuggingFaceClient`\n  --> src/api/model_management.rs:18:5\n   |\n18 | use crate::api::huggingface::HuggingFaceClient;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":457,"byte_start":409,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":null,"line_end":19,"line_start":18,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":1,"text":"use crate::api::huggingface::HuggingFaceClient;"},{"highlight_end":1,"highlight_start":1,"text":"use crate::api::model_registry::{ModelRegistry, ModelRegistryType};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::api::huggingface::HuggingFaceClient`","spans":[{"byte_end":455,"byte_start":413,"column_end":47,"column_start":5,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":5,"text":"use crate::api::huggingface::HuggingFaceClient;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: elided lifetime has a name\n   --> src/api/model_storage.rs:234:151\n    |\n234 | ...ursive<'a>(&'a self, model_path: &'a Path) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<u64>> + Send + '_>> {\n    |           -- lifetime `'a` declared here                                                                                  ^^ this elided lifetime gets resolved as `'a`\n    |\n    = note: `#[warn(elided_named_lifetimes)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(elided_named_lifetimes)]` on by default","rendered":null,"spans":[]}],"code":{"code":"elided_named_lifetimes","explanation":null},"level":"warning","message":"elided lifetime has a name","spans":[{"byte_end":7871,"byte_start":7869,"column_end":153,"column_start":151,"expansion":null,"file_name":"src/api/model_storage.rs","is_primary":true,"label":"this elided lifetime gets resolved as `'a`","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":153,"highlight_start":151,"text":"    fn calculate_model_size_recursive<'a>(&'a self, model_path: &'a Path) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<u64>> + Send + '_>> {"}]},{"byte_end":7759,"byte_start":7757,"column_end":41,"column_start":39,"expansion":null,"file_name":"src/api/model_storage.rs","is_primary":false,"label":"lifetime `'a` declared here","line_end":234,"line_start":234,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":39,"text":"    fn calculate_model_size_recursive<'a>(&'a self, model_path: &'a Path) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<u64>> + Send + '_>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `RegistryError`\n --> src/api/huggingface.rs:6:36\n  |\n6 |     ModelFileInfo, RegistryConfig, RegistryError\n  |                                    ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":250,"byte_start":235,"column_end":49,"column_start":34,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":49,"highlight_start":34,"text":"    ModelFileInfo, RegistryConfig, RegistryError"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `RegistryError`","spans":[{"byte_end":250,"byte_start":237,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":36,"text":"    ModelFileInfo, RegistryConfig, RegistryError"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `Serialize`\n  --> src/api/huggingface.rs:13:26\n   |\n13 | use serde::{Deserialize, Serialize};\n   |                          ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":417,"byte_start":406,"column_end":35,"column_start":24,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":35,"highlight_start":24,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":395,"byte_start":394,"column_end":13,"column_start":12,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":13,"highlight_start":12,"text":"use serde::{Deserialize, Serialize};"}]},{"byte_end":418,"byte_start":417,"column_end":36,"column_start":35,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":36,"highlight_start":35,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `Serialize`","spans":[{"byte_end":417,"byte_start":408,"column_end":35,"column_start":26,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":26,"text":"use serde::{Deserialize, Serialize};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `LoRAEndpoint`\n --> src/api/inference_service.rs:3:28\n  |\n3 | use crate::api::{ApiState, LoRAEndpoint};\n  |                            ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":95,"byte_start":81,"column_end":40,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":40,"highlight_start":26,"text":"use crate::api::{ApiState, LoRAEndpoint};"}]},{"byte_end":73,"byte_start":72,"column_end":18,"column_start":17,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":17,"text":"use crate::api::{ApiState, LoRAEndpoint};"}]},{"byte_end":96,"byte_start":95,"column_end":41,"column_start":40,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":41,"highlight_start":40,"text":"use crate::api::{ApiState, LoRAEndpoint};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `LoRAEndpoint`","spans":[{"byte_end":95,"byte_start":83,"column_end":40,"column_start":28,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":28,"text":"use crate::api::{ApiState, LoRAEndpoint};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `OpenAIRequest`, `OpenAIResponse`, and `OpenAIStreamResponse`\n  --> src/api/mod.rs:26:21\n   |\n26 | use openai_compat::{OpenAIRequest, OpenAIResponse, OpenAIStreamResponse};\n   |                     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":673,"byte_start":599,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":27,"line_start":26,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":74,"highlight_start":1,"text":"use openai_compat::{OpenAIRequest, OpenAIResponse, OpenAIStreamResponse};"},{"highlight_end":1,"highlight_start":1,"text":"use training_service::{TrainingService, TrainingConfig};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `OpenAIRequest`, `OpenAIResponse`, and `OpenAIStreamResponse`","spans":[{"byte_end":632,"byte_start":619,"column_end":34,"column_start":21,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":21,"text":"use openai_compat::{OpenAIRequest, OpenAIResponse, OpenAIStreamResponse};"}]},{"byte_end":648,"byte_start":634,"column_end":50,"column_start":36,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":36,"text":"use openai_compat::{OpenAIRequest, OpenAIResponse, OpenAIStreamResponse};"}]},{"byte_end":670,"byte_start":650,"column_end":72,"column_start":52,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":52,"text":"use openai_compat::{OpenAIRequest, OpenAIResponse, OpenAIStreamResponse};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `crate::storage::vdb::sparse_storage::SparseStorage`\n --> src/inference/mod.rs:6:5\n  |\n6 | use crate::storage::vdb::sparse_storage::SparseStorage;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":261,"byte_start":205,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":7,"line_start":6,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":56,"highlight_start":1,"text":"use crate::storage::vdb::sparse_storage::SparseStorage;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::storage::vdb::sparse_storage::SparseStorage`","spans":[{"byte_end":259,"byte_start":209,"column_end":55,"column_start":5,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":5,"text":"use crate::storage::vdb::sparse_storage::SparseStorage;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `Float32Array`, `Int64Array`, `RecordBatch`, and `StringArray`\n  --> src/inference/mod.rs:12:19\n   |\n12 | use arrow_array::{Float32Array, RecordBatch, StringArray, Int64Array};\n   |                   ^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":430,"byte_start":359,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":13,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":71,"highlight_start":1,"text":"use arrow_array::{Float32Array, RecordBatch, StringArray, Int64Array};"},{"highlight_end":1,"highlight_start":1,"text":"use arrow_schema::{DataType, Field, Schema};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Float32Array`, `Int64Array`, `RecordBatch`, and `StringArray`","spans":[{"byte_end":389,"byte_start":377,"column_end":31,"column_start":19,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":19,"text":"use arrow_array::{Float32Array, RecordBatch, StringArray, Int64Array};"}]},{"byte_end":402,"byte_start":391,"column_end":44,"column_start":33,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":33,"text":"use arrow_array::{Float32Array, RecordBatch, StringArray, Int64Array};"}]},{"byte_end":415,"byte_start":404,"column_end":57,"column_start":46,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":46,"text":"use arrow_array::{Float32Array, RecordBatch, StringArray, Int64Array};"}]},{"byte_end":427,"byte_start":417,"column_end":69,"column_start":59,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":59,"text":"use arrow_array::{Float32Array, RecordBatch, StringArray, Int64Array};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused imports: `DataType`, `Field`, and `Schema`\n  --> src/inference/mod.rs:13:20\n   |\n13 | use arrow_schema::{DataType, Field, Schema};\n   |                    ^^^^^^^^  ^^^^^  ^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":475,"byte_start":430,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":14,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":1,"text":"use arrow_schema::{DataType, Field, Schema};"},{"highlight_end":1,"highlight_start":1,"text":"use serde::{Deserialize, Serialize};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `DataType`, `Field`, and `Schema`","spans":[{"byte_end":457,"byte_start":449,"column_end":28,"column_start":20,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":20,"text":"use arrow_schema::{DataType, Field, Schema};"}]},{"byte_end":464,"byte_start":459,"column_end":35,"column_start":30,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":30,"text":"use arrow_schema::{DataType, Field, Schema};"}]},{"byte_end":472,"byte_start":466,"column_end":43,"column_start":37,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":37,"text":"use arrow_schema::{DataType, Field, Schema};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `BaseModelHandle`\n --> src/inference/inference_engine.rs:4:51\n  |\n4 | use crate::inference::model_loader::{ModelLoader, BaseModelHandle};\n  |                                                   ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":224,"byte_start":207,"column_end":66,"column_start":49,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":66,"highlight_start":49,"text":"use crate::inference::model_loader::{ModelLoader, BaseModelHandle};"}]},{"byte_end":196,"byte_start":195,"column_end":38,"column_start":37,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":37,"text":"use crate::inference::model_loader::{ModelLoader, BaseModelHandle};"}]},{"byte_end":225,"byte_start":224,"column_end":67,"column_start":66,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":67,"highlight_start":66,"text":"use crate::inference::model_loader::{ModelLoader, BaseModelHandle};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `BaseModelHandle`","spans":[{"byte_end":224,"byte_start":209,"column_end":66,"column_start":51,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":51,"text":"use crate::inference::model_loader::{ModelLoader, BaseModelHandle};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::sync::Arc`\n  --> src/inference/inference_engine.rs:10:5\n   |\n10 | use std::sync::Arc;\n   |     ^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":405,"byte_start":385,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":11,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":1,"text":"use std::sync::Arc;"},{"highlight_end":1,"highlight_start":1,"text":"use anyhow::Result;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::sync::Arc`","spans":[{"byte_end":403,"byte_start":389,"column_end":19,"column_start":5,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":5,"text":"use std::sync::Arc;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `InferenceOutput`\n --> src/inference/inference_service.rs:3:40\n  |\n3 | use crate::inference::{InferenceInput, InferenceOutput, InferenceAPI};\n  |                                        ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":130,"byte_start":113,"column_end":55,"column_start":38,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":55,"highlight_start":38,"text":"use crate::inference::{InferenceInput, InferenceOutput, InferenceAPI};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `InferenceOutput`","spans":[{"byte_end":130,"byte_start":115,"column_end":55,"column_start":40,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":40,"text":"use crate::inference::{InferenceInput, InferenceOutput, InferenceAPI};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: private item shadows public glob re-export\n  --> src/storage/vdb/mod.rs:7:17\n   |\n7  | use std::path::{Path, PathBuf};\n   |                 ^^^^\n   |\nnote: the name `Path` in the type namespace is supposed to be publicly re-exported here\n  --> src/storage/vdb/mod.rs:46:9\n   |\n46 | pub use neuralvdb_codec::*;\n   |         ^^^^^^^^^^^^^^^^^^\nnote: but the private item here shadows it\n  --> src/storage/vdb/mod.rs:7:17\n   |\n7  | use std::path::{Path, PathBuf};\n   |                 ^^^^\n   = note: `#[warn(hidden_glob_reexports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the name `Path` in the type namespace is supposed to be publicly re-exported here","rendered":null,"spans":[{"byte_end":1237,"byte_start":1219,"column_end":27,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":null,"line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":9,"text":"pub use neuralvdb_codec::*;"}]}]},{"children":[],"code":null,"level":"note","message":"but the private item here shadows it","rendered":null,"spans":[{"byte_end":255,"byte_start":251,"column_end":21,"column_start":17,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":17,"text":"use std::path::{Path, PathBuf};"}]}]},{"children":[],"code":null,"level":"note","message":"`#[warn(hidden_glob_reexports)]` on by default","rendered":null,"spans":[]}],"code":{"code":"hidden_glob_reexports","explanation":null},"level":"warning","message":"private item shadows public glob re-export","spans":[{"byte_end":255,"byte_start":251,"column_end":21,"column_start":17,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":17,"text":"use std::path::{Path, PathBuf};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `OpenVDBBatchOps`\n --> src/storage/vdb/hardware_accelerated.rs:5:25\n  |\n5 |     OpenVDBLoRAAdapter, OpenVDBBatchOps\n  |                         ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":160,"byte_start":143,"column_end":40,"column_start":23,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":40,"highlight_start":23,"text":"    OpenVDBLoRAAdapter, OpenVDBBatchOps"}]},{"byte_end":125,"byte_start":119,"column_end":5,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":45,"highlight_start":44,"text":"use crate::storage::vdb::openvdb_bindings::{"},{"highlight_end":5,"highlight_start":1,"text":"    OpenVDBLoRAAdapter, OpenVDBBatchOps"}]},{"byte_end":162,"byte_start":160,"column_end":2,"column_start":40,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":6,"line_start":5,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":40,"highlight_start":40,"text":"    OpenVDBLoRAAdapter, OpenVDBBatchOps"},{"highlight_end":2,"highlight_start":1,"text":"};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `OpenVDBBatchOps`","spans":[{"byte_end":160,"byte_start":145,"column_end":40,"column_start":25,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":25,"text":"    OpenVDBLoRAAdapter, OpenVDBBatchOps"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `std::fmt`\n --> src/storage/vdb/hardware_accelerated.rs:8:5\n  |\n8 | use std::fmt;\n  |     ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":179,"byte_start":165,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":9,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":1,"text":"use std::fmt;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::fmt`","spans":[{"byte_end":177,"byte_start":169,"column_end":13,"column_start":5,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"use std::fmt;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `SparseWeights`\n  --> src/storage/vdb/hardware_accelerated.rs:22:33\n   |\n22 | use crate::storage::vdb::grid::{SparseWeights, Coordinate3D};\n   |                                 ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the unused import","rendered":null,"spans":[{"byte_end":631,"byte_start":616,"column_end":48,"column_start":33,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":33,"text":"use crate::storage::vdb::grid::{SparseWeights, Coordinate3D};"}]},{"byte_end":616,"byte_start":615,"column_end":33,"column_start":32,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":32,"text":"use crate::storage::vdb::grid::{SparseWeights, Coordinate3D};"}]},{"byte_end":644,"byte_start":643,"column_end":61,"column_start":60,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":61,"highlight_start":60,"text":"use crate::storage::vdb::grid::{SparseWeights, Coordinate3D};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `SparseWeights`","spans":[{"byte_end":629,"byte_start":616,"column_end":46,"column_start":33,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":33,"text":"use crate::storage::vdb::grid::{SparseWeights, Coordinate3D};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: ambiguous glob re-exports\n  --> src/storage/vdb/mod.rs:30:9\n   |\n30 | pub use compression::*;\n   |         ^^^^^^^^^^^^^^ the name `CompressionStats` in the type namespace is first re-exported here\n...\n46 | pub use neuralvdb_codec::*;\n   |         ------------------ but the name `CompressionStats` in the type namespace is also re-exported here\n   |\n   = note: `#[warn(ambiguous_glob_reexports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(ambiguous_glob_reexports)]` on by default","rendered":null,"spans":[]}],"code":{"code":"ambiguous_glob_reexports","explanation":null},"level":"warning","message":"ambiguous glob re-exports","spans":[{"byte_end":820,"byte_start":806,"column_end":23,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":"the name `CompressionStats` in the type namespace is first re-exported here","line_end":30,"line_start":30,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":9,"text":"pub use compression::*;"}]},{"byte_end":1237,"byte_start":1219,"column_end":27,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":false,"label":"but the name `CompressionStats` in the type namespace is also re-exported here","line_end":46,"line_start":46,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":9,"text":"pub use neuralvdb_codec::*;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: ambiguous glob re-exports\n  --> src/storage/vdb/mod.rs:31:9\n   |\n31 | pub use adapter_store::*;\n   |         ^^^^^^^^^^^^^^^^ the name `AdapterInfo` in the type namespace is first re-exported here\n...\n44 | pub use hardware_accelerated::*;\n   |         ----------------------- but the name `AdapterInfo` in the type namespace is also re-exported here\n\n","$message_type":"diagnostic","children":[],"code":{"code":"ambiguous_glob_reexports","explanation":null},"level":"warning","message":"ambiguous glob re-exports","spans":[{"byte_end":846,"byte_start":830,"column_end":25,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":"the name `AdapterInfo` in the type namespace is first re-exported here","line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":9,"text":"pub use adapter_store::*;"}]},{"byte_end":1208,"byte_start":1185,"column_end":32,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":false,"label":"but the name `AdapterInfo` in the type namespace is also re-exported here","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"pub use hardware_accelerated::*;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/api/mod.rs:195:11\n    |\n195 |         { state.vdb_storage.store_adapter_neural_compressed(&lora_id, &adapter).await }\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Result<(), VDBError>`\n    |\n    = note: expected unit type `()`\n                    found enum `std::result::Result<(), VDBError>`\nhelp: use the `?` operator to extract the `std::result::Result<(), VDBError>` value, propagating a `Result::Err` value to the caller\n    |\n195 |         { state.vdb_storage.store_adapter_neural_compressed(&lora_id, &adapter).await? }\n    |                                                                                      +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected unit type `()`\n        found enum `std::result::Result<(), VDBError>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"use the `?` operator to extract the `std::result::Result<(), VDBError>` value, propagating a `Result::Err` value to the caller","rendered":null,"spans":[{"byte_end":6429,"byte_start":6429,"column_end":86,"column_start":86,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":86,"highlight_start":86,"text":"        { state.vdb_storage.store_adapter_neural_compressed(&lora_id, &adapter).await }"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6429,"byte_start":6354,"column_end":86,"column_start":11,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `await` expression","span":{"byte_end":6429,"byte_start":6354,"column_end":86,"column_start":11,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":11,"text":"        { state.vdb_storage.store_adapter_neural_compressed(&lora_id, &adapter).await }"}]}},"file_name":"src/api/mod.rs","is_primary":true,"label":"expected `()`, found `Result<(), VDBError>`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":11,"text":"        { state.vdb_storage.store_adapter_neural_compressed(&lora_id, &adapter).await }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/api/mod.rs:201:11\n    |\n201 |         { state.vdb_storage.store_adapter_accelerated(&lora_id, &adapter).await }\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Result<(), VDBError>`\n    |\n    = note: expected unit type `()`\n                    found enum `std::result::Result<(), VDBError>`\nhelp: use the `?` operator to extract the `std::result::Result<(), VDBError>` value, propagating a `Result::Err` value to the caller\n    |\n201 |         { state.vdb_storage.store_adapter_accelerated(&lora_id, &adapter).await? }\n    |                                                                                +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected unit type `()`\n        found enum `std::result::Result<(), VDBError>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"use the `?` operator to extract the `std::result::Result<(), VDBError>` value, propagating a `Result::Err` value to the caller","rendered":null,"spans":[{"byte_end":6674,"byte_start":6674,"column_end":80,"column_start":80,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":201,"line_start":201,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":80,"highlight_start":80,"text":"        { state.vdb_storage.store_adapter_accelerated(&lora_id, &adapter).await }"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":6674,"byte_start":6605,"column_end":80,"column_start":11,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `await` expression","span":{"byte_end":6674,"byte_start":6605,"column_end":80,"column_start":11,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":null,"line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":11,"text":"        { state.vdb_storage.store_adapter_accelerated(&lora_id, &adapter).await }"}]}},"file_name":"src/api/mod.rs","is_primary":true,"label":"expected `()`, found `Result<(), VDBError>`","line_end":201,"line_start":201,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":11,"text":"        { state.vdb_storage.store_adapter_accelerated(&lora_id, &adapter).await }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `adapter`\n   --> src/api/mod.rs:293:9\n    |\n293 |     let adapter = state.vdb_storage.load_adapter_neural_compressed(\n    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_adapter`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_variables)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":9743,"byte_start":9736,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":293,"line_start":293,"suggested_replacement":"_adapter","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":9,"text":"    let adapter = state.vdb_storage.load_adapter_neural_compressed("}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `adapter`","spans":[{"byte_end":9743,"byte_start":9736,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":293,"line_start":293,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"    let adapter = state.vdb_storage.load_adapter_neural_compressed("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `map_err` found for struct `HashMap` in the current scope\n   --> src/storage/vdb/hardware_accelerated.rs:673:18\n    |\n672 | /             openvdb_adapter.get_all_weights()\n673 | |                 .map_err(|e| VDBError::OperationFailed(e.to_string()))?\n    | |                 -^^^^^^^ method not found in `HashMap<Coordinate3D, f32>`\n    | |_________________|\n    |\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `map_err` found for struct `HashMap` in the current scope","spans":[{"byte_end":24877,"byte_start":24826,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"","line_end":673,"line_start":672,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":13,"text":"            openvdb_adapter.get_all_weights()"},{"highlight_end":18,"highlight_start":1,"text":"                .map_err(|e| VDBError::OperationFailed(e.to_string()))?"}]},{"byte_end":24884,"byte_start":24877,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"method not found in `HashMap<Coordinate3D, f32>`","line_end":673,"line_start":673,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"                .map_err(|e| VDBError::OperationFailed(e.to_string()))?"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `map_err` found for unit type `()` in the current scope\n   --> src/storage/vdb/hardware_accelerated.rs:679:14\n    |\n678 | /         adapter.load_sparse_weights(&weights).await\n679 | |             .map_err(|e| VDBError::OperationFailed(e.to_string()))?;\n    | |             -^^^^^^^ method not found in `()`\n    | |_____________|\n    |\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `map_err` found for unit type `()` in the current scope","spans":[{"byte_end":25114,"byte_start":25057,"column_end":14,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"","line_end":679,"line_start":678,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":9,"text":"        adapter.load_sparse_weights(&weights).await"},{"highlight_end":14,"highlight_start":1,"text":"            .map_err(|e| VDBError::OperationFailed(e.to_string()))?;"}]},{"byte_end":25121,"byte_start":25114,"column_end":21,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"method not found in `()`","line_end":679,"line_start":679,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":14,"text":"            .map_err(|e| VDBError::OperationFailed(e.to_string()))?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `model_loader`\n  --> src/inference/inference_engine.rs:91:9\n   |\n91 |         model_loader: &ModelLoader,\n   |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_model_loader`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":2525,"byte_start":2513,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":"_model_loader","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":9,"text":"        model_loader: &ModelLoader,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `model_loader`","spans":[{"byte_end":2525,"byte_start":2513,"column_end":21,"column_start":9,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":91,"line_start":91,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":9,"text":"        model_loader: &ModelLoader,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `adapter`\n   --> src/api/mod.rs:374:9\n    |\n374 |     let adapter = state.vdb_storage.load_adapter_neural_compressed(\n    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_adapter`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":12852,"byte_start":12845,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":374,"line_start":374,"suggested_replacement":"_adapter","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":9,"text":"    let adapter = state.vdb_storage.load_adapter_neural_compressed("}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `adapter`","spans":[{"byte_end":12852,"byte_start":12845,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":374,"line_start":374,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"    let adapter = state.vdb_storage.load_adapter_neural_compressed("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `adapter`\n   --> src/api/mod.rs:446:9\n    |\n446 |     let adapter = state.vdb_storage.load_adapter_neural_compressed(\n    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_adapter`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":15531,"byte_start":15524,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":446,"line_start":446,"suggested_replacement":"_adapter","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":16,"highlight_start":9,"text":"    let adapter = state.vdb_storage.load_adapter_neural_compressed("}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `adapter`","spans":[{"byte_end":15531,"byte_start":15524,"column_end":16,"column_start":9,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":446,"line_start":446,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":9,"text":"    let adapter = state.vdb_storage.load_adapter_neural_compressed("}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `input`\n   --> src/api/training_service.rs:379:9\n    |\n379 |         input: &str,\n    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":12304,"byte_start":12299,"column_end":14,"column_start":9,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":null,"line_end":379,"line_start":379,"suggested_replacement":"_input","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":14,"highlight_start":9,"text":"        input: &str,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `input`","spans":[{"byte_end":12304,"byte_start":12299,"column_end":14,"column_start":9,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":null,"line_end":379,"line_start":379,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":9,"text":"        input: &str,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/training_service.rs:162:35\n    |\n162 |           let handle = tokio::spawn(async move {\n    |  ______________________------------_^\n    | |                      |\n    | |                      required by a bound introduced by this call\n163 | |             let mut sample_batch = Vec::new();\n164 | |             \n165 | |             while let Some(sample) = rx.recv().await {\n...   |\n195 | |             }\n196 | |         });\n    | |_________^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/training_service.rs:162:35\n    |\n162 |         let handle = tokio::spawn(async move {\n    |                                   ^^^^^^^^^^\nnote: required by a bound in `tokio::spawn`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs:168:21\n    |\n166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\n    |            ----- required by a bound in this function\n167 |     where\n168 |         F: Future + Send + 'static,\n    |                     ^^^^ required by this bound in `spawn`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":4909,"byte_start":4899,"column_end":45,"column_start":35,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":null,"line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":35,"text":"        let handle = tokio::spawn(async move {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `tokio::spawn`","rendered":null,"spans":[{"byte_end":5229,"byte_start":5224,"column_end":17,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":false,"label":"required by a bound in this function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>"}]},{"byte_end":5303,"byte_start":5299,"column_end":25,"column_start":21,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":true,"label":"required by this bound in `spawn`","line_end":168,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":21,"text":"        F: Future + Send + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":6130,"byte_start":4899,"column_end":10,"column_start":35,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":196,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":35,"text":"        let handle = tokio::spawn(async move {"},{"highlight_end":47,"highlight_start":1,"text":"            let mut sample_batch = Vec::new();"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":55,"highlight_start":1,"text":"            while let Some(sample) = rx.recv().await {"},{"highlight_end":43,"highlight_start":1,"text":"                sample_batch.push(sample);"},{"highlight_end":17,"highlight_start":1,"text":"                "},{"highlight_end":53,"highlight_start":1,"text":"                // Train when we have enough samples"},{"highlight_end":61,"highlight_start":1,"text":"                if sample_batch.len() >= config.batch_size {"},{"highlight_end":55,"highlight_start":1,"text":"                    if let Err(e) = Self::train_batch("},{"highlight_end":62,"highlight_start":1,"text":"                        #[cfg(feature = \"vdb\")] &vdb_storage,"},{"highlight_end":40,"highlight_start":1,"text":"                        &lora_id_clone,"},{"highlight_end":39,"highlight_start":1,"text":"                        &sample_batch,"},{"highlight_end":33,"highlight_start":1,"text":"                        &config,"},{"highlight_end":35,"highlight_start":1,"text":"                        &sessions,"},{"highlight_end":32,"highlight_start":1,"text":"                        &stats,"},{"highlight_end":30,"highlight_start":1,"text":"                    ).await {"},{"highlight_end":82,"highlight_start":1,"text":"                        eprintln!(\"Training error for {}: {}\", lora_id_clone, e);"},{"highlight_end":22,"highlight_start":1,"text":"                    }"},{"highlight_end":21,"highlight_start":1,"text":"                    "},{"highlight_end":42,"highlight_start":1,"text":"                    sample_batch.clear();"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":41,"highlight_start":1,"text":"            // Process remaining samples"},{"highlight_end":42,"highlight_start":1,"text":"            if !sample_batch.is_empty() {"},{"highlight_end":43,"highlight_start":1,"text":"                let _ = Self::train_batch("},{"highlight_end":58,"highlight_start":1,"text":"                    #[cfg(feature = \"vdb\")] &vdb_storage,"},{"highlight_end":36,"highlight_start":1,"text":"                    &lora_id_clone,"},{"highlight_end":35,"highlight_start":1,"text":"                    &sample_batch,"},{"highlight_end":29,"highlight_start":1,"text":"                    &config,"},{"highlight_end":31,"highlight_start":1,"text":"                    &sessions,"},{"highlight_end":28,"highlight_start":1,"text":"                    &stats,"},{"highlight_end":25,"highlight_start":1,"text":"                ).await;"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        });"}]},{"byte_end":4898,"byte_start":4886,"column_end":34,"column_start":22,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":22,"text":"        let handle = tokio::spawn(async move {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/training_service.rs:162:35\n    |\n162 |           let handle = tokio::spawn(async move {\n    |  ______________________------------_^\n    | |                      |\n    | |                      required by a bound introduced by this call\n163 | |             let mut sample_batch = Vec::new();\n164 | |             \n165 | |             while let Some(sample) = rx.recv().await {\n...   |\n195 | |             }\n196 | |         });\n    | |_________^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/training_service.rs:162:35\n    |\n162 |         let handle = tokio::spawn(async move {\n    |                                   ^^^^^^^^^^\nnote: required by a bound in `tokio::spawn`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs:168:21\n    |\n166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\n    |            ----- required by a bound in this function\n167 |     where\n168 |         F: Future + Send + 'static,\n    |                     ^^^^ required by this bound in `spawn`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":4909,"byte_start":4899,"column_end":45,"column_start":35,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":null,"line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":35,"text":"        let handle = tokio::spawn(async move {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `tokio::spawn`","rendered":null,"spans":[{"byte_end":5229,"byte_start":5224,"column_end":17,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":false,"label":"required by a bound in this function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>"}]},{"byte_end":5303,"byte_start":5299,"column_end":25,"column_start":21,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":true,"label":"required by this bound in `spawn`","line_end":168,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":21,"text":"        F: Future + Send + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":6130,"byte_start":4899,"column_end":10,"column_start":35,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":196,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":35,"text":"        let handle = tokio::spawn(async move {"},{"highlight_end":47,"highlight_start":1,"text":"            let mut sample_batch = Vec::new();"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":55,"highlight_start":1,"text":"            while let Some(sample) = rx.recv().await {"},{"highlight_end":43,"highlight_start":1,"text":"                sample_batch.push(sample);"},{"highlight_end":17,"highlight_start":1,"text":"                "},{"highlight_end":53,"highlight_start":1,"text":"                // Train when we have enough samples"},{"highlight_end":61,"highlight_start":1,"text":"                if sample_batch.len() >= config.batch_size {"},{"highlight_end":55,"highlight_start":1,"text":"                    if let Err(e) = Self::train_batch("},{"highlight_end":62,"highlight_start":1,"text":"                        #[cfg(feature = \"vdb\")] &vdb_storage,"},{"highlight_end":40,"highlight_start":1,"text":"                        &lora_id_clone,"},{"highlight_end":39,"highlight_start":1,"text":"                        &sample_batch,"},{"highlight_end":33,"highlight_start":1,"text":"                        &config,"},{"highlight_end":35,"highlight_start":1,"text":"                        &sessions,"},{"highlight_end":32,"highlight_start":1,"text":"                        &stats,"},{"highlight_end":30,"highlight_start":1,"text":"                    ).await {"},{"highlight_end":82,"highlight_start":1,"text":"                        eprintln!(\"Training error for {}: {}\", lora_id_clone, e);"},{"highlight_end":22,"highlight_start":1,"text":"                    }"},{"highlight_end":21,"highlight_start":1,"text":"                    "},{"highlight_end":42,"highlight_start":1,"text":"                    sample_batch.clear();"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":41,"highlight_start":1,"text":"            // Process remaining samples"},{"highlight_end":42,"highlight_start":1,"text":"            if !sample_batch.is_empty() {"},{"highlight_end":43,"highlight_start":1,"text":"                let _ = Self::train_batch("},{"highlight_end":58,"highlight_start":1,"text":"                    #[cfg(feature = \"vdb\")] &vdb_storage,"},{"highlight_end":36,"highlight_start":1,"text":"                    &lora_id_clone,"},{"highlight_end":35,"highlight_start":1,"text":"                    &sample_batch,"},{"highlight_end":29,"highlight_start":1,"text":"                    &config,"},{"highlight_end":31,"highlight_start":1,"text":"                    &sessions,"},{"highlight_end":28,"highlight_start":1,"text":"                    &stats,"},{"highlight_end":25,"highlight_start":1,"text":"                ).await;"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        });"}]},{"byte_end":4898,"byte_start":4886,"column_end":34,"column_start":22,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":162,"line_start":162,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":22,"text":"        let handle = tokio::spawn(async move {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:205:24\n    |\n205 | impl FlightService for InferenceFlightService {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `FlightService`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:50\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                                                  ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `FlightService`","rendered":null,"spans":[{"byte_end":35394,"byte_start":35377,"column_end":67,"column_start":50,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":50,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":6807,"byte_start":6785,"column_end":46,"column_start":24,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":205,"line_start":205,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":24,"text":"impl FlightService for InferenceFlightService {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:205:24\n    |\n205 | impl FlightService for InferenceFlightService {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `FlightService`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:50\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                                                  ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `FlightService`","rendered":null,"spans":[{"byte_end":35394,"byte_start":35377,"column_end":67,"column_start":50,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":50,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":6807,"byte_start":6785,"column_end":46,"column_start":24,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":205,"line_start":205,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":24,"text":"impl FlightService for InferenceFlightService {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `endpoint`\n   --> src/api/inference_service.rs:119:13\n    |\n119 |         let endpoint = {\n    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_endpoint`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":3505,"byte_start":3497,"column_end":21,"column_start":13,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":119,"line_start":119,"suggested_replacement":"_endpoint","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":21,"highlight_start":13,"text":"        let endpoint = {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `endpoint`","spans":[{"byte_end":3505,"byte_start":3497,"column_end":21,"column_start":13,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":119,"line_start":119,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":13,"text":"        let endpoint = {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0382]: borrow of moved value: `gradients_vec`\n    --> src/api/training_service.rs:477:17\n     |\n441  |         let mut gradients_vec = Vec::with_capacity(grad_size);\n     |             ----------------- move occurs because `gradients_vec` has type `Vec<f32>`, which does not implement the `Copy` trait\n...\n475  |         gradients.insert(layer.to_string(), gradients_vec);\n     |                                             ------------- value moved here\n476  |         println!(\"🔄 Computed {} gradients for layer {}\", \n477  |                 gradients_vec.iter().filter(|&&x| x.abs() > 1e-6).count(), layer);\n     |                 ^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n     |\n     = note: borrow occurs due to deref coercion to `[f32]`\nnote: deref defined here\n    --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:3250:5\n     |\n3250 |     type Target = [T];\n     |     ^^^^^^^^^^^\nhelp: consider cloning the value if the performance cost is acceptable\n     |\n475  |         gradients.insert(layer.to_string(), gradients_vec.clone());\n     |                                                          ++++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"borrow occurs due to deref coercion to `[f32]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"deref defined here","rendered":null,"spans":[{"byte_end":120480,"byte_start":120469,"column_end":16,"column_start":5,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs","is_primary":true,"label":null,"line_end":3250,"line_start":3250,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"    type Target = [T];"}]}]},{"children":[],"code":null,"level":"help","message":"consider cloning the value if the performance cost is acceptable","rendered":null,"spans":[{"byte_end":15930,"byte_start":15930,"column_end":58,"column_start":58,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":null,"line_end":475,"line_start":475,"suggested_replacement":".clone()","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":58,"highlight_start":58,"text":"        gradients.insert(layer.to_string(), gradients_vec);"}]}]}],"code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","message":"borrow of moved value: `gradients_vec`","spans":[{"byte_end":15930,"byte_start":15917,"column_end":58,"column_start":45,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":false,"label":"value moved here","line_end":475,"line_start":475,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":45,"text":"        gradients.insert(layer.to_string(), gradients_vec);"}]},{"byte_end":16030,"byte_start":16010,"column_end":37,"column_start":17,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":true,"label":"value borrowed here after move","line_end":477,"line_start":477,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":17,"text":"                gradients_vec.iter().filter(|&&x| x.abs() > 1e-6).count(), layer);"}]},{"byte_end":14357,"byte_start":14340,"column_end":30,"column_start":13,"expansion":null,"file_name":"src/api/training_service.rs","is_primary":false,"label":"move occurs because `gradients_vec` has type `Vec<f32>`, which does not implement the `Copy` trait","line_end":441,"line_start":441,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":13,"text":"        let mut gradients_vec = Vec::with_capacity(grad_size);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `z_pattern`\n    --> src/storage/vdb/hardware_accelerated.rs:1036:9\n     |\n1036 |         z_pattern: &ZOrderPattern\n     |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_z_pattern`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":38905,"byte_start":38896,"column_end":18,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":1036,"line_start":1036,"suggested_replacement":"_z_pattern","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":9,"text":"        z_pattern: &ZOrderPattern"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `z_pattern`","spans":[{"byte_end":38905,"byte_start":38896,"column_end":18,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":1036,"line_start":1036,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":9,"text":"        z_pattern: &ZOrderPattern"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `author`\n   --> src/cli/commands/download.rs:140:9\n    |\n140 |     let author = parts[0];\n    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_author`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":5137,"byte_start":5131,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/cli/commands/download.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":"_author","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":15,"highlight_start":9,"text":"    let author = parts[0];"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `author`","spans":[{"byte_end":5137,"byte_start":5131,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/cli/commands/download.rs","is_primary":true,"label":null,"line_end":140,"line_start":140,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":9,"text":"    let author = parts[0];"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `fallback_patterns`\n   --> src/cli/commands/download.rs:376:17\n    |\n376 |             let fallback_patterns = vec![\n    |                 ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fallback_patterns`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":14153,"byte_start":14136,"column_end":34,"column_start":17,"expansion":null,"file_name":"src/cli/commands/download.rs","is_primary":true,"label":null,"line_end":376,"line_start":376,"suggested_replacement":"_fallback_patterns","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":34,"highlight_start":17,"text":"            let fallback_patterns = vec!["}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `fallback_patterns`","spans":[{"byte_end":14153,"byte_start":14136,"column_end":34,"column_start":17,"expansion":null,"file_name":"src/cli/commands/download.rs","is_primary":true,"label":null,"line_end":376,"line_start":376,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":17,"text":"            let fallback_patterns = vec!["}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:287:26\n    |\n287 |               tokio::spawn(async move {\n    |  _____________------------_^\n    | |             |\n    | |             required by a bound introduced by this call\n288 | |                 update_processor.process_streaming_updates().await;\n289 | |             });\n    | |_____________^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:287:26\n    |\n287 |             tokio::spawn(async move {\n    |                          ^^^^^^^^^^\nnote: required by a bound in `tokio::spawn`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs:168:21\n    |\n166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\n    |            ----- required by a bound in this function\n167 |     where\n168 |         F: Future + Send + 'static,\n    |                     ^^^^ required by this bound in `spawn`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":9405,"byte_start":9395,"column_end":36,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":26,"text":"            tokio::spawn(async move {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `tokio::spawn`","rendered":null,"spans":[{"byte_end":5229,"byte_start":5224,"column_end":17,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":false,"label":"required by a bound in this function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>"}]},{"byte_end":5303,"byte_start":5299,"column_end":25,"column_start":21,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":true,"label":"required by this bound in `spawn`","line_end":168,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":21,"text":"        F: Future + Send + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":9489,"byte_start":9395,"column_end":14,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":289,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"            tokio::spawn(async move {"},{"highlight_end":68,"highlight_start":1,"text":"                update_processor.process_streaming_updates().await;"},{"highlight_end":14,"highlight_start":1,"text":"            });"}]},{"byte_end":9394,"byte_start":9382,"column_end":25,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":13,"text":"            tokio::spawn(async move {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:287:26\n    |\n287 |               tokio::spawn(async move {\n    |  _____________------------_^\n    | |             |\n    | |             required by a bound introduced by this call\n288 | |                 update_processor.process_streaming_updates().await;\n289 | |             });\n    | |_____________^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:287:26\n    |\n287 |             tokio::spawn(async move {\n    |                          ^^^^^^^^^^\nnote: required by a bound in `tokio::spawn`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs:168:21\n    |\n166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\n    |            ----- required by a bound in this function\n167 |     where\n168 |         F: Future + Send + 'static,\n    |                     ^^^^ required by this bound in `spawn`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":9405,"byte_start":9395,"column_end":36,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":26,"text":"            tokio::spawn(async move {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `tokio::spawn`","rendered":null,"spans":[{"byte_end":5229,"byte_start":5224,"column_end":17,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":false,"label":"required by a bound in this function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>"}]},{"byte_end":5303,"byte_start":5299,"column_end":25,"column_start":21,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-1.43.0/src/task/spawn.rs","is_primary":true,"label":"required by this bound in `spawn`","line_end":168,"line_start":168,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":21,"text":"        F: Future + Send + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":9489,"byte_start":9395,"column_end":14,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":289,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":26,"text":"            tokio::spawn(async move {"},{"highlight_end":68,"highlight_start":1,"text":"                update_processor.process_streaming_updates().await;"},{"highlight_end":14,"highlight_start":1,"text":"            });"}]},{"byte_end":9394,"byte_start":9382,"column_end":25,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":287,"line_start":287,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":13,"text":"            tokio::spawn(async move {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: can't compare `std::string::String` with `&ModelUri`\n   --> src/cli/handlers.rs:469:106\n    |\n469 | ...dels.iter().find(|(uri, _)| uri.name == uri || uri.name.ends_with(&uri)) {\n    |                                         ^^ no implementation for `std::string::String == &ModelUri`\n    |\n    = help: the trait `PartialEq<&ModelUri>` is not implemented for `std::string::String`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n              `&std::string::String` implements `PartialEq<compact_str::CompactString>`\n              `std::string::String` implements `PartialEq<&compact_str::CompactString>`\n              `std::string::String` implements `PartialEq<&str>`\n              `std::string::String` implements `PartialEq<Authority>`\n              `std::string::String` implements `PartialEq<Cow<'_, str>>`\n              `std::string::String` implements `PartialEq<MetadataValue<VE>>`\n              `std::string::String` implements `PartialEq<PathAndQuery>`\n              `std::string::String` implements `PartialEq<axum::body::Bytes>`\n            and 14 others\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `PartialEq<&ModelUri>` is not implemented for `std::string::String`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `PartialEq<Rhs>`:\n  `&std::string::String` implements `PartialEq<compact_str::CompactString>`\n  `std::string::String` implements `PartialEq<&compact_str::CompactString>`\n  `std::string::String` implements `PartialEq<&str>`\n  `std::string::String` implements `PartialEq<Authority>`\n  `std::string::String` implements `PartialEq<Cow<'_, str>>`\n  `std::string::String` implements `PartialEq<MetadataValue<VE>>`\n  `std::string::String` implements `PartialEq<PathAndQuery>`\n  `std::string::String` implements `PartialEq<axum::body::Bytes>`\nand 14 others","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"can't compare `std::string::String` with `&ModelUri`","spans":[{"byte_end":19629,"byte_start":19627,"column_end":108,"column_start":106,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":true,"label":"no implementation for `std::string::String == &ModelUri`","line_end":469,"line_start":469,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":108,"highlight_start":106,"text":"                if let Some((model_uri, model_metadata)) = cached_models.iter().find(|(uri, _)| uri.name == uri || uri.name.ends_with(&uri)) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `&&ModelUri: Pattern` is not satisfied\n    --> src/cli/handlers.rs:469:135\n     |\n469  | ..._)| uri.name == uri || uri.name.ends_with(&uri)) {\n     |                                    --------- ^^^^ the trait `Fn(char)` is not implemented for `ModelUri`\n     |                                    |\n     |                                    required by a bound introduced by this call\n     |\n     = help: the following other types implement trait `Pattern`:\n               &'b [char; N]\n               &'b [char]\n               &'b std::string::String\n               &'b str\n               &'c &'b str\n               [char; N]\n               char\n     = note: required for `&ModelUri` to implement `FnOnce(char)`\n     = note: required for `&&ModelUri` to implement `Pattern`\nnote: required by a bound in `core::str::<impl str>::ends_with`\n    --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs:1214:25\n     |\n1214 |     pub fn ends_with<P: Pattern>(&self, pat: P) -> bool\n     |                         ^^^^^^^ required by this bound in `core::str::<impl str>::ends_with`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Pattern`:\n  &'b [char; N]\n  &'b [char]\n  &'b std::string::String\n  &'b str\n  &'c &'b str\n  [char; N]\n  char","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&ModelUri` to implement `FnOnce(char)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&&ModelUri` to implement `Pattern`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `core::str::<impl str>::ends_with`","rendered":null,"spans":[{"byte_end":42574,"byte_start":42567,"column_end":32,"column_start":25,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs","is_primary":true,"label":"required by this bound in `core::str::<impl str>::ends_with`","line_end":1214,"line_start":1214,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":25,"text":"    pub fn ends_with<P: Pattern>(&self, pat: P) -> bool"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `&&ModelUri: Pattern` is not satisfied","spans":[{"byte_end":19660,"byte_start":19656,"column_end":139,"column_start":135,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":true,"label":"the trait `Fn(char)` is not implemented for `ModelUri`","line_end":469,"line_start":469,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":139,"highlight_start":135,"text":"                if let Some((model_uri, model_metadata)) = cached_models.iter().find(|(uri, _)| uri.name == uri || uri.name.ends_with(&uri)) {"}]},{"byte_end":19655,"byte_start":19646,"column_end":134,"column_start":125,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":469,"line_start":469,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":134,"highlight_start":125,"text":"                if let Some((model_uri, model_metadata)) = cached_models.iter().find(|(uri, _)| uri.name == uri || uri.name.ends_with(&uri)) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this method takes 2 arguments but 1 argument was supplied\n   --> src/cli/handlers.rs:507:37\n    |\n507 |                     match hf_client.get_model_info(model_id).await {\n    |                                     ^^^^^^^^^^^^^^---------- argument #2 of type `&str` is missing\n    |\nnote: method defined here\n   --> src/api/huggingface.rs:99:18\n    |\n99  |     pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {\n    |                  ^^^^^^^^^^^^^^        ---------  ----------\nhelp: provide the argument\n    |\n507 |                     match hf_client.get_model_info(model_id, /* &str */).await {\n    |                                                   ~~~~~~~~~~~~~~~~~~~~~~\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4151,"byte_start":4142,"column_end":49,"column_start":40,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":false,"label":"","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":40,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]},{"byte_end":4163,"byte_start":4153,"column_end":61,"column_start":51,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":false,"label":"","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":51,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]},{"byte_end":4134,"byte_start":4120,"column_end":32,"column_start":18,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":18,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":21489,"byte_start":21479,"column_end":61,"column_start":51,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":true,"label":null,"line_end":507,"line_start":507,"suggested_replacement":"(model_id, /* &str */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":61,"highlight_start":51,"text":"                    match hf_client.get_model_info(model_id).await {"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this method takes 2 arguments but 1 argument was supplied","spans":[{"byte_end":21489,"byte_start":21479,"column_end":61,"column_start":51,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":false,"label":"argument #2 of type `&str` is missing","line_end":507,"line_start":507,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":51,"text":"                    match hf_client.get_model_info(model_id).await {"}]},{"byte_end":21479,"byte_start":21465,"column_end":51,"column_start":37,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":true,"label":null,"line_end":507,"line_start":507,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":37,"text":"                    match hf_client.get_model_info(model_id).await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `max_retries` and `user_agent` in initializer of `RegistryConfig`\n   --> src/cli/handlers.rs:582:26\n    |\n582 |             let config = crate::api::model_registry::RegistryConfig {\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `max_retries` and `user_agent`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `max_retries` and `user_agent` in initializer of `RegistryConfig`","spans":[{"byte_end":24274,"byte_start":24232,"column_end":68,"column_start":26,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":true,"label":"missing `max_retries` and `user_agent`","line_end":582,"line_start":582,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":26,"text":"            let config = crate::api::model_registry::RegistryConfig {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> src/cli/handlers.rs:774:33\n    |\n774 |             let lora_registry = crate::api::lora_registry::LoRARegistry::new()?;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `LoRARegistry`\n    |\n    = help: the trait `Try` is not implemented for `LoRARegistry`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Try` is not implemented for `LoRARegistry`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the `?` operator can only be applied to values that implement `Try`","spans":[{"byte_end":33376,"byte_start":33329,"column_end":80,"column_start":33,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":33376,"byte_start":33329,"column_end":80,"column_start":33,"expansion":null,"file_name":"src/cli/handlers.rs","is_primary":false,"label":null,"line_end":774,"line_start":774,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":33,"text":"            let lora_registry = crate::api::lora_registry::LoRARegistry::new()?;"}]}},"file_name":"src/cli/handlers.rs","is_primary":true,"label":"the `?` operator cannot be applied to type `LoRARegistry`","line_end":774,"line_start":774,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":33,"text":"            let lora_registry = crate::api::lora_registry::LoRARegistry::new()?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `words`\n   --> src/inference/inference_engine.rs:153:17\n    |\n153 |             let words: Vec<&str> = prompt.split_whitespace().collect();\n    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_words`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":5145,"byte_start":5140,"column_end":22,"column_start":17,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":153,"line_start":153,"suggested_replacement":"_words","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":22,"highlight_start":17,"text":"            let words: Vec<&str> = prompt.split_whitespace().collect();"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `words`","spans":[{"byte_end":5145,"byte_start":5140,"column_end":22,"column_start":17,"expansion":null,"file_name":"src/inference/inference_engine.rs","is_primary":true,"label":null,"line_end":153,"line_start":153,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"            let words: Vec<&str> = prompt.split_whitespace().collect();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:192:24\n    |\n192 | impl FlightService for InferenceFlightService {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `FlightService`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:50\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                                                  ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `FlightService`","rendered":null,"spans":[{"byte_end":35394,"byte_start":35377,"column_end":67,"column_start":50,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":50,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":6365,"byte_start":6343,"column_end":46,"column_start":24,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":192,"line_start":192,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":24,"text":"impl FlightService for InferenceFlightService {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:192:24\n    |\n192 | impl FlightService for InferenceFlightService {\n    |                        ^^^^^^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `FlightService`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:50\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                                                  ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `FlightService`","rendered":null,"spans":[{"byte_end":35394,"byte_start":35377,"column_end":67,"column_start":50,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":50,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":6365,"byte_start":6343,"column_end":46,"column_start":24,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":192,"line_start":192,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":24,"text":"impl FlightService for InferenceFlightService {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `poll_flight_info`\n   --> src/inference/inference_service.rs:192:1\n    |\n192 | impl FlightService for InferenceFlightService {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `poll_flight_info` in implementation\n    |\n    = help: implement the missing item: `fn poll_flight_info(&'life0 self, _: tonic::Request<FlightDescriptor>) -> Pin<Box<(dyn futures::Future<Output = std::result::Result<tonic::Response<PollInfo>, tonic::Status>> + std::marker::Send + 'async_trait)>> { todo!() }`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn poll_flight_info(&'life0 self, _: tonic::Request<FlightDescriptor>) -> Pin<Box<(dyn futures::Future<Output = std::result::Result<tonic::Response<PollInfo>, tonic::Status>> + std::marker::Send + 'async_trait)>> { todo!() }`","rendered":null,"spans":[{"byte_end":14963,"byte_start":14963,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":411,"line_start":411,"suggested_replacement":"fn poll_flight_info(&'life0 self, _: tonic::Request<FlightDescriptor>) -> Pin<Box<(dyn futures::Future<Output = std::result::Result<tonic::Response<PollInfo>, tonic::Status>> + std::marker::Send + 'async_trait)>> { todo!() }\n","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":1,"highlight_start":1,"text":"}"}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `poll_flight_info`","spans":[{"byte_end":6365,"byte_start":6320,"column_end":46,"column_start":1,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"missing `poll_flight_info` in implementation","line_end":192,"line_start":192,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":1,"text":"impl FlightService for InferenceFlightService {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/metrics/storage.rs:266:28\n    |\n266 | impl VDBMetricsStorage for VDBMetricsStorageImpl {\n    |                            ^^^^^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `VDBMetricsStorageImpl`\n   --> src/metrics/storage.rs:255:12\n    |\n255 | pub struct VDBMetricsStorageImpl {\n    |            ^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `VDBMetricsStorage`\n   --> src/metrics/storage.rs:121:37\n    |\n121 | pub trait VDBMetricsStorage: Send + Sync + 'static {\n    |                                     ^^^^ required by this bound in `VDBMetricsStorage`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `VDBMetricsStorageImpl`","rendered":null,"spans":[{"byte_end":8938,"byte_start":8917,"column_end":33,"column_start":12,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"pub struct VDBMetricsStorageImpl {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `VDBMetricsStorage`","rendered":null,"spans":[{"byte_end":3491,"byte_start":3487,"column_end":41,"column_start":37,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"required by this bound in `VDBMetricsStorage`","line_end":121,"line_start":121,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":37,"text":"pub trait VDBMetricsStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":9188,"byte_start":9167,"column_end":49,"column_start":28,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":266,"line_start":266,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":28,"text":"impl VDBMetricsStorage for VDBMetricsStorageImpl {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/metrics/storage.rs:266:28\n    |\n266 | impl VDBMetricsStorage for VDBMetricsStorageImpl {\n    |                            ^^^^^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `VDBMetricsStorageImpl`\n   --> src/metrics/storage.rs:255:12\n    |\n255 | pub struct VDBMetricsStorageImpl {\n    |            ^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `VDBMetricsStorage`\n   --> src/metrics/storage.rs:121:37\n    |\n121 | pub trait VDBMetricsStorage: Send + Sync + 'static {\n    |                                     ^^^^ required by this bound in `VDBMetricsStorage`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `VDBMetricsStorageImpl`","rendered":null,"spans":[{"byte_end":8938,"byte_start":8917,"column_end":33,"column_start":12,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":255,"line_start":255,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":12,"text":"pub struct VDBMetricsStorageImpl {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `VDBMetricsStorage`","rendered":null,"spans":[{"byte_end":3491,"byte_start":3487,"column_end":41,"column_start":37,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"required by this bound in `VDBMetricsStorage`","line_end":121,"line_start":121,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":37,"text":"pub trait VDBMetricsStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":9188,"byte_start":9167,"column_end":49,"column_start":28,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":266,"line_start":266,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":28,"text":"impl VDBMetricsStorage for VDBMetricsStorageImpl {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `batch_size`\n   --> src/models/qwen3.rs:186:13\n    |\n186 |         let batch_size = 1;\n    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_batch_size`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":5971,"byte_start":5961,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/models/qwen3.rs","is_primary":true,"label":null,"line_end":186,"line_start":186,"suggested_replacement":"_batch_size","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":23,"highlight_start":13,"text":"        let batch_size = 1;"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `batch_size`","spans":[{"byte_end":5971,"byte_start":5961,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/models/qwen3.rs","is_primary":true,"label":null,"line_end":186,"line_start":186,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"        let batch_size = 1;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/query/planner.rs:97:23\n    |\n97  | impl QueryPlanner for DataFusionPlanner {\n    |                       ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `DataFusionPlanner`\n   --> src/query/planner.rs:54:12\n    |\n54  | pub struct DataFusionPlanner {\n    |            ^^^^^^^^^^^^^^^^^\nnote: required by a bound in `query::planner::QueryPlanner`\n   --> src/query/planner.rs:39:32\n    |\n39  | pub trait QueryPlanner: Send + Sync {\n    |                                ^^^^ required by this bound in `QueryPlanner`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `DataFusionPlanner`","rendered":null,"spans":[{"byte_end":1866,"byte_start":1849,"column_end":29,"column_start":12,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":12,"text":"pub struct DataFusionPlanner {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `query::planner::QueryPlanner`","rendered":null,"spans":[{"byte_end":1249,"byte_start":1245,"column_end":36,"column_start":32,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"required by this bound in `QueryPlanner`","line_end":39,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":32,"text":"pub trait QueryPlanner: Send + Sync {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":3192,"byte_start":3175,"column_end":40,"column_start":23,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":23,"text":"impl QueryPlanner for DataFusionPlanner {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/query/planner.rs:97:23\n    |\n97  | impl QueryPlanner for DataFusionPlanner {\n    |                       ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `DataFusionPlanner`\n   --> src/query/planner.rs:54:12\n    |\n54  | pub struct DataFusionPlanner {\n    |            ^^^^^^^^^^^^^^^^^\nnote: required by a bound in `query::planner::QueryPlanner`\n   --> src/query/planner.rs:39:32\n    |\n39  | pub trait QueryPlanner: Send + Sync {\n    |                                ^^^^ required by this bound in `QueryPlanner`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `DataFusionPlanner`","rendered":null,"spans":[{"byte_end":1866,"byte_start":1849,"column_end":29,"column_start":12,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":12,"text":"pub struct DataFusionPlanner {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `query::planner::QueryPlanner`","rendered":null,"spans":[{"byte_end":1249,"byte_start":1245,"column_end":36,"column_start":32,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"required by this bound in `QueryPlanner`","line_end":39,"line_start":39,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":32,"text":"pub trait QueryPlanner: Send + Sync {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":3192,"byte_start":3175,"column_end":40,"column_start":23,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":97,"line_start":97,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":23,"text":"impl QueryPlanner for DataFusionPlanner {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/service/flight_metric.rs:21:14\n    |\n21  |             .get_storage_stats()\n    |              ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::get_storage_stats`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::get_storage_stats`\n...\n175 |     async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;\n    |              ----------------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::get_storage_stats`","rendered":null,"spans":[{"byte_end":5510,"byte_start":5493,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::get_storage_stats`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":599,"byte_start":582,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/service/flight_metric.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"            .get_storage_stats()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/service/flight_metric.rs:21:14\n    |\n21  |             .get_storage_stats()\n    |              ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::get_storage_stats`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::get_storage_stats`\n...\n175 |     async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;\n    |              ----------------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::get_storage_stats`","rendered":null,"spans":[{"byte_end":5510,"byte_start":5493,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::get_storage_stats`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":599,"byte_start":582,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/service/flight_metric.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"            .get_storage_stats()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `values`\n   --> src/storage/vdb/neuralvdb_codec.rs:556:9\n    |\n556 |         values: &ValueEncoding,\n    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_values`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":18549,"byte_start":18543,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":556,"line_start":556,"suggested_replacement":"_values","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":15,"highlight_start":9,"text":"        values: &ValueEncoding,"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `values`","spans":[{"byte_end":18549,"byte_start":18543,"column_end":15,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":556,"line_start":556,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":9,"text":"        values: &ValueEncoding,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:442:24\n    |\n442 | impl SparseStorage for VDBSparseStorage {\n    |                        ^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:114:33\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                                 ^^^^ required by this bound in `SparseStorage`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage`","rendered":null,"spans":[{"byte_end":3418,"byte_start":3414,"column_end":37,"column_start":33,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":33,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":14735,"byte_start":14719,"column_end":40,"column_start":24,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":442,"line_start":442,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":24,"text":"impl SparseStorage for VDBSparseStorage {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:442:24\n    |\n442 | impl SparseStorage for VDBSparseStorage {\n    |                        ^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:114:33\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                                 ^^^^ required by this bound in `SparseStorage`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage`","rendered":null,"spans":[{"byte_end":3418,"byte_start":3414,"column_end":37,"column_start":33,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":33,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":14735,"byte_start":14719,"column_end":40,"column_start":24,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":442,"line_start":442,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":24,"text":"impl SparseStorage for VDBSparseStorage {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `adapter`\n   --> src/storage/vdb/sparse_storage.rs:369:21\n    |\n369 |         if let Some(adapter) = adapter_cache.get_mut(adapter_id) {\n    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_adapter`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":12281,"byte_start":12274,"column_end":28,"column_start":21,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":369,"line_start":369,"suggested_replacement":"_adapter","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":28,"highlight_start":21,"text":"        if let Some(adapter) = adapter_cache.get_mut(adapter_id) {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `adapter`","spans":[{"byte_end":12281,"byte_start":12274,"column_end":28,"column_start":21,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":369,"line_start":369,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":21,"text":"        if let Some(adapter) = adapter_cache.get_mut(adapter_id) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `get_lora_a` found for reference `&SparseLoRAAdapter` in the current scope\n   --> src/storage/vdb/hardware_accelerated.rs:144:30\n    |\n144 |         let lora_a = adapter.get_lora_a().await;\n    |                              ^^^^^^^^^^ method not found in `&SparseLoRAAdapter`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_lora_a` found for reference `&SparseLoRAAdapter` in the current scope","spans":[{"byte_end":4473,"byte_start":4463,"column_end":40,"column_start":30,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"method not found in `&SparseLoRAAdapter`","line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":30,"text":"        let lora_a = adapter.get_lora_a().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `get_lora_b` found for reference `&SparseLoRAAdapter` in the current scope\n   --> src/storage/vdb/hardware_accelerated.rs:145:30\n    |\n145 |         let lora_b = adapter.get_lora_b().await;\n    |                              ^^^^^^^^^^ method not found in `&SparseLoRAAdapter`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `get_lora_b` found for reference `&SparseLoRAAdapter` in the current scope","spans":[{"byte_end":4522,"byte_start":4512,"column_end":40,"column_start":30,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"method not found in `&SparseLoRAAdapter`","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":30,"text":"        let lora_b = adapter.get_lora_b().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> src/storage/vdb/hardware_accelerated.rs:144:13\n    |\n144 |         let lora_a = adapter.get_lora_a().await;\n    |             ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[f32]`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Sized` is not implemented for `[f32]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"all local variables must have a statically known size","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"unsized locals are gated as an unstable feature","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the size for values of type `[f32]` cannot be known at compilation time","spans":[{"byte_end":4452,"byte_start":4446,"column_end":19,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"doesn't have a size known at compile-time","line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":13,"text":"        let lora_a = adapter.get_lora_a().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> src/storage/vdb/hardware_accelerated.rs:144:43\n    |\n144 |         let lora_a = adapter.get_lora_a().await;\n    |                                           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[f32]`\nnote: required by a bound in `std::task::Poll::Ready`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:14:15\n    |\n14  | pub enum Poll<T> {\n    |               ^ required by this bound in `Poll::Ready`\n...\n18  |     Ready(#[stable(feature = \"futures_api\", since = \"1.36.0\")] T),\n    |     ----- required by a bound in this variant\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Sized` is not implemented for `[f32]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `std::task::Poll::Ready`","rendered":null,"spans":[{"byte_end":684,"byte_start":679,"column_end":10,"column_start":5,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs","is_primary":false,"label":"required by a bound in this variant","line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    Ready(#[stable(feature = \"futures_api\", since = \"1.36.0\")] T),"}]},{"byte_end":538,"byte_start":537,"column_end":16,"column_start":15,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs","is_primary":true,"label":"required by this bound in `Poll::Ready`","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"pub enum Poll<T> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the size for values of type `[f32]` cannot be known at compilation time","spans":[{"byte_end":4481,"byte_start":4476,"column_end":48,"column_start":43,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `await` expression","span":{"byte_end":4481,"byte_start":4476,"column_end":48,"column_start":43,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":null,"line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":43,"text":"        let lora_a = adapter.get_lora_a().await;"}]}},"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"doesn't have a size known at compile-time","line_end":144,"line_start":144,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":43,"text":"        let lora_a = adapter.get_lora_a().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> src/storage/vdb/hardware_accelerated.rs:145:13\n    |\n145 |         let lora_b = adapter.get_lora_b().await;\n    |             ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[f32]`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Sized` is not implemented for `[f32]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"all local variables must have a statically known size","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"unsized locals are gated as an unstable feature","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the size for values of type `[f32]` cannot be known at compilation time","spans":[{"byte_end":4501,"byte_start":4495,"column_end":19,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"doesn't have a size known at compile-time","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":13,"text":"        let lora_b = adapter.get_lora_b().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> src/storage/vdb/hardware_accelerated.rs:145:43\n    |\n145 |         let lora_b = adapter.get_lora_b().await;\n    |                                           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[f32]`\nnote: required by a bound in `std::task::Poll::Ready`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:14:15\n    |\n14  | pub enum Poll<T> {\n    |               ^ required by this bound in `Poll::Ready`\n...\n18  |     Ready(#[stable(feature = \"futures_api\", since = \"1.36.0\")] T),\n    |     ----- required by a bound in this variant\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `Sized` is not implemented for `[f32]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `std::task::Poll::Ready`","rendered":null,"spans":[{"byte_end":684,"byte_start":679,"column_end":10,"column_start":5,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs","is_primary":false,"label":"required by a bound in this variant","line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    Ready(#[stable(feature = \"futures_api\", since = \"1.36.0\")] T),"}]},{"byte_end":538,"byte_start":537,"column_end":16,"column_start":15,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs","is_primary":true,"label":"required by this bound in `Poll::Ready`","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":15,"text":"pub enum Poll<T> {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the size for values of type `[f32]` cannot be known at compilation time","spans":[{"byte_end":4530,"byte_start":4525,"column_end":48,"column_start":43,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `await` expression","span":{"byte_end":4530,"byte_start":4525,"column_end":48,"column_start":43,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":null,"line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":43,"text":"        let lora_b = adapter.get_lora_b().await;"}]}},"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"doesn't have a size known at compile-time","line_end":145,"line_start":145,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":43,"text":"        let lora_b = adapter.get_lora_b().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `lora_b`\n   --> src/storage/vdb/hardware_accelerated.rs:190:62\n    |\n190 |     async fn quantize_weight_clusters(&self, lora_a: &[f32], lora_b: &[f32]) -> Result<Vec<(u16, u16, f32)>, VDBError> {\n    |                                                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_lora_b`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":6475,"byte_start":6469,"column_end":68,"column_start":62,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":190,"line_start":190,"suggested_replacement":"_lora_b","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":68,"highlight_start":62,"text":"    async fn quantize_weight_clusters(&self, lora_a: &[f32], lora_b: &[f32]) -> Result<Vec<(u16, u16, f32)>, VDBError> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `lora_b`","spans":[{"byte_end":6475,"byte_start":6469,"column_end":68,"column_start":62,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":190,"line_start":190,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":62,"text":"    async fn quantize_weight_clusters(&self, lora_a: &[f32], lora_b: &[f32]) -> Result<Vec<(u16, u16, f32)>, VDBError> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `start`\n   --> src/storage/vdb/hardware_accelerated.rs:328:13\n    |\n328 |         let start = std::time::Instant::now();\n    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":11221,"byte_start":11216,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":328,"line_start":328,"suggested_replacement":"_start","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":13,"text":"        let start = std::time::Instant::now();"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `start`","spans":[{"byte_end":11221,"byte_start":11216,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":328,"line_start":328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":13,"text":"        let start = std::time::Instant::now();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `&SparseLoRAConfig` is not a future\n   --> src/storage/vdb/hardware_accelerated.rs:920:43\n    |\n920 |         let config = adapter.get_config().await;\n    |                                          -^^^^^\n    |                                          ||\n    |                                          |`&SparseLoRAConfig` is not a future\n    |                                          help: remove the `.await`\n    |\n    = help: the trait `futures::Future` is not implemented for `&SparseLoRAConfig`\n    = note: &SparseLoRAConfig must be a future or must implement `IntoFuture` to be awaited\n    = note: required for `&SparseLoRAConfig` to implement `std::future::IntoFuture`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `futures::Future` is not implemented for `&SparseLoRAConfig`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"&SparseLoRAConfig must be a future or must implement `IntoFuture` to be awaited","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `&SparseLoRAConfig` to implement `std::future::IntoFuture`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the `.await`","rendered":null,"spans":[{"byte_end":34521,"byte_start":34515,"column_end":48,"column_start":42,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":920,"line_start":920,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":48,"highlight_start":42,"text":"        let config = adapter.get_config().await;"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`&SparseLoRAConfig` is not a future","spans":[{"byte_end":34521,"byte_start":34516,"column_end":48,"column_start":43,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of `await` expression","span":{"byte_end":34521,"byte_start":34516,"column_end":48,"column_start":43,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":null,"line_end":920,"line_start":920,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":43,"text":"        let config = adapter.get_config().await;"}]}},"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"`&SparseLoRAConfig` is not a future","line_end":920,"line_start":920,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":43,"text":"        let config = adapter.get_config().await;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this method takes 3 arguments but 4 arguments were supplied\n   --> src/storage/vdb/hardware_accelerated.rs:957:21\n    |\n957 |             adapter.set_weight(x, y, 0, value as f32 / 255.0); // Normalize from u8\n    |                     ^^^^^^^^^^       - unexpected argument #3 of type `{integer}`\n    |\nnote: method defined here\n   --> src/storage/vdb/openvdb_bindings.rs:90:12\n    |\n90  |     pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {\n    |            ^^^^^^^^^^            --------  --------  -----------\nhelp: remove the extra argument\n    |\n957 -             adapter.set_weight(x, y, 0, value as f32 / 255.0); // Normalize from u8\n957 +             adapter.set_weight(x, y, value as f32 / 255.0); // Normalize from u8\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":3037,"byte_start":3029,"column_end":42,"column_start":34,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":34,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3047,"byte_start":3039,"column_end":52,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":44,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3060,"byte_start":3049,"column_end":65,"column_start":54,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":54,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3017,"byte_start":3007,"column_end":22,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":12,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":35916,"byte_start":35913,"column_end":39,"column_start":36,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":957,"line_start":957,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":36,"text":"            adapter.set_weight(x, y, 0, value as f32 / 255.0); // Normalize from u8"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this method takes 3 arguments but 4 arguments were supplied","spans":[{"byte_end":35916,"byte_start":35915,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"unexpected argument #3 of type `{integer}`","line_end":957,"line_start":957,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":38,"text":"            adapter.set_weight(x, y, 0, value as f32 / 255.0); // Normalize from u8"}]},{"byte_end":35908,"byte_start":35898,"column_end":31,"column_start":21,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":957,"line_start":957,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":21,"text":"            adapter.set_weight(x, y, 0, value as f32 / 255.0); // Normalize from u8"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this method takes 3 arguments but 4 arguments were supplied\n   --> src/storage/vdb/hardware_accelerated.rs:970:21\n    |\n970 |             adapter.set_weight(x as i32, y as i32, 1, weight); // Level 1 in Z\n    |                     ^^^^^^^^^^                     - unexpected argument #3 of type `{integer}`\n    |\nnote: method defined here\n   --> src/storage/vdb/openvdb_bindings.rs:90:12\n    |\n90  |     pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {\n    |            ^^^^^^^^^^            --------  --------  -----------\nhelp: remove the extra argument\n    |\n970 -             adapter.set_weight(x as i32, y as i32, 1, weight); // Level 1 in Z\n970 +             adapter.set_weight(x as i32, y as i32, weight); // Level 1 in Z\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":3037,"byte_start":3029,"column_end":42,"column_start":34,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":34,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3047,"byte_start":3039,"column_end":52,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":44,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3060,"byte_start":3049,"column_end":65,"column_start":54,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":54,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3017,"byte_start":3007,"column_end":22,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":12,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":36433,"byte_start":36430,"column_end":53,"column_start":50,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":970,"line_start":970,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":53,"highlight_start":50,"text":"            adapter.set_weight(x as i32, y as i32, 1, weight); // Level 1 in Z"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this method takes 3 arguments but 4 arguments were supplied","spans":[{"byte_end":36433,"byte_start":36432,"column_end":53,"column_start":52,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"unexpected argument #3 of type `{integer}`","line_end":970,"line_start":970,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":52,"text":"            adapter.set_weight(x as i32, y as i32, 1, weight); // Level 1 in Z"}]},{"byte_end":36411,"byte_start":36401,"column_end":31,"column_start":21,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":970,"line_start":970,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":21,"text":"            adapter.set_weight(x as i32, y as i32, 1, weight); // Level 1 in Z"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this method takes 3 arguments but 4 arguments were supplied\n   --> src/storage/vdb/hardware_accelerated.rs:985:21\n    |\n985 |             adapter.set_weight(x, y, 2, weight); // Level 2 in Z\n    |                     ^^^^^^^^^^       -  ------ unexpected argument #4 of type `(u32, f32)`\n    |                                      |\n    |                                      expected `f32`, found integer\n    |\nnote: method defined here\n   --> src/storage/vdb/openvdb_bindings.rs:90:12\n    |\n90  |     pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {\n    |            ^^^^^^^^^^            --------  --------  -----------\nhelp: use a float literal\n    |\n985 |             adapter.set_weight(x, y, 2.0, weight); // Level 2 in Z\n    |                                       ++\nhelp: remove the extra argument\n    |\n985 -             adapter.set_weight(x, y, 2, weight); // Level 2 in Z\n985 +             adapter.set_weight(x, y, /* f32 */); // Level 2 in Z\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":3037,"byte_start":3029,"column_end":42,"column_start":34,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":34,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3047,"byte_start":3039,"column_end":52,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":44,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3060,"byte_start":3049,"column_end":65,"column_start":54,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":false,"label":"","line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":65,"highlight_start":54,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]},{"byte_end":3017,"byte_start":3007,"column_end":22,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":90,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":12,"text":"    pub fn set_weight(&mut self, row: i32, col: i32, weight: f32) -> Result<()> {"}]}]},{"children":[],"code":null,"level":"help","message":"use a float literal","rendered":null,"spans":[{"byte_end":37060,"byte_start":37060,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":985,"line_start":985,"suggested_replacement":".0","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":39,"text":"            adapter.set_weight(x, y, 2, weight); // Level 2 in Z"}]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":37068,"byte_start":37060,"column_end":47,"column_start":39,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":985,"line_start":985,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":47,"highlight_start":39,"text":"            adapter.set_weight(x, y, 2, weight); // Level 2 in Z"}]},{"byte_end":37060,"byte_start":37059,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":985,"line_start":985,"suggested_replacement":"/* f32 */","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":39,"highlight_start":38,"text":"            adapter.set_weight(x, y, 2, weight); // Level 2 in Z"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this method takes 3 arguments but 4 arguments were supplied","spans":[{"byte_end":37060,"byte_start":37059,"column_end":39,"column_start":38,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"expected `f32`, found integer","line_end":985,"line_start":985,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":38,"text":"            adapter.set_weight(x, y, 2, weight); // Level 2 in Z"}]},{"byte_end":37068,"byte_start":37062,"column_end":47,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"unexpected argument #4 of type `(u32, f32)`","line_end":985,"line_start":985,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":41,"text":"            adapter.set_weight(x, y, 2, weight); // Level 2 in Z"}]},{"byte_end":37052,"byte_start":37042,"column_end":31,"column_start":21,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":985,"line_start":985,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":21,"text":"            adapter.set_weight(x, y, 2, weight); // Level 2 in Z"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `sparse_multiply` found for reference `&OpenVDBLoRAAdapter` in the current scope\n   --> src/storage/vdb/hardware_accelerated.rs:768:21\n    |\n768 |             adapter.sparse_multiply(input, output)\n    |                     ^^^^^^^^^^^^^^^\n    |\nhelp: there is a method `sparse_fill` with a similar name, but with different arguments\n   --> src/storage/vdb/openvdb_bindings.rs:135:5\n    |\n135 |     pub fn sparse_fill(&mut self, min_row: i32, min_col: i32, max_row: i32, max_col: i32, value: f32) -> Result<()> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `sparse_fill` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":4793,"byte_start":4682,"column_end":116,"column_start":5,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":135,"line_start":135,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":5,"text":"    pub fn sparse_fill(&mut self, min_row: i32, min_col: i32, max_row: i32, max_col: i32, value: f32) -> Result<()> {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `sparse_multiply` found for reference `&OpenVDBLoRAAdapter` in the current scope","spans":[{"byte_end":28711,"byte_start":28696,"column_end":36,"column_start":21,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":768,"line_start":768,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":21,"text":"            adapter.sparse_multiply(input, output)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/storage/vdb/hardware_accelerated.rs:871:9\n    |\n869 |     pub async fn get_prediction_stats(&self) -> PredictionStats {\n    |                                                 --------------- expected `PredictionStats` because of return type\n870 |         let predictor = self.autoregressive_predictor.read().await;\n871 |         predictor.get_stats().clone()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `PredictionStats`, found `&PredictionStats`\n    |\nnote: `PredictionStats` does not implement `Clone`, so `&PredictionStats` was cloned instead\n   --> src/storage/vdb/hardware_accelerated.rs:871:9\n    |\n871 |         predictor.get_stats().clone()\n    |         ^^^^^^^^^^^^^^^^^^^^^\nhelp: consider annotating `PredictionStats` with `#[derive(Clone)]`\n    |\n114 + #[derive(Clone)]\n115 | pub struct PredictionStats {\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`PredictionStats` does not implement `Clone`, so `&PredictionStats` was cloned instead","rendered":null,"spans":[{"byte_end":32623,"byte_start":32602,"column_end":30,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":871,"line_start":871,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":9,"text":"        predictor.get_stats().clone()"}]}]},{"children":[],"code":null,"level":"help","message":"consider annotating `PredictionStats` with `#[derive(Clone)]`","rendered":null,"spans":[{"byte_end":3404,"byte_start":3404,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":114,"line_start":114,"suggested_replacement":"#[derive(Clone)]\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":1,"highlight_start":1,"text":"pub struct PredictionStats {"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":32631,"byte_start":32602,"column_end":38,"column_start":9,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"expected `PredictionStats`, found `&PredictionStats`","line_end":871,"line_start":871,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":9,"text":"        predictor.get_stats().clone()"}]},{"byte_end":32523,"byte_start":32508,"column_end":64,"column_start":49,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":false,"label":"expected `PredictionStats` because of return type","line_end":869,"line_start":869,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":49,"text":"    pub async fn get_prediction_stats(&self) -> PredictionStats {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `active_voxel_count` found for reference `&OpenVDBLoRAAdapter` in the current scope\n   --> src/storage/vdb/hardware_accelerated.rs:890:44\n    |\n890 |                     active_voxels: adapter.active_voxel_count(),\n    |                                            ^^^^^^^^^^^^^^^^^^\n    |\nhelp: there is a method `active_count` with a similar name\n    |\n890 |                     active_voxels: adapter.active_count(),\n    |                                            ~~~~~~~~~~~~\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `active_count` with a similar name","rendered":null,"spans":[{"byte_end":33374,"byte_start":33356,"column_end":62,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":890,"line_start":890,"suggested_replacement":"active_count","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":62,"highlight_start":44,"text":"                    active_voxels: adapter.active_voxel_count(),"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `active_voxel_count` found for reference `&OpenVDBLoRAAdapter` in the current scope","spans":[{"byte_end":33374,"byte_start":33356,"column_end":62,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":890,"line_start":890,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":44,"text":"                    active_voxels: adapter.active_voxel_count(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/storage/vdb/hardware_accelerated.rs:891:41\n    |\n891 |                     memory_usage_bytes: adapter.memory_usage(),\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":33440,"byte_start":33418,"column_end":63,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":"expected `u64`, found `usize`","line_end":891,"line_start":891,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":41,"text":"                    memory_usage_bytes: adapter.memory_usage(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>, axum::Json<PullModelRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<PullModelResponse>, axum::http::StatusCode>> {pull_model}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:258:40\n    |\n258 |         .route(\"/v1/models/pull\", post(pull_model))\n    |                                   ---- ^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Json<...>) -> ... {pull_model}`\n    |                                   |\n    |                                   required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13151850142122459465.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13151850142122459465.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>, axum::Json<PullModelRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<PullModelResponse>, axum::http::StatusCode>> {pull_model}: Handler<_, _>` is not satisfied","spans":[{"byte_end":7710,"byte_start":7700,"column_end":50,"column_start":40,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Json<...>) -> ... {pull_model}`","line_end":258,"line_start":258,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":40,"text":"        .route(\"/v1/models/pull\", post(pull_model))"}]},{"byte_end":7699,"byte_start":7695,"column_end":39,"column_start":35,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":258,"line_start":258,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":35,"text":"        .route(\"/v1/models/pull\", post(pull_model))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<ListModelsQuery>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<model_management::ModelInfo>>, axum::http::StatusCode>> {list_models}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:259:39\n    |\n259 |         .route(\"/v1/models/list\", get(list_models))\n    |                                   --- ^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>) -> ... {list_models}`\n    |                                   |\n    |                                   required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-8391979847550833321.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-8391979847550833321.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<ListModelsQuery>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<model_management::ModelInfo>>, axum::http::StatusCode>> {list_models}: Handler<_, _>` is not satisfied","spans":[{"byte_end":7762,"byte_start":7751,"column_end":50,"column_start":39,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>) -> ... {list_models}`","line_end":259,"line_start":259,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":39,"text":"        .route(\"/v1/models/list\", get(list_models))"}]},{"byte_end":7750,"byte_start":7747,"column_end":38,"column_start":35,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":259,"line_start":259,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":35,"text":"        .route(\"/v1/models/list\", get(list_models))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<HashMap<std::string::String, std::string::String>>) -> impl futures::Future<Output = std::result::Result<axum::Json<model_management::ModelInfo>, axum::http::StatusCode>> {get_model_info}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:260:39\n    |\n260 |         .route(\"/v1/models/info\", get(get_model_info))\n    |                                   --- ^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>) -> ... {get_model_info}`\n    |                                   |\n    |                                   required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-4419946153901748089.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-4419946153901748089.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<HashMap<std::string::String, std::string::String>>) -> impl futures::Future<Output = std::result::Result<axum::Json<model_management::ModelInfo>, axum::http::StatusCode>> {get_model_info}: Handler<_, _>` is not satisfied","spans":[{"byte_end":7817,"byte_start":7803,"column_end":53,"column_start":39,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>) -> ... {get_model_info}`","line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":39,"text":"        .route(\"/v1/models/info\", get(get_model_info))"}]},{"byte_end":7802,"byte_start":7799,"column_end":38,"column_start":35,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":260,"line_start":260,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":35,"text":"        .route(\"/v1/models/info\", get(get_model_info))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<HashMap<std::string::String, std::string::String>>, axum::Json<RemoveModelRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {remove_model}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:261:44\n    |\n261 |         .route(\"/v1/models/remove\", delete(remove_model))\n    |                                     ------ ^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>, ...) -> ... {remove_model}`\n    |                                     |\n    |                                     required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-14246527746104312692.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `delete`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:438:1\n    |\n438 | top_level_handler_fn!(delete, DELETE);\n    | ^^^^^^^^^^^^^^^^^^^^^^------^^^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `delete`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-14246527746104312692.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `delete`","rendered":null,"spans":[{"byte_end":12560,"byte_start":12554,"column_end":29,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":438,"line_start":438,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":23,"text":"top_level_handler_fn!(delete, DELETE);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12569,"byte_start":12532,"column_end":38,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":438,"line_start":438,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":1,"text":"top_level_handler_fn!(delete, DELETE);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `delete`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<HashMap<std::string::String, std::string::String>>, axum::Json<RemoveModelRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {remove_model}: Handler<_, _>` is not satisfied","spans":[{"byte_end":7875,"byte_start":7863,"column_end":56,"column_start":44,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>, ...) -> ... {remove_model}`","line_end":261,"line_start":261,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":44,"text":"        .route(\"/v1/models/remove\", delete(remove_model))"}]},{"byte_end":7862,"byte_start":7856,"column_end":43,"column_start":37,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":261,"line_start":261,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":37,"text":"        .route(\"/v1/models/remove\", delete(remove_model))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<HashMap<std::string::String, std::string::String>>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<model_management::ModelInfo>>, axum::http::StatusCode>> {search_models}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:264:41\n    |\n264 |         .route(\"/v1/models/search\", get(search_models))\n    |                                     --- ^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>) -> ... {search_models}`\n    |                                     |\n    |                                     required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-7245644516379246335.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-7245644516379246335.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>, axum::extract::Query<HashMap<std::string::String, std::string::String>>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<model_management::ModelInfo>>, axum::http::StatusCode>> {search_models}: Handler<_, _>` is not satisfied","spans":[{"byte_end":7971,"byte_start":7958,"column_end":54,"column_start":41,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>, Query<...>) -> ... {search_models}`","line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":41,"text":"        .route(\"/v1/models/search\", get(search_models))"}]},{"byte_end":7957,"byte_start":7954,"column_end":40,"column_start":37,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":264,"line_start":264,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":37,"text":"        .route(\"/v1/models/search\", get(search_models))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<serde_json::Value>>, axum::http::StatusCode>> {list_registries}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:265:45\n    |\n265 |         .route(\"/v1/models/registries\", get(list_registries))\n    |                                         --- ^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>) -> ... {list_registries}`\n    |                                         |\n    |                                         required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11846532553023086145.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11846532553023086145.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<serde_json::Value>>, axum::http::StatusCode>> {list_registries}: Handler<_, _>` is not satisfied","spans":[{"byte_end":8033,"byte_start":8018,"column_end":60,"column_start":45,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>) -> ... {list_registries}`","line_end":265,"line_start":265,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":45,"text":"        .route(\"/v1/models/registries\", get(list_registries))"}]},{"byte_end":8017,"byte_start":8014,"column_end":44,"column_start":41,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":265,"line_start":265,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":41,"text":"        .route(\"/v1/models/registries\", get(list_registries))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {cache_status}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:268:47\n    |\n268 |         .route(\"/v1/models/cache/status\", get(cache_status))\n    |                                           --- ^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>) -> ... {cache_status}`\n    |                                           |\n    |                                           required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-12982264703177452892.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-12982264703177452892.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {cache_status}: Handler<_, _>` is not satisfied","spans":[{"byte_end":8131,"byte_start":8119,"column_end":59,"column_start":47,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>) -> ... {cache_status}`","line_end":268,"line_start":268,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":47,"text":"        .route(\"/v1/models/cache/status\", get(cache_status))"}]},{"byte_end":8118,"byte_start":8115,"column_end":46,"column_start":43,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":268,"line_start":268,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":43,"text":"        .route(\"/v1/models/cache/status\", get(cache_status))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ModelManagementState>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {cleanup_cache}: Handler<_, _>` is not satisfied\n   --> src/api/model_management.rs:269:49\n    |\n269 |         .route(\"/v1/models/cache/cleanup\", post(cleanup_cache))\n    |                                            ---- ^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>) -> ... {cleanup_cache}`\n    |                                            |\n    |                                            required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-8259800315393893753.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-8259800315393893753.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ModelManagementState>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {cleanup_cache}: Handler<_, _>` is not satisfied","spans":[{"byte_end":8195,"byte_start":8182,"column_end":62,"column_start":49,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ModelManagementState>) -> ... {cleanup_cache}`","line_end":269,"line_start":269,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":49,"text":"        .route(\"/v1/models/cache/cleanup\", post(cleanup_cache))"}]},{"byte_end":8181,"byte_start":8177,"column_end":48,"column_start":44,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":269,"line_start":269,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":44,"text":"        .route(\"/v1/models/cache/cleanup\", post(cleanup_cache))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/model_management.rs:256:5\n    |\n256 |     Router::new()\n    |     ^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ModelManagementState`\n   --> src/api/model_management.rs:24:12\n    |\n24  | pub struct ModelManagementState {\n    |            ^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `AxumRouter::<S>::new`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs:133:16\n    |\n133 |     S: Clone + Send + Sync + 'static,\n    |                ^^^^ required by this bound in `Router::<S>::new`\n...\n139 |     pub fn new() -> Self {\n    |            --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ModelManagementState`","rendered":null,"spans":[{"byte_end":671,"byte_start":651,"column_end":32,"column_start":12,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":12,"text":"pub struct ModelManagementState {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `AxumRouter::<S>::new`","rendered":null,"spans":[{"byte_end":3553,"byte_start":3550,"column_end":15,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new() -> Self {"}]},{"byte_end":3374,"byte_start":3370,"column_end":20,"column_start":16,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":"required by this bound in `Router::<S>::new`","line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":16,"text":"    S: Clone + Send + Sync + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7632,"byte_start":7619,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":256,"line_start":256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    Router::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/model_management.rs:256:5\n    |\n256 |     Router::new()\n    |     ^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ModelManagementState`\n   --> src/api/model_management.rs:24:12\n    |\n24  | pub struct ModelManagementState {\n    |            ^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `AxumRouter::<S>::new`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs:133:16\n    |\n133 |     S: Clone + Send + Sync + 'static,\n    |                ^^^^ required by this bound in `Router::<S>::new`\n...\n139 |     pub fn new() -> Self {\n    |            --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ModelManagementState`","rendered":null,"spans":[{"byte_end":671,"byte_start":651,"column_end":32,"column_start":12,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":null,"line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":12,"text":"pub struct ModelManagementState {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `AxumRouter::<S>::new`","rendered":null,"spans":[{"byte_end":3553,"byte_start":3550,"column_end":15,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new() -> Self {"}]},{"byte_end":3374,"byte_start":3370,"column_end":20,"column_start":16,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":"required by this bound in `Router::<S>::new`","line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":16,"text":"    S: Clone + Send + Sync + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7632,"byte_start":7619,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/api/model_management.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":256,"line_start":256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    Router::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0061]: this method takes 2 arguments but 1 argument was supplied\n   --> src/api/huggingface.rs:195:31\n    |\n195 |         let model_info = self.get_model_info(model_uri).await?;\n    |                               ^^^^^^^^^^^^^^-----------\n    |                                             ||\n    |                                             |expected `&str`, found `&ModelUri`\n    |                                             argument #2 of type `&str` is missing\n    |\n    = note: expected reference `&str`\n               found reference `&'life1 ModelUri`\nnote: method defined here\n   --> src/api/huggingface.rs:99:18\n    |\n99  |     pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {\n    |                  ^^^^^^^^^^^^^^        ---------  ----------\nhelp: provide the argument\n    |\n195 |         let model_info = self.get_model_info(/* &str */, /* &str */).await?;\n    |                                             ~~~~~~~~~~~~~~~~~~~~~~~~\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected reference `&str`\n   found reference `&'life1 ModelUri`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":4151,"byte_start":4142,"column_end":49,"column_start":40,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":false,"label":"","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":40,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]},{"byte_end":4163,"byte_start":4153,"column_end":61,"column_start":51,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":false,"label":"","line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":51,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]},{"byte_end":4134,"byte_start":4120,"column_end":32,"column_start":18,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":99,"line_start":99,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":18,"text":"    pub async fn get_model_info(&self, org: &str, name: &str) -> Result<crate::api::model_registry::ModelInfo> {"}]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":7794,"byte_start":7783,"column_end":56,"column_start":45,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":"(/* &str */, /* &str */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":56,"highlight_start":45,"text":"        let model_info = self.get_model_info(model_uri).await?;"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this method takes 2 arguments but 1 argument was supplied","spans":[{"byte_end":7793,"byte_start":7784,"column_end":55,"column_start":46,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":false,"label":"expected `&str`, found `&ModelUri`","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":46,"text":"        let model_info = self.get_model_info(model_uri).await?;"}]},{"byte_end":7794,"byte_start":7783,"column_end":56,"column_start":45,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":false,"label":"argument #2 of type `&str` is missing","line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":56,"highlight_start":45,"text":"        let model_info = self.get_model_info(model_uri).await?;"}]},{"byte_end":7783,"byte_start":7769,"column_end":45,"column_start":31,"expansion":null,"file_name":"src/api/huggingface.rs","is_primary":true,"label":null,"line_end":195,"line_start":195,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":31,"text":"        let model_info = self.get_model_info(model_uri).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `hardware_accelerated::HardwareVDBStorage: sparse_storage::SparseStorage` is not satisfied\n  --> src/api/inference_service.rs:96:13\n   |\n96 |             api_state.vdb_storage.clone() as Arc<dyn SparseStorage>\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `sparse_storage::SparseStorage` is not implemented for `hardware_accelerated::HardwareVDBStorage`\n   |\n   = help: the trait `sparse_storage::SparseStorage` is implemented for `sparse_storage::VDBSparseStorage`\n   = note: required for the cast from `Arc<hardware_accelerated::HardwareVDBStorage>` to `Arc<(dyn sparse_storage::SparseStorage + 'static)>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `sparse_storage::SparseStorage` is implemented for `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Arc<hardware_accelerated::HardwareVDBStorage>` to `Arc<(dyn sparse_storage::SparseStorage + 'static)>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `hardware_accelerated::HardwareVDBStorage: sparse_storage::SparseStorage` is not satisfied","spans":[{"byte_end":2681,"byte_start":2652,"column_end":42,"column_start":13,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"the trait `sparse_storage::SparseStorage` is not implemented for `hardware_accelerated::HardwareVDBStorage`","line_end":96,"line_start":96,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":13,"text":"            api_state.vdb_storage.clone() as Arc<dyn SparseStorage>"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:218:26\n    |\n218 |     ) -> Result<Response<Self::HandshakeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::HandshakeStream`\n862 |         /// Server streaming response type for the Handshake method.\n863 |         type HandshakeStream: tonic::codegen::tokio_stream::Stream<\n    |              --------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`","rendered":null,"spans":[{"byte_end":35504,"byte_start":35489,"column_end":29,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":863,"line_start":863,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"        type HandshakeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::HandshakeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7623,"byte_start":7619,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":218,"line_start":218,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::HandshakeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:218:26\n    |\n218 |     ) -> Result<Response<Self::HandshakeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::HandshakeStream`\n862 |         /// Server streaming response type for the Handshake method.\n863 |         type HandshakeStream: tonic::codegen::tokio_stream::Stream<\n    |              --------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`","rendered":null,"spans":[{"byte_end":35504,"byte_start":35489,"column_end":29,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":863,"line_start":863,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"        type HandshakeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::HandshakeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7623,"byte_start":7619,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":218,"line_start":218,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::HandshakeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:226:26\n    |\n226 |     ) -> Result<Response<Self::ListFlightsStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListFlightsStream`\n...\n878 |         type ListFlightsStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`","rendered":null,"spans":[{"byte_end":36330,"byte_start":36313,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":878,"line_start":878,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListFlightsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListFlightsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7868,"byte_start":7864,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListFlightsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:226:26\n    |\n226 |     ) -> Result<Response<Self::ListFlightsStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListFlightsStream`\n...\n878 |         type ListFlightsStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`","rendered":null,"spans":[{"byte_end":36330,"byte_start":36313,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":878,"line_start":878,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListFlightsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListFlightsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7868,"byte_start":7864,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":226,"line_start":226,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListFlightsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:245:26\n    |\n245 |     ) -> Result<Response<Self::DoGetStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoGetStream`\n...\n949 |         type DoGetStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`","rendered":null,"spans":[{"byte_end":40308,"byte_start":40297,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":949,"line_start":949,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoGetStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoGetStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":8604,"byte_start":8600,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":245,"line_start":245,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoGetStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:245:26\n    |\n245 |     ) -> Result<Response<Self::DoGetStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoGetStream`\n...\n949 |         type DoGetStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`","rendered":null,"spans":[{"byte_end":40308,"byte_start":40297,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":949,"line_start":949,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoGetStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoGetStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":8604,"byte_start":8600,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":245,"line_start":245,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoGetStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: use of deprecated method `arrow_ipc::writer::IpcDataGenerator::schema_to_bytes`: Use `schema_to_bytes_with_dictionary_tracker` instead. This function signature of `schema_to_bytes_with_dictionary_tracker` in the next release.\n   --> src/api/inference_service.rs:284:47\n    |\n284 |             let encoded_schema = encoded_data.schema_to_bytes(&schema, &schema_message);\n    |                                               ^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(deprecated)]` on by default","rendered":null,"spans":[]}],"code":{"code":"deprecated","explanation":null},"level":"warning","message":"use of deprecated method `arrow_ipc::writer::IpcDataGenerator::schema_to_bytes`: Use `schema_to_bytes_with_dictionary_tracker` instead. This function signature of `schema_to_bytes_with_dictionary_tracker` in the next release.","spans":[{"byte_end":10349,"byte_start":10334,"column_end":62,"column_start":47,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":284,"line_start":284,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":47,"text":"            let encoded_schema = encoded_data.schema_to_bytes(&schema, &schema_message);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:276:49\n    |\n276 |       ) -> Result<Response<SchemaResult>, Status> {\n    |  _________________________________________________^\n277 | |         let descriptor = request.into_inner();\n278 | |         \n279 | |         // Check if it's an inference schema request\n...   |\n291 | |         }\n292 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/inference_service.rs:276:49\n    |\n276 |       ) -> Result<Response<SchemaResult>, Status> {\n    |  _________________________________________________^\n277 | |         let descriptor = request.into_inner();\n278 | |         \n279 | |         // Check if it's an inference schema request\n...   |\n291 | |         }\n292 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:276:49: 292:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11225239573954338058.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":10714,"byte_start":9891,"column_end":6,"column_start":49,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":292,"line_start":276,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"    ) -> Result<Response<SchemaResult>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":53,"highlight_start":1,"text":"        // Check if it's an inference schema request"},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":50,"highlight_start":1,"text":"            let schema = self.inference_schema();"},{"highlight_end":80,"highlight_start":1,"text":"            let schema_message = arrow_ipc::writer::IpcWriteOptions::default();"},{"highlight_end":79,"highlight_start":1,"text":"            let encoded_data = arrow_ipc::writer::IpcDataGenerator::default();"},{"highlight_end":89,"highlight_start":1,"text":"            let encoded_schema = encoded_data.schema_to_bytes(&schema, &schema_message);"},{"highlight_end":66,"highlight_start":1,"text":"            let schema_bytes = encoded_schema.ipc_message.into();"},{"highlight_end":71,"highlight_start":1,"text":"            let schema_result = SchemaResult { schema: schema_bytes };"},{"highlight_end":45,"highlight_start":1,"text":"            Ok(Response::new(schema_result))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":45,"highlight_start":1,"text":"            // Fallback to embedding service"},{"highlight_end":78,"highlight_start":1,"text":"            self.embedding_service.get_schema(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:276:49: 292:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11225239573954338058.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":10714,"byte_start":9891,"column_end":6,"column_start":49,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":292,"line_start":276,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"    ) -> Result<Response<SchemaResult>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":53,"highlight_start":1,"text":"        // Check if it's an inference schema request"},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":50,"highlight_start":1,"text":"            let schema = self.inference_schema();"},{"highlight_end":80,"highlight_start":1,"text":"            let schema_message = arrow_ipc::writer::IpcWriteOptions::default();"},{"highlight_end":79,"highlight_start":1,"text":"            let encoded_data = arrow_ipc::writer::IpcDataGenerator::default();"},{"highlight_end":89,"highlight_start":1,"text":"            let encoded_schema = encoded_data.schema_to_bytes(&schema, &schema_message);"},{"highlight_end":66,"highlight_start":1,"text":"            let schema_bytes = encoded_schema.ipc_message.into();"},{"highlight_end":71,"highlight_start":1,"text":"            let schema_result = SchemaResult { schema: schema_bytes };"},{"highlight_end":45,"highlight_start":1,"text":"            Ok(Response::new(schema_result))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":45,"highlight_start":1,"text":"            // Fallback to embedding service"},{"highlight_end":78,"highlight_start":1,"text":"            self.embedding_service.get_schema(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:276:49\n    |\n276 |       ) -> Result<Response<SchemaResult>, Status> {\n    |  _________________________________________________^\n277 | |         let descriptor = request.into_inner();\n278 | |         \n279 | |         // Check if it's an inference schema request\n...   |\n291 | |         }\n292 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/inference_service.rs:276:49\n    |\n276 |       ) -> Result<Response<SchemaResult>, Status> {\n    |  _________________________________________________^\n277 | |         let descriptor = request.into_inner();\n278 | |         \n279 | |         // Check if it's an inference schema request\n...   |\n291 | |         }\n292 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:276:49: 292:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11225239573954338058.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":10714,"byte_start":9891,"column_end":6,"column_start":49,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":292,"line_start":276,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"    ) -> Result<Response<SchemaResult>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":53,"highlight_start":1,"text":"        // Check if it's an inference schema request"},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":50,"highlight_start":1,"text":"            let schema = self.inference_schema();"},{"highlight_end":80,"highlight_start":1,"text":"            let schema_message = arrow_ipc::writer::IpcWriteOptions::default();"},{"highlight_end":79,"highlight_start":1,"text":"            let encoded_data = arrow_ipc::writer::IpcDataGenerator::default();"},{"highlight_end":89,"highlight_start":1,"text":"            let encoded_schema = encoded_data.schema_to_bytes(&schema, &schema_message);"},{"highlight_end":66,"highlight_start":1,"text":"            let schema_bytes = encoded_schema.ipc_message.into();"},{"highlight_end":71,"highlight_start":1,"text":"            let schema_result = SchemaResult { schema: schema_bytes };"},{"highlight_end":45,"highlight_start":1,"text":"            Ok(Response::new(schema_result))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":45,"highlight_start":1,"text":"            // Fallback to embedding service"},{"highlight_end":78,"highlight_start":1,"text":"            self.embedding_service.get_schema(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:276:49: 292:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11225239573954338058.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":10714,"byte_start":9891,"column_end":6,"column_start":49,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":292,"line_start":276,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":49,"text":"    ) -> Result<Response<SchemaResult>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":53,"highlight_start":1,"text":"        // Check if it's an inference schema request"},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":50,"highlight_start":1,"text":"            let schema = self.inference_schema();"},{"highlight_end":80,"highlight_start":1,"text":"            let schema_message = arrow_ipc::writer::IpcWriteOptions::default();"},{"highlight_end":79,"highlight_start":1,"text":"            let encoded_data = arrow_ipc::writer::IpcDataGenerator::default();"},{"highlight_end":89,"highlight_start":1,"text":"            let encoded_schema = encoded_data.schema_to_bytes(&schema, &schema_message);"},{"highlight_end":66,"highlight_start":1,"text":"            let schema_bytes = encoded_schema.ipc_message.into();"},{"highlight_end":71,"highlight_start":1,"text":"            let schema_result = SchemaResult { schema: schema_bytes };"},{"highlight_end":45,"highlight_start":1,"text":"            Ok(Response::new(schema_result))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":45,"highlight_start":1,"text":"            // Fallback to embedding service"},{"highlight_end":78,"highlight_start":1,"text":"            self.embedding_service.get_schema(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:298:26\n    |\n298 |     ) -> Result<Response<Self::DoPutStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoPutStream`\n...\n964 |         type DoPutStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`","rendered":null,"spans":[{"byte_end":41110,"byte_start":41099,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":964,"line_start":964,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoPutStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoPutStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":10876,"byte_start":10872,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":298,"line_start":298,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoPutStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:298:26\n    |\n298 |     ) -> Result<Response<Self::DoPutStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoPutStream`\n...\n964 |         type DoPutStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`","rendered":null,"spans":[{"byte_end":41110,"byte_start":41099,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":964,"line_start":964,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoPutStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoPutStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":10876,"byte_start":10872,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":298,"line_start":298,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoPutStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n    --> src/api/inference_service.rs:306:26\n     |\n306  |     ) -> Result<Response<Self::ListActionsStream>, Status> {\n     |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n     |\n     = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n     = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n     |\n18   | pub struct Opaque {\n     |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n    --> src/storage/vdb/openvdb_bindings.rs:21:14\n     |\n21   |         type LoRAGrid;\n     |              ^^^^^^^^\n     = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n    --> src/storage/vdb/openvdb_bindings.rs:71:12\n     |\n71   | pub struct OpenVDBLoRAAdapter {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n     = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n    --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n    --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n     |\n211  | pub struct HashMap<K, V, S = RandomState> {\n     |            ^^^^^^^\n     = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n     = note: 1 redundant requirement hidden\n     = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n    --> src/storage/vdb/hardware_accelerated.rs:241:12\n     |\n241  | pub struct HardwareVDBStorage {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n    --> src/api/mod.rs:31:12\n     |\n31   | pub struct ApiState {\n     |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n    --> src/api/inference_service.rs:83:12\n     |\n83   | pub struct InferenceFlightService {\n     |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n     |\n861  |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n     |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListActionsStream`\n...\n1014 |         type ListActionsStream: tonic::codegen::tokio_stream::Stream<\n     |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`","rendered":null,"spans":[{"byte_end":43900,"byte_start":43883,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":1014,"line_start":1014,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListActionsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListActionsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":11108,"byte_start":11104,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":306,"line_start":306,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListActionsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n    --> src/api/inference_service.rs:306:26\n     |\n306  |     ) -> Result<Response<Self::ListActionsStream>, Status> {\n     |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n     |\n     = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n     = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n     |\n18   | pub struct Opaque {\n     |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n    --> src/storage/vdb/openvdb_bindings.rs:21:14\n     |\n21   |         type LoRAGrid;\n     |              ^^^^^^^^\n     = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n    --> src/storage/vdb/openvdb_bindings.rs:71:12\n     |\n71   | pub struct OpenVDBLoRAAdapter {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n     = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n    --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n    --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n     |\n211  | pub struct HashMap<K, V, S = RandomState> {\n     |            ^^^^^^^\n     = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n     = note: 1 redundant requirement hidden\n     = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n    --> src/storage/vdb/hardware_accelerated.rs:241:12\n     |\n241  | pub struct HardwareVDBStorage {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n    --> src/api/mod.rs:31:12\n     |\n31   | pub struct ApiState {\n     |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n    --> src/api/inference_service.rs:83:12\n     |\n83   | pub struct InferenceFlightService {\n     |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n     |\n861  |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n     |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListActionsStream`\n...\n1014 |         type ListActionsStream: tonic::codegen::tokio_stream::Stream<\n     |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`","rendered":null,"spans":[{"byte_end":43900,"byte_start":43883,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":1014,"line_start":1014,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListActionsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListActionsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":11108,"byte_start":11104,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":306,"line_start":306,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListActionsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:330:26\n    |\n330 |     ) -> Result<Response<Self::DoActionStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoActionStream`\n...\n997 |         type DoActionStream: tonic::codegen::tokio_stream::Stream<\n    |              -------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`","rendered":null,"spans":[{"byte_end":42975,"byte_start":42961,"column_end":28,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":997,"line_start":997,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":14,"text":"        type DoActionStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoActionStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":11918,"byte_start":11914,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":330,"line_start":330,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoActionStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:330:26\n    |\n330 |     ) -> Result<Response<Self::DoActionStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoActionStream`\n...\n997 |         type DoActionStream: tonic::codegen::tokio_stream::Stream<\n    |              -------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`","rendered":null,"spans":[{"byte_end":42975,"byte_start":42961,"column_end":28,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":997,"line_start":997,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":14,"text":"        type DoActionStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoActionStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":11918,"byte_start":11914,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":330,"line_start":330,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoActionStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `TrainingStats: Serialize` is not satisfied\n    --> src/api/inference_service.rs:352:46\n     |\n352  |                     body: serde_json::to_vec(&stats)\n     |                           ------------------ ^^^^^^ the trait `Serialize` is not implemented for `TrainingStats`\n     |                           |\n     |                           required by a bound introduced by this call\n     |\n     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `TrainingStats` type\n     = note: for types from other crates check whether the crate offers a `serde` feature flag\n     = help: the following other types implement trait `Serialize`:\n               &'a T\n               &'a mut T\n               ()\n               (T,)\n               (T0, T1)\n               (T0, T1, T2)\n               (T0, T1, T2, T3)\n               (T0, T1, T2, T3, T4)\n             and 315 others\nnote: required by a bound in `to_vec`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/src/ser.rs:2179:17\n     |\n2177 | pub fn to_vec<T>(value: &T) -> Result<Vec<u8>>\n     |        ------ required by a bound in this function\n2178 | where\n2179 |     T: ?Sized + Serialize,\n     |                 ^^^^^^^^^ required by this bound in `to_vec`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"for local types consider adding `#[derive(serde::Serialize)]` to your `TrainingStats` type","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"for types from other crates check whether the crate offers a `serde` feature flag","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Serialize`:\n  &'a T\n  &'a mut T\n  ()\n  (T,)\n  (T0, T1)\n  (T0, T1, T2)\n  (T0, T1, T2, T3)\n  (T0, T1, T2, T3, T4)\nand 315 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `to_vec`","rendered":null,"spans":[{"byte_end":60413,"byte_start":60407,"column_end":14,"column_start":8,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/src/ser.rs","is_primary":false,"label":"required by a bound in this function","line_end":2177,"line_start":2177,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":8,"text":"pub fn to_vec<T>(value: &T) -> Result<Vec<u8>>"}]},{"byte_end":60478,"byte_start":60469,"column_end":26,"column_start":17,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.136/src/ser.rs","is_primary":true,"label":"required by this bound in `to_vec`","line_end":2179,"line_start":2179,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":17,"text":"    T: ?Sized + Serialize,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `TrainingStats: Serialize` is not satisfied","spans":[{"byte_end":12900,"byte_start":12894,"column_end":52,"column_start":46,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"the trait `Serialize` is not implemented for `TrainingStats`","line_end":352,"line_start":352,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":46,"text":"                    body: serde_json::to_vec(&stats)"}]},{"byte_end":12893,"byte_start":12875,"column_end":45,"column_start":27,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":352,"line_start":352,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":27,"text":"                    body: serde_json::to_vec(&stats)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:372:26\n    |\n372 |     ) -> Result<Response<Self::DoExchangeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoExchangeStream`\n...\n981 |         type DoExchangeStream: tonic::codegen::tokio_stream::Stream<\n    |              ---------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`","rendered":null,"spans":[{"byte_end":42101,"byte_start":42085,"column_end":30,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":981,"line_start":981,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":14,"text":"        type DoExchangeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoExchangeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":13547,"byte_start":13543,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":372,"line_start":372,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoExchangeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:372:26\n    |\n372 |     ) -> Result<Response<Self::DoExchangeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoExchangeStream`\n...\n981 |         type DoExchangeStream: tonic::codegen::tokio_stream::Stream<\n    |              ---------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`","rendered":null,"spans":[{"byte_end":42101,"byte_start":42085,"column_end":30,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":981,"line_start":981,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":14,"text":"        type DoExchangeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoExchangeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":13547,"byte_start":13543,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":372,"line_start":372,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoExchangeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:380:47\n    |\n380 |       ) -> Result<Response<FlightInfo>, Status> {\n    |  _______________________________________________^\n381 | |         let descriptor = request.into_inner();\n382 | |         \n383 | |         if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {\n...   |\n395 | |         }\n396 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/inference_service.rs:380:47\n    |\n380 |       ) -> Result<Response<FlightInfo>, Status> {\n    |  _______________________________________________^\n381 | |         let descriptor = request.into_inner();\n382 | |         \n383 | |         if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {\n...   |\n395 | |         }\n396 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:380:47: 396:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-933929714780910758.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":14483,"byte_start":13827,"column_end":6,"column_start":47,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":396,"line_start":380,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":47,"text":"    ) -> Result<Response<FlightInfo>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":52,"highlight_start":1,"text":"            let mut flight_info = FlightInfo::new()"},{"highlight_end":45,"highlight_start":1,"text":"                .with_descriptor(descriptor)"},{"highlight_end":40,"highlight_start":1,"text":"                .with_total_records(-1)"},{"highlight_end":39,"highlight_start":1,"text":"                .with_total_bytes(-1);"},{"highlight_end":17,"highlight_start":1,"text":"                "},{"highlight_end":80,"highlight_start":1,"text":"            flight_info = flight_info.try_with_schema(&self.inference_schema())"},{"highlight_end":89,"highlight_start":1,"text":"                .map_err(|e| Status::internal(format!(\"Failed to set schema: {}\", e)))?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"            Ok(Response::new(flight_info))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":83,"highlight_start":1,"text":"            self.embedding_service.get_flight_info(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:380:47: 396:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-933929714780910758.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":14483,"byte_start":13827,"column_end":6,"column_start":47,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":396,"line_start":380,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":47,"text":"    ) -> Result<Response<FlightInfo>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":52,"highlight_start":1,"text":"            let mut flight_info = FlightInfo::new()"},{"highlight_end":45,"highlight_start":1,"text":"                .with_descriptor(descriptor)"},{"highlight_end":40,"highlight_start":1,"text":"                .with_total_records(-1)"},{"highlight_end":39,"highlight_start":1,"text":"                .with_total_bytes(-1);"},{"highlight_end":17,"highlight_start":1,"text":"                "},{"highlight_end":80,"highlight_start":1,"text":"            flight_info = flight_info.try_with_schema(&self.inference_schema())"},{"highlight_end":89,"highlight_start":1,"text":"                .map_err(|e| Status::internal(format!(\"Failed to set schema: {}\", e)))?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"            Ok(Response::new(flight_info))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":83,"highlight_start":1,"text":"            self.embedding_service.get_flight_info(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:380:47\n    |\n380 |       ) -> Result<Response<FlightInfo>, Status> {\n    |  _______________________________________________^\n381 | |         let descriptor = request.into_inner();\n382 | |         \n383 | |         if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {\n...   |\n395 | |         }\n396 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/inference_service.rs:380:47\n    |\n380 |       ) -> Result<Response<FlightInfo>, Status> {\n    |  _______________________________________________^\n381 | |         let descriptor = request.into_inner();\n382 | |         \n383 | |         if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {\n...   |\n395 | |         }\n396 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:380:47: 396:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-933929714780910758.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":14483,"byte_start":13827,"column_end":6,"column_start":47,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":396,"line_start":380,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":47,"text":"    ) -> Result<Response<FlightInfo>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":52,"highlight_start":1,"text":"            let mut flight_info = FlightInfo::new()"},{"highlight_end":45,"highlight_start":1,"text":"                .with_descriptor(descriptor)"},{"highlight_end":40,"highlight_start":1,"text":"                .with_total_records(-1)"},{"highlight_end":39,"highlight_start":1,"text":"                .with_total_bytes(-1);"},{"highlight_end":17,"highlight_start":1,"text":"                "},{"highlight_end":80,"highlight_start":1,"text":"            flight_info = flight_info.try_with_schema(&self.inference_schema())"},{"highlight_end":89,"highlight_start":1,"text":"                .map_err(|e| Status::internal(format!(\"Failed to set schema: {}\", e)))?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"            Ok(Response::new(flight_info))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":83,"highlight_start":1,"text":"            self.embedding_service.get_flight_info(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:380:47: 396:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<...>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-933929714780910758.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":14483,"byte_start":13827,"column_end":6,"column_start":47,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":396,"line_start":380,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":47,"text":"    ) -> Result<Response<FlightInfo>, Status> {"},{"highlight_end":47,"highlight_start":1,"text":"        let descriptor = request.into_inner();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":77,"highlight_start":1,"text":"        if descriptor.path.get(0).map(|p| p.as_str()) == Some(\"inference\") {"},{"highlight_end":52,"highlight_start":1,"text":"            let mut flight_info = FlightInfo::new()"},{"highlight_end":45,"highlight_start":1,"text":"                .with_descriptor(descriptor)"},{"highlight_end":40,"highlight_start":1,"text":"                .with_total_records(-1)"},{"highlight_end":39,"highlight_start":1,"text":"                .with_total_bytes(-1);"},{"highlight_end":17,"highlight_start":1,"text":"                "},{"highlight_end":80,"highlight_start":1,"text":"            flight_info = flight_info.try_with_schema(&self.inference_schema())"},{"highlight_end":89,"highlight_start":1,"text":"                .map_err(|e| Status::internal(format!(\"Failed to set schema: {}\", e)))?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"            Ok(Response::new(flight_info))"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":83,"highlight_start":1,"text":"            self.embedding_service.get_flight_info(Request::new(descriptor)).await"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/inference_service.rs:402:59\n    |\n402 |       ) -> Result<Response<arrow_flight::PollInfo>, Status> {\n    |  ___________________________________________________________^\n403 | |         self.embedding_service.poll_flight_info(request).await\n404 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/inference_service.rs:402:59\n    |\n402 |       ) -> Result<Response<arrow_flight::PollInfo>, Status> {\n    |  ___________________________________________________________^\n403 | |         self.embedding_service.poll_flight_info(request).await\n404 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:402:59: 404:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<PollInfo>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-5601238533004964624.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":14746,"byte_start":14676,"column_end":6,"column_start":59,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":404,"line_start":402,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":59,"text":"    ) -> Result<Response<arrow_flight::PollInfo>, Status> {"},{"highlight_end":63,"highlight_start":1,"text":"        self.embedding_service.poll_flight_info(request).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:402:59: 404:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<PollInfo>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-5601238533004964624.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":14746,"byte_start":14676,"column_end":6,"column_start":59,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":404,"line_start":402,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":59,"text":"    ) -> Result<Response<arrow_flight::PollInfo>, Status> {"},{"highlight_end":63,"highlight_start":1,"text":"        self.embedding_service.poll_flight_info(request).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/inference_service.rs:402:59\n    |\n402 |       ) -> Result<Response<arrow_flight::PollInfo>, Status> {\n    |  ___________________________________________________________^\n403 | |         self.embedding_service.poll_flight_info(request).await\n404 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required because it appears within the type `api::inference_service::InferenceFlightService`\n   --> src/api/inference_service.rs:83:12\n    |\n83  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/api/inference_service.rs:402:59\n    |\n402 |       ) -> Result<Response<arrow_flight::PollInfo>, Status> {\n    |  ___________________________________________________________^\n403 | |         self.embedding_service.poll_flight_info(request).await\n404 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:402:59: 404:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<PollInfo>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-5601238533004964624.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `api::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":2207,"byte_start":2185,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":83,"line_start":83,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&api::inference_service::InferenceFlightService` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":14746,"byte_start":14676,"column_end":6,"column_start":59,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":404,"line_start":402,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":59,"text":"    ) -> Result<Response<arrow_flight::PollInfo>, Status> {"},{"highlight_end":63,"highlight_start":1,"text":"        self.embedding_service.poll_flight_info(request).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/api/inference_service.rs:402:59: 404:6}>>` to `Pin<Box<dyn Future<Output = Result<Response<PollInfo>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-5601238533004964624.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":14746,"byte_start":14676,"column_end":6,"column_start":59,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":404,"line_start":402,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":59,"text":"    ) -> Result<Response<arrow_flight::PollInfo>, Status> {"},{"highlight_end":63,"highlight_start":1,"text":"        self.embedding_service.poll_flight_info(request).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::Json<CreateLoRARequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<CreateLoRAResponse>, axum::http::StatusCode>> {create_lora_layer}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:127:40\n    |\n127 |         .route(\"/v1/lora/create\", post(create_lora_layer))\n    |                                   ---- ^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Json<...>) -> ... {create_lora_layer}`\n    |                                   |\n    |                                   required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-17313025751475902468.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-17313025751475902468.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::Json<CreateLoRARequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<CreateLoRAResponse>, axum::http::StatusCode>> {create_lora_layer}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3398,"byte_start":3381,"column_end":57,"column_start":40,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Json<...>) -> ... {create_lora_layer}`","line_end":127,"line_start":127,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":40,"text":"        .route(\"/v1/lora/create\", post(create_lora_layer))"}]},{"byte_end":3380,"byte_start":3376,"column_end":39,"column_start":35,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":127,"line_start":127,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":35,"text":"        .route(\"/v1/lora/create\", post(create_lora_layer))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<LoRALayer>>, axum::http::StatusCode>> {list_lora_layers}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:128:37\n    |\n128 |         .route(\"/v1/lora/list\", get(list_lora_layers))\n    |                                 --- ^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>) -> impl Future<Output = ...> {list_lora_layers}`\n    |                                 |\n    |                                 required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-3781336717140774364.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-3781336717140774364.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>) -> impl futures::Future<Output = std::result::Result<axum::Json<Vec<LoRALayer>>, axum::http::StatusCode>> {list_lora_layers}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3453,"byte_start":3437,"column_end":53,"column_start":37,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>) -> impl Future<Output = ...> {list_lora_layers}`","line_end":128,"line_start":128,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":53,"highlight_start":37,"text":"        .route(\"/v1/lora/list\", get(list_lora_layers))"}]},{"byte_end":3436,"byte_start":3433,"column_end":36,"column_start":33,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":128,"line_start":128,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":33,"text":"        .route(\"/v1/lora/list\", get(list_lora_layers))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<LoRALayer>, axum::http::StatusCode>> {get_lora_info}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:129:46\n    |\n129 |         .route(\"/v1/lora/:lora_id/info\", get(get_lora_info))\n    |                                          --- ^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {get_lora_info}`\n    |                                          |\n    |                                          required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2485227858105388768.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2485227858105388768.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<LoRALayer>, axum::http::StatusCode>> {get_lora_info}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3514,"byte_start":3501,"column_end":59,"column_start":46,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {get_lora_info}`","line_end":129,"line_start":129,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":46,"text":"        .route(\"/v1/lora/:lora_id/info\", get(get_lora_info))"}]},{"byte_end":3500,"byte_start":3497,"column_end":45,"column_start":42,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":129,"line_start":129,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":42,"text":"        .route(\"/v1/lora/:lora_id/info\", get(get_lora_info))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {delete_lora_layer}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:130:49\n    |\n130 |         .route(\"/v1/lora/:lora_id/delete\", post(delete_lora_layer))\n    |                                            ---- ^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {delete_lora_layer}`\n    |                                            |\n    |                                            required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13525115566875121485.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13525115566875121485.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {delete_lora_layer}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3582,"byte_start":3565,"column_end":66,"column_start":49,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {delete_lora_layer}`","line_end":130,"line_start":130,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":49,"text":"        .route(\"/v1/lora/:lora_id/delete\", post(delete_lora_layer))"}]},{"byte_end":3564,"byte_start":3560,"column_end":48,"column_start":44,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":130,"line_start":130,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":44,"text":"        .route(\"/v1/lora/:lora_id/delete\", post(delete_lora_layer))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<Vec<TrainingSample>>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {trigger_training}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:131:48\n    |\n131 |         .route(\"/v1/lora/:lora_id/train\", post(trigger_training))\n    |                                           ---- ^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, Json<...>) -> ... {trigger_training}`\n    |                                           |\n    |                                           required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-16610737924895987369.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-16610737924895987369.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<Vec<TrainingSample>>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {trigger_training}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3648,"byte_start":3632,"column_end":64,"column_start":48,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, Json<...>) -> ... {trigger_training}`","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":64,"highlight_start":48,"text":"        .route(\"/v1/lora/:lora_id/train\", post(trigger_training))"}]},{"byte_end":3631,"byte_start":3627,"column_end":47,"column_start":43,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":131,"line_start":131,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":43,"text":"        .route(\"/v1/lora/:lora_id/train\", post(trigger_training))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<LoRAStats>, axum::http::StatusCode>> {get_lora_stats}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:132:47\n    |\n132 |         .route(\"/v1/lora/:lora_id/stats\", get(get_lora_stats))\n    |                                           --- ^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {get_lora_stats}`\n    |                                           |\n    |                                           required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-4076892515069657187.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-4076892515069657187.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<LoRAStats>, axum::http::StatusCode>> {get_lora_stats}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3711,"byte_start":3697,"column_end":61,"column_start":47,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {get_lora_stats}`","line_end":132,"line_start":132,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":47,"text":"        .route(\"/v1/lora/:lora_id/stats\", get(get_lora_stats))"}]},{"byte_end":3696,"byte_start":3693,"column_end":46,"column_start":43,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":132,"line_start":132,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":43,"text":"        .route(\"/v1/lora/:lora_id/stats\", get(get_lora_stats))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<ChatCompletionRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<ChatCompletionResponse>, axum::http::StatusCode>> {openai_chat_completions}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:135:64\n    |\n135 |         .route(\"/v1/inference/:lora_id/chat/completions\", post(openai_chat_completions))\n    |                                                           ---- ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<...>, ...) -> ... {openai_chat_completions}`\n    |                                                           |\n    |                                                           required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-16957607757298240946.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-16957607757298240946.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<ChatCompletionRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<ChatCompletionResponse>, axum::http::StatusCode>> {openai_chat_completions}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3882,"byte_start":3859,"column_end":87,"column_start":64,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<...>, ...) -> ... {openai_chat_completions}`","line_end":135,"line_start":135,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":87,"highlight_start":64,"text":"        .route(\"/v1/inference/:lora_id/chat/completions\", post(openai_chat_completions))"}]},{"byte_end":3858,"byte_start":3854,"column_end":63,"column_start":59,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":135,"line_start":135,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":59,"text":"        .route(\"/v1/inference/:lora_id/chat/completions\", post(openai_chat_completions))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<CompletionRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<CompletionResponse>, axum::http::StatusCode>> {openai_completions}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:136:59\n    |\n136 |         .route(\"/v1/inference/:lora_id/completions\", post(openai_completions))\n    |                                                      ---- ^^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, ...) -> ... {openai_completions}`\n    |                                                      |\n    |                                                      required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-12980406479798576740.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-12980406479798576740.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<CompletionRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<CompletionResponse>, axum::http::StatusCode>> {openai_completions}: Handler<_, _>` is not satisfied","spans":[{"byte_end":3961,"byte_start":3943,"column_end":77,"column_start":59,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, ...) -> ... {openai_completions}`","line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":59,"text":"        .route(\"/v1/inference/:lora_id/completions\", post(openai_completions))"}]},{"byte_end":3942,"byte_start":3938,"column_end":58,"column_start":54,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":136,"line_start":136,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":54,"text":"        .route(\"/v1/inference/:lora_id/completions\", post(openai_completions))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<EmbeddingRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<EmbeddingResponse>, axum::http::StatusCode>> {openai_embeddings}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:137:58\n    |\n137 |         .route(\"/v1/inference/:lora_id/embeddings\", post(openai_embeddings))\n    |                                                     ---- ^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, ...) -> ... {openai_embeddings}`\n    |                                                     |\n    |                                                     required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11037449899613261985.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-11037449899613261985.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<EmbeddingRequest>) -> impl futures::Future<Output = std::result::Result<axum::Json<EmbeddingResponse>, axum::http::StatusCode>> {openai_embeddings}: Handler<_, _>` is not satisfied","spans":[{"byte_end":4038,"byte_start":4021,"column_end":75,"column_start":58,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, ...) -> ... {openai_embeddings}`","line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":75,"highlight_start":58,"text":"        .route(\"/v1/inference/:lora_id/embeddings\", post(openai_embeddings))"}]},{"byte_end":4020,"byte_start":4016,"column_end":57,"column_start":53,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":53,"text":"        .route(\"/v1/inference/:lora_id/embeddings\", post(openai_embeddings))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<ListModelsResponse>, axum::http::StatusCode>> {openai_list_models}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:138:53\n    |\n138 |         .route(\"/v1/inference/:lora_id/models\", get(openai_list_models))\n    |                                                 --- ^^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {openai_list_models}`\n    |                                                 |\n    |                                                 required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-822451535383179902.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-822451535383179902.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<ListModelsResponse>, axum::http::StatusCode>> {openai_list_models}: Handler<_, _>` is not satisfied","spans":[{"byte_end":4111,"byte_start":4093,"column_end":71,"column_start":53,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {openai_list_models}`","line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":53,"text":"        .route(\"/v1/inference/:lora_id/models\", get(openai_list_models))"}]},{"byte_end":4092,"byte_start":4089,"column_end":52,"column_start":49,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":138,"line_start":138,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":52,"highlight_start":49,"text":"        .route(\"/v1/inference/:lora_id/models\", get(openai_list_models))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<TrainingConfig>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {start_auto_training}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:141:52\n    |\n141 |         .route(\"/v1/training/:lora_id/start\", post(start_auto_training))\n    |                                               ---- ^^^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, ...) -> ... {start_auto_training}`\n    |                                               |\n    |                                               required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-9172581592297114163.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-9172581592297114163.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>, axum::Json<TrainingConfig>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {start_auto_training}: Handler<_, _>` is not satisfied","spans":[{"byte_end":4223,"byte_start":4204,"column_end":71,"column_start":52,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>, ...) -> ... {start_auto_training}`","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":71,"highlight_start":52,"text":"        .route(\"/v1/training/:lora_id/start\", post(start_auto_training))"}]},{"byte_end":4203,"byte_start":4199,"column_end":51,"column_start":47,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":141,"line_start":141,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":47,"text":"        .route(\"/v1/training/:lora_id/start\", post(start_auto_training))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {stop_auto_training}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:142:51\n    |\n142 |         .route(\"/v1/training/:lora_id/stop\", post(stop_auto_training))\n    |                                              ---- ^^^^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {stop_auto_training}`\n    |                                              |\n    |                                              required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2053986925117032013.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `post`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:443:1\n    |\n443 | top_level_handler_fn!(post, POST);\n    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `post`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2053986925117032013.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `post`","rendered":null,"spans":[{"byte_end":12743,"byte_start":12739,"column_end":27,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":23,"text":"top_level_handler_fn!(post, POST);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":4524,"byte_start":4296,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12750,"byte_start":12717,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":443,"line_start":443,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"top_level_handler_fn!(post, POST);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":156,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":97,"highlight_start":1,"text":"            #[doc = concat!(\"Route `\", stringify!($method) ,\"` requests to the given handler.\")]"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":44,"highlight_start":1,"text":"            /// See [`get`] for an example."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":20,"highlight_start":1,"text":"            $method"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `post`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<serde_json::Value>, axum::http::StatusCode>> {stop_auto_training}: Handler<_, _>` is not satisfied","spans":[{"byte_end":4294,"byte_start":4276,"column_end":69,"column_start":51,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {stop_auto_training}`","line_end":142,"line_start":142,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":51,"text":"        .route(\"/v1/training/:lora_id/stop\", post(stop_auto_training))"}]},{"byte_end":4275,"byte_start":4271,"column_end":50,"column_start":46,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":142,"line_start":142,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":46,"text":"        .route(\"/v1/training/:lora_id/stop\", post(stop_auto_training))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<TrainingStatus>, axum::http::StatusCode>> {training_status}: Handler<_, _>` is not satisfied\n   --> src/api/mod.rs:143:52\n    |\n143 |         .route(\"/v1/training/:lora_id/status\", get(training_status))\n    |                                                --- ^^^^^^^^^^^^^^^ the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {training_status}`\n    |                                                |\n    |                                                required by a bound introduced by this call\n    |\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13941386033827528161.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n    = note: Consider using `#[axum::debug_handler]` to improve the error message\n    = help: the following other types implement trait `Handler<T, S>`:\n              `Layered<L, H, T, S>` implements `Handler<T, S>`\n              `MethodRouter<S>` implements `Handler<(), S>`\nnote: required by a bound in `axum::routing::get`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs:439:1\n    |\n439 | top_level_handler_fn!(get, GET);\n    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^\n    | |                     |\n    | |                     required by a bound in this function\n    | required by this bound in `get`\n    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13941386033827528161.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"Consider using `#[axum::debug_handler]` to improve the error message","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Handler<T, S>`:\n  `Layered<L, H, T, S>` implements `Handler<T, S>`\n  `MethodRouter<S>` implements `Handler<(), S>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `axum::routing::get`","rendered":null,"spans":[{"byte_end":12596,"byte_start":12593,"column_end":26,"column_start":23,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":"required by a bound in this function","line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":23,"text":"top_level_handler_fn!(get, GET);"}]},{"byte_end":4742,"byte_start":4729,"column_end":29,"column_start":16,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":3889,"byte_start":3096,"column_end":10,"column_start":9,"expansion":{"def_site_span":{"byte_end":3043,"byte_start":3010,"column_end":34,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":104,"line_start":104,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":1,"text":"macro_rules! top_level_handler_fn {"}]},"macro_decl_name":"top_level_handler_fn!","span":{"byte_end":12602,"byte_start":12571,"column_end":32,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":439,"line_start":439,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":1,"text":"top_level_handler_fn!(get, GET);"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":false,"label":null,"line_end":131,"line_start":108,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":9,"text":"        top_level_handler_fn!("},{"highlight_end":59,"highlight_start":1,"text":"            /// Route `GET` requests to the given handler."},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":26,"highlight_start":1,"text":"            /// # Example"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":24,"highlight_start":1,"text":"            /// ```rust"},{"highlight_end":28,"highlight_start":1,"text":"            /// use axum::{"},{"highlight_end":34,"highlight_start":1,"text":"            ///     routing::get,"},{"highlight_end":28,"highlight_start":1,"text":"            ///     Router,"},{"highlight_end":19,"highlight_start":1,"text":"            /// };"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":38,"highlight_start":1,"text":"            /// async fn handler() {}"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":61,"highlight_start":1,"text":"            /// // Requests to `GET /` will go to `handler`."},{"highlight_end":66,"highlight_start":1,"text":"            /// let app = Router::new().route(\"/\", get(handler));"},{"highlight_end":39,"highlight_start":1,"text":"            /// # let _: Router = app;"},{"highlight_end":20,"highlight_start":1,"text":"            /// ```"},{"highlight_end":16,"highlight_start":1,"text":"            ///"},{"highlight_end":93,"highlight_start":1,"text":"            /// Note that `get` routes will also be called for `HEAD` requests but will have"},{"highlight_end":83,"highlight_start":1,"text":"            /// the response body removed. Make sure to add explicit `HEAD` routes"},{"highlight_end":28,"highlight_start":1,"text":"            /// afterwards."},{"highlight_end":19,"highlight_start":1,"text":"            $name,"},{"highlight_end":16,"highlight_start":1,"text":"            GET"},{"highlight_end":10,"highlight_start":1,"text":"        );"}]}},"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/method_routing.rs","is_primary":true,"label":"required by this bound in `get`","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":16,"text":"            H: Handler<T, S>,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `fn(axum::extract::State<ApiState>, axum::extract::Path<std::string::String>) -> impl futures::Future<Output = std::result::Result<axum::Json<TrainingStatus>, axum::http::StatusCode>> {training_status}: Handler<_, _>` is not satisfied","spans":[{"byte_end":4363,"byte_start":4348,"column_end":67,"column_start":52,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(State<ApiState>, Path<String>) -> ... {training_status}`","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":67,"highlight_start":52,"text":"        .route(\"/v1/training/:lora_id/status\", get(training_status))"}]},{"byte_end":4347,"byte_start":4344,"column_end":51,"column_start":48,"expansion":null,"file_name":"src/api/mod.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":143,"line_start":143,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":48,"text":"        .route(\"/v1/training/:lora_id/status\", get(training_status))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/api/mod.rs:125:5\n    |\n125 |     Router::new()\n    |     ^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required by a bound in `AxumRouter::<S>::new`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs:133:16\n    |\n133 |     S: Clone + Send + Sync + 'static,\n    |                ^^^^ required by this bound in `Router::<S>::new`\n...\n139 |     pub fn new() -> Self {\n    |            --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `AxumRouter::<S>::new`","rendered":null,"spans":[{"byte_end":3553,"byte_start":3550,"column_end":15,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new() -> Self {"}]},{"byte_end":3374,"byte_start":3370,"column_end":20,"column_start":16,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":"required by this bound in `Router::<S>::new`","line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":16,"text":"    S: Clone + Send + Sync + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":3304,"byte_start":3291,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    Router::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/api/mod.rs:125:5\n    |\n125 |     Router::new()\n    |     ^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `ApiState`\n   --> src/api/mod.rs:31:12\n    |\n31  | pub struct ApiState {\n    |            ^^^^^^^^\nnote: required by a bound in `AxumRouter::<S>::new`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs:133:16\n    |\n133 |     S: Clone + Send + Sync + 'static,\n    |                ^^^^ required by this bound in `Router::<S>::new`\n...\n139 |     pub fn new() -> Self {\n    |            --- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ApiState`","rendered":null,"spans":[{"byte_end":793,"byte_start":785,"column_end":20,"column_start":12,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":null,"line_end":31,"line_start":31,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":12,"text":"pub struct ApiState {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `AxumRouter::<S>::new`","rendered":null,"spans":[{"byte_end":3553,"byte_start":3550,"column_end":15,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":139,"line_start":139,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":15,"highlight_start":12,"text":"    pub fn new() -> Self {"}]},{"byte_end":3374,"byte_start":3370,"column_end":20,"column_start":16,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/axum-0.7.9/src/routing/mod.rs","is_primary":true,"label":"required by this bound in `Router::<S>::new`","line_end":133,"line_start":133,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":16,"text":"    S: Clone + Send + Sync + 'static,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":3304,"byte_start":3291,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/api/mod.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":125,"line_start":125,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"    Router::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `WeightMap: Clone` is not satisfied\n  --> src/inference/model_loader.rs:19:5\n   |\n10 | #[derive(Debug, Clone)]\n   |                 ----- in this derive macro expansion\n...\n19 |     pub weight_maps: HashMap<String, WeightMap>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `WeightMap`\n   |\n   = note: required for `HashMap<std::string::String, WeightMap>` to implement `Clone`\n   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required for `HashMap<std::string::String, WeightMap>` to implement `Clone`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `WeightMap: Clone` is not satisfied","spans":[{"byte_end":495,"byte_start":452,"column_end":48,"column_start":5,"expansion":{"def_site_span":{"byte_end":5973,"byte_start":5958,"column_end":16,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/clone.rs","is_primary":false,"label":null,"line_end":183,"line_start":183,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"pub macro Clone($item:item) {"}]},"macro_decl_name":"#[derive(Clone)]","span":{"byte_end":257,"byte_start":252,"column_end":22,"column_start":17,"expansion":null,"file_name":"src/inference/model_loader.rs","is_primary":false,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":17,"text":"#[derive(Debug, Clone)]"}]}},"file_name":"src/inference/model_loader.rs","is_primary":true,"label":"the trait `Clone` is not implemented for `WeightMap`","line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":5,"text":"    pub weight_maps: HashMap<String, WeightMap>,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:204:26\n    |\n204 |     ) -> Result<Response<Self::HandshakeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::HandshakeStream`\n862 |         /// Server streaming response type for the Handshake method.\n863 |         type HandshakeStream: tonic::codegen::tokio_stream::Stream<\n    |              --------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`","rendered":null,"spans":[{"byte_end":35504,"byte_start":35489,"column_end":29,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":863,"line_start":863,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"        type HandshakeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::HandshakeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7216,"byte_start":7212,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":204,"line_start":204,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::HandshakeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:204:26\n    |\n204 |     ) -> Result<Response<Self::HandshakeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::HandshakeStream`\n862 |         /// Server streaming response type for the Handshake method.\n863 |         type HandshakeStream: tonic::codegen::tokio_stream::Stream<\n    |              --------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::HandshakeStream`","rendered":null,"spans":[{"byte_end":35504,"byte_start":35489,"column_end":29,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":863,"line_start":863,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":14,"text":"        type HandshakeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::HandshakeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7216,"byte_start":7212,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":204,"line_start":204,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::HandshakeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:213:26\n    |\n213 |     ) -> Result<Response<Self::ListFlightsStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListFlightsStream`\n...\n878 |         type ListFlightsStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`","rendered":null,"spans":[{"byte_end":36330,"byte_start":36313,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":878,"line_start":878,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListFlightsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListFlightsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7521,"byte_start":7517,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":213,"line_start":213,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListFlightsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:213:26\n    |\n213 |     ) -> Result<Response<Self::ListFlightsStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListFlightsStream`\n...\n878 |         type ListFlightsStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListFlightsStream`","rendered":null,"spans":[{"byte_end":36330,"byte_start":36313,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":878,"line_start":878,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListFlightsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListFlightsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7521,"byte_start":7517,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":213,"line_start":213,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListFlightsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:216:25\n    |\n216 |                 schema: vec![], // Schema bytes would go here\n    |                         ^^^^^^ expected `Bytes`, found `Vec<_>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<_>`\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`\n    |\n216 |                 schema: vec![].into(), // Schema bytes would go here\n    |                               +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":7636,"byte_start":7636,"column_end":31,"column_start":31,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":31,"highlight_start":31,"text":"                schema: vec![], // Schema bytes would go here"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1509,"byte_start":1486,"column_end":32,"column_start":9,"expansion":{"def_site_span":{"byte_end":1463,"byte_start":1447,"column_end":17,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":false,"label":null,"line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"macro_rules! vec {"}]},"macro_decl_name":"vec!","span":{"byte_end":7636,"byte_start":7630,"column_end":31,"column_start":25,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":25,"text":"                schema: vec![], // Schema bytes would go here"}]}},"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<_>`","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"        $crate::vec::Vec::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:219:26\n    |\n219 |                     cmd: b\"inference\".to_vec(),\n    |                          ^^^^^^^^^^^^^^^^^^^^^ expected `Bytes`, found `Vec<u8>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<u8>`\nhelp: call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`\n    |\n219 |                     cmd: b\"inference\".to_vec().into(),\n    |                                               +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<u8>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":7811,"byte_start":7811,"column_end":47,"column_start":47,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":219,"line_start":219,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":47,"highlight_start":47,"text":"                    cmd: b\"inference\".to_vec(),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":7811,"byte_start":7790,"column_end":47,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<u8>`","line_end":219,"line_start":219,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":26,"text":"                    cmd: b\"inference\".to_vec(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `app_metadata` and `ordered` in initializer of `FlightInfo`\n   --> src/inference/inference_service.rs:215:13\n    |\n215 |             FlightInfo {\n    |             ^^^^^^^^^^ missing `app_metadata` and `ordered`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `app_metadata` and `ordered` in initializer of `FlightInfo`","spans":[{"byte_end":7603,"byte_start":7593,"column_end":23,"column_start":13,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"missing `app_metadata` and `ordered`","line_end":215,"line_start":215,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":13,"text":"            FlightInfo {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: can't compare `axum::body::Bytes` with `[u8; 9]`\n   --> src/inference/inference_service.rs:240:35\n    |\n240 |                 if descriptor.cmd == b\"inference\" {\n    |                                   ^^ no implementation for `axum::body::Bytes == [u8; 9]`\n    |\n    = help: the trait `PartialEq<[u8; 9]>` is not implemented for `axum::body::Bytes`\n    = note: required for `axum::body::Bytes` to implement `PartialEq<&[u8; 9]>`\nhelp: consider dereferencing both sides of the expression\n    |\n240 |                 if *descriptor.cmd == *b\"inference\" {\n    |                    +                  +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `PartialEq<[u8; 9]>` is not implemented for `axum::body::Bytes`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `axum::body::Bytes` to implement `PartialEq<&[u8; 9]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider dereferencing both sides of the expression","rendered":null,"spans":[{"byte_end":8395,"byte_start":8395,"column_end":20,"column_start":20,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":240,"line_start":240,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":20,"highlight_start":20,"text":"                if descriptor.cmd == b\"inference\" {"}]},{"byte_end":8413,"byte_start":8413,"column_end":38,"column_start":38,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":240,"line_start":240,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":38,"highlight_start":38,"text":"                if descriptor.cmd == b\"inference\" {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"can't compare `axum::body::Bytes` with `[u8; 9]`","spans":[{"byte_end":8412,"byte_start":8410,"column_end":37,"column_start":35,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"no implementation for `axum::body::Bytes == [u8; 9]`","line_end":240,"line_start":240,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":35,"text":"                if descriptor.cmd == b\"inference\" {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:242:33\n    |\n242 |                         schema: vec![], // Would contain actual schema\n    |                                 ^^^^^^ expected `Bytes`, found `Vec<_>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<_>`\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`\n    |\n242 |                         schema: vec![].into(), // Would contain actual schema\n    |                                       +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":8510,"byte_start":8510,"column_end":39,"column_start":39,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":242,"line_start":242,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":39,"highlight_start":39,"text":"                        schema: vec![], // Would contain actual schema"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1509,"byte_start":1486,"column_end":32,"column_start":9,"expansion":{"def_site_span":{"byte_end":1463,"byte_start":1447,"column_end":17,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":false,"label":null,"line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"macro_rules! vec {"}]},"macro_decl_name":"vec!","span":{"byte_end":8510,"byte_start":8504,"column_end":39,"column_start":33,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":242,"line_start":242,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":33,"text":"                        schema: vec![], // Would contain actual schema"}]}},"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<_>`","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"        $crate::vec::Vec::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0063]: missing fields `app_metadata` and `ordered` in initializer of `FlightInfo`\n   --> src/inference/inference_service.rs:241:32\n    |\n241 |                     let info = FlightInfo {\n    |                                ^^^^^^^^^^ missing `app_metadata` and `ordered`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0063","explanation":"A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"},"level":"error","message":"missing fields `app_metadata` and `ordered` in initializer of `FlightInfo`","spans":[{"byte_end":8469,"byte_start":8459,"column_end":42,"column_start":32,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"missing `app_metadata` and `ordered`","line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":32,"text":"                    let info = FlightInfo {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: can't compare `axum::body::Bytes` with `[u8; 9]`\n   --> src/inference/inference_service.rs:263:27\n    |\n263 |         if descriptor.cmd == b\"inference\" {\n    |                           ^^ no implementation for `axum::body::Bytes == [u8; 9]`\n    |\n    = help: the trait `PartialEq<[u8; 9]>` is not implemented for `axum::body::Bytes`\n    = note: required for `axum::body::Bytes` to implement `PartialEq<&[u8; 9]>`\nhelp: consider dereferencing both sides of the expression\n    |\n263 |         if *descriptor.cmd == *b\"inference\" {\n    |            +                  +\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `PartialEq<[u8; 9]>` is not implemented for `axum::body::Bytes`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `axum::body::Bytes` to implement `PartialEq<&[u8; 9]>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"consider dereferencing both sides of the expression","rendered":null,"spans":[{"byte_end":9139,"byte_start":9139,"column_end":12,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":263,"line_start":263,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":12,"highlight_start":12,"text":"        if descriptor.cmd == b\"inference\" {"}]},{"byte_end":9157,"byte_start":9157,"column_end":30,"column_start":30,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":263,"line_start":263,"suggested_replacement":"*","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":30,"highlight_start":30,"text":"        if descriptor.cmd == b\"inference\" {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"can't compare `axum::body::Bytes` with `[u8; 9]`","spans":[{"byte_end":9156,"byte_start":9154,"column_end":29,"column_start":27,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"no implementation for `axum::body::Bytes == [u8; 9]`","line_end":263,"line_start":263,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":27,"text":"        if descriptor.cmd == b\"inference\" {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `tonic::Status`\n   --> src/inference/inference_service.rs:275:95\n    |\n275 |                     let mut writer = arrow_ipc::writer::FileWriter::try_new(&mut buf, &schema)?;\n    |                                                                                               ^ the trait `std::convert::From<arrow_schema::ArrowError>` is not implemented for `tonic::Status`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `std::convert::From<T>`:\n              `tonic::Status` implements `std::convert::From<FlightError>`\n              `tonic::Status` implements `std::convert::From<VDBErrorWrapper>`\n              `tonic::Status` implements `std::convert::From<h2::error::Error>`\n              `tonic::Status` implements `std::convert::From<std::io::Error>`\n    = note: required for `std::result::Result<tonic::Response<SchemaResult>, tonic::Status>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `std::convert::From<T>`:\n  `tonic::Status` implements `std::convert::From<FlightError>`\n  `tonic::Status` implements `std::convert::From<VDBErrorWrapper>`\n  `tonic::Status` implements `std::convert::From<h2::error::Error>`\n  `tonic::Status` implements `std::convert::From<std::io::Error>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `std::result::Result<tonic::Response<SchemaResult>, tonic::Status>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `tonic::Status`","spans":[{"byte_end":9748,"byte_start":9747,"column_end":96,"column_start":95,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":9748,"byte_start":9747,"column_end":96,"column_start":95,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":275,"line_start":275,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":96,"highlight_start":95,"text":"                    let mut writer = arrow_ipc::writer::FileWriter::try_new(&mut buf, &schema)?;"}]}},"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"the trait `std::convert::From<arrow_schema::ArrowError>` is not implemented for `tonic::Status`","line_end":275,"line_start":275,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":96,"highlight_start":95,"text":"                    let mut writer = arrow_ipc::writer::FileWriter::try_new(&mut buf, &schema)?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `?` couldn't convert the error to `tonic::Status`\n   --> src/inference/inference_service.rs:276:36\n    |\n276 |                     writer.finish()?;\n    |                                    ^ the trait `std::convert::From<arrow_schema::ArrowError>` is not implemented for `tonic::Status`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following other types implement trait `std::convert::From<T>`:\n              `tonic::Status` implements `std::convert::From<FlightError>`\n              `tonic::Status` implements `std::convert::From<VDBErrorWrapper>`\n              `tonic::Status` implements `std::convert::From<h2::error::Error>`\n              `tonic::Status` implements `std::convert::From<std::io::Error>`\n    = note: required for `std::result::Result<tonic::Response<SchemaResult>, tonic::Status>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `std::convert::From<T>`:\n  `tonic::Status` implements `std::convert::From<FlightError>`\n  `tonic::Status` implements `std::convert::From<VDBErrorWrapper>`\n  `tonic::Status` implements `std::convert::From<h2::error::Error>`\n  `tonic::Status` implements `std::convert::From<std::io::Error>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `std::result::Result<tonic::Response<SchemaResult>, tonic::Status>` to implement `FromResidual<std::result::Result<Infallible, arrow_schema::ArrowError>>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`?` couldn't convert the error to `tonic::Status`","spans":[{"byte_end":9786,"byte_start":9785,"column_end":37,"column_start":36,"expansion":{"def_site_span":{"byte_end":0,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[]},"macro_decl_name":"desugaring of operator `?`","span":{"byte_end":9786,"byte_start":9785,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":276,"line_start":276,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":36,"text":"                    writer.finish()?;"}]}},"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"the trait `std::convert::From<arrow_schema::ArrowError>` is not implemented for `tonic::Status`","line_end":276,"line_start":276,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":36,"text":"                    writer.finish()?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:281:60\n    |\n281 |             return Ok(Response::new(SchemaResult { schema: schema_bytes }));\n    |                                                            ^^^^^^^^^^^^ expected `Bytes`, found `Vec<u8>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<u8>`\nhelp: call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`\n    |\n281 |             return Ok(Response::new(SchemaResult { schema: schema_bytes.into() }));\n    |                                                                        +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<u8>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":9925,"byte_start":9925,"column_end":72,"column_start":72,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":281,"line_start":281,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":72,"highlight_start":72,"text":"            return Ok(Response::new(SchemaResult { schema: schema_bytes }));"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9925,"byte_start":9913,"column_end":72,"column_start":60,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<u8>`","line_end":281,"line_start":281,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":72,"highlight_start":60,"text":"            return Ok(Response::new(SchemaResult { schema: schema_bytes }));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:290:26\n    |\n290 |     ) -> Result<Response<Self::DoGetStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoGetStream`\n...\n949 |         type DoGetStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`","rendered":null,"spans":[{"byte_end":40308,"byte_start":40297,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":949,"line_start":949,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoGetStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoGetStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":10111,"byte_start":10107,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":290,"line_start":290,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoGetStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:290:26\n    |\n290 |     ) -> Result<Response<Self::DoGetStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoGetStream`\n...\n949 |         type DoGetStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoGetStream`","rendered":null,"spans":[{"byte_end":40308,"byte_start":40297,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":949,"line_start":949,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoGetStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoGetStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":10111,"byte_start":10107,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":290,"line_start":290,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoGetStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:294:45\n    |\n294 |         let request_str = String::from_utf8(ticket.ticket)\n    |                           ----------------- ^^^^^^^^^^^^^- help: try using a conversion method: `.to_vec()`\n    |                           |                 |\n    |                           |                 expected `Vec<u8>`, found `Bytes`\n    |                           arguments to this function are incorrect\n    |\n    = note: expected struct `Vec<u8>`\n               found struct `axum::body::Bytes`\nnote: associated function defined here\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs:576:12\n    |\n576 |     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n    |            ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `Vec<u8>`\n   found struct `axum::body::Bytes`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"associated function defined here","rendered":null,"spans":[{"byte_end":18882,"byte_start":18873,"column_end":21,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs","is_primary":true,"label":null,"line_end":576,"line_start":576,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":21,"highlight_start":12,"text":"    pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {"}]}]},{"children":[],"code":null,"level":"help","message":"try using a conversion method","rendered":null,"spans":[{"byte_end":10293,"byte_start":10293,"column_end":58,"column_start":58,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":294,"line_start":294,"suggested_replacement":".to_vec()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":58,"highlight_start":58,"text":"        let request_str = String::from_utf8(ticket.ticket)"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":10293,"byte_start":10280,"column_end":58,"column_start":45,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"expected `Vec<u8>`, found `Bytes`","line_end":294,"line_start":294,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":45,"text":"        let request_str = String::from_utf8(ticket.ticket)"}]},{"byte_end":10279,"byte_start":10262,"column_end":44,"column_start":27,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":294,"line_start":294,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":27,"text":"        let request_str = String::from_utf8(ticket.ticket)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `schema_to_fb` found for struct `IpcDataGenerator` in the current scope\n   --> src/inference/inference_service.rs:315:51\n    |\n315 |                     let schema_message = data_gen.schema_to_fb(&batch.schema());\n    |                                                   ^^^^^^^^^^^^\n    |\nhelp: there is a method `schema_to_bytes` with a similar name, but with different arguments\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-ipc-53.4.0/src/writer.rs:245:5\n    |\n245 |     pub fn schema_to_bytes(&self, schema: &Schema, write_options: &IpcWriteOptions) -> EncodedData {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"there is a method `schema_to_bytes` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":9333,"byte_start":9239,"column_end":99,"column_start":5,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-ipc-53.4.0/src/writer.rs","is_primary":true,"label":null,"line_end":245,"line_start":245,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":99,"highlight_start":5,"text":"    pub fn schema_to_bytes(&self, schema: &Schema, write_options: &IpcWriteOptions) -> EncodedData {"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `schema_to_fb` found for struct `IpcDataGenerator` in the current scope","spans":[{"byte_end":11563,"byte_start":11551,"column_end":63,"column_start":51,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":315,"line_start":315,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":51,"text":"                    let schema_message = data_gen.schema_to_fb(&batch.schema());"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:327:35\n    |\n327 |                     app_metadata: vec![],\n    |                                   ^^^^^^ expected `Bytes`, found `Vec<_>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<_>`\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`\n    |\n327 |                     app_metadata: vec![].into(),\n    |                                         +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":12060,"byte_start":12060,"column_end":41,"column_start":41,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":327,"line_start":327,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":41,"highlight_start":41,"text":"                    app_metadata: vec![],"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1509,"byte_start":1486,"column_end":32,"column_start":9,"expansion":{"def_site_span":{"byte_end":1463,"byte_start":1447,"column_end":17,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":false,"label":null,"line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"macro_rules! vec {"}]},"macro_decl_name":"vec!","span":{"byte_end":12060,"byte_start":12054,"column_end":41,"column_start":35,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":327,"line_start":327,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":35,"text":"                    app_metadata: vec![],"}]}},"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<_>`","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"        $crate::vec::Vec::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:328:32\n    |\n328 |                     data_body: vec![],\n    |                                ^^^^^^ expected `Bytes`, found `Vec<_>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<_>`\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`\n    |\n328 |                     data_body: vec![].into(),\n    |                                      +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":12099,"byte_start":12099,"column_end":38,"column_start":38,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":328,"line_start":328,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":38,"highlight_start":38,"text":"                    data_body: vec![],"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1509,"byte_start":1486,"column_end":32,"column_start":9,"expansion":{"def_site_span":{"byte_end":1463,"byte_start":1447,"column_end":17,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":false,"label":null,"line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"macro_rules! vec {"}]},"macro_decl_name":"vec!","span":{"byte_end":12099,"byte_start":12093,"column_end":38,"column_start":32,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":328,"line_start":328,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":32,"text":"                    data_body: vec![],"}]}},"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<_>`","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"        $crate::vec::Vec::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:335:35\n    |\n335 |                     app_metadata: vec![],\n    |                                   ^^^^^^ expected `Bytes`, found `Vec<_>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<_>`\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`\n    |\n335 |                     app_metadata: vec![].into(),\n    |                                         +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<_>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":12360,"byte_start":12360,"column_end":41,"column_start":41,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":335,"line_start":335,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":41,"highlight_start":41,"text":"                    app_metadata: vec![],"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1509,"byte_start":1486,"column_end":32,"column_start":9,"expansion":{"def_site_span":{"byte_end":1463,"byte_start":1447,"column_end":17,"column_start":1,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":false,"label":null,"line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":1,"text":"macro_rules! vec {"}]},"macro_decl_name":"vec!","span":{"byte_end":12360,"byte_start":12354,"column_end":41,"column_start":35,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":false,"label":null,"line_end":335,"line_start":335,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":35,"text":"                    app_metadata: vec![],"}]}},"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<_>`","line_end":44,"line_start":44,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":9,"text":"        $crate::vec::Vec::new()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:349:26\n    |\n349 |     ) -> Result<Response<Self::DoPutStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoPutStream`\n...\n964 |         type DoPutStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`","rendered":null,"spans":[{"byte_end":41110,"byte_start":41099,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":964,"line_start":964,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoPutStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoPutStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":12795,"byte_start":12791,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":349,"line_start":349,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoPutStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:349:26\n    |\n349 |     ) -> Result<Response<Self::DoPutStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoPutStream`\n...\n964 |         type DoPutStream: tonic::codegen::tokio_stream::Stream<\n    |              ----------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoPutStream`","rendered":null,"spans":[{"byte_end":41110,"byte_start":41099,"column_end":25,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":964,"line_start":964,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":14,"text":"        type DoPutStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoPutStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":12795,"byte_start":12791,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":349,"line_start":349,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoPutStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:356:26\n    |\n356 |     ) -> Result<Response<Self::DoActionStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoActionStream`\n...\n997 |         type DoActionStream: tonic::codegen::tokio_stream::Stream<\n    |              -------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`","rendered":null,"spans":[{"byte_end":42975,"byte_start":42961,"column_end":28,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":997,"line_start":997,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":14,"text":"        type DoActionStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoActionStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":12994,"byte_start":12990,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":356,"line_start":356,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoActionStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:356:26\n    |\n356 |     ) -> Result<Response<Self::DoActionStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoActionStream`\n...\n997 |         type DoActionStream: tonic::codegen::tokio_stream::Stream<\n    |              -------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoActionStream`","rendered":null,"spans":[{"byte_end":42975,"byte_start":42961,"column_end":28,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":997,"line_start":997,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":14,"text":"        type DoActionStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoActionStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":12994,"byte_start":12990,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":356,"line_start":356,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoActionStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:366:27\n    |\n366 |                     body: stats_json,\n    |                           ^^^^^^^^^^ expected `Bytes`, found `Vec<u8>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<u8>`\nhelp: call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`\n    |\n366 |                     body: stats_json.into(),\n    |                                     +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<u8>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":13458,"byte_start":13458,"column_end":37,"column_start":37,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":366,"line_start":366,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":37,"highlight_start":37,"text":"                    body: stats_json,"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13458,"byte_start":13448,"column_end":37,"column_start":27,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<u8>`","line_end":366,"line_start":366,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":27,"text":"                    body: stats_json,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/inference/inference_service.rs:376:27\n    |\n376 |                     body: b\"Stats reset successfully\".to_vec(),\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Bytes`, found `Vec<u8>`\n    |\n    = note: expected struct `axum::body::Bytes`\n               found struct `Vec<u8>`\nhelp: call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`\n    |\n376 |                     body: b\"Stats reset successfully\".to_vec().into(),\n    |                                                               +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `axum::body::Bytes`\n   found struct `Vec<u8>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `Vec<u8>` into `axum::body::Bytes`","rendered":null,"spans":[{"byte_end":13831,"byte_start":13831,"column_end":63,"column_start":63,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":376,"line_start":376,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":63,"highlight_start":63,"text":"                    body: b\"Stats reset successfully\".to_vec(),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":13831,"byte_start":13795,"column_end":63,"column_start":27,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"expected `Bytes`, found `Vec<u8>`","line_end":376,"line_start":376,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":27,"text":"                    body: b\"Stats reset successfully\".to_vec(),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n    --> src/inference/inference_service.rs:389:26\n     |\n389  |     ) -> Result<Response<Self::ListActionsStream>, Status> {\n     |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n     |\n     = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n     = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n     |\n18   | pub struct Opaque {\n     |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n    --> src/storage/vdb/openvdb_bindings.rs:21:14\n     |\n21   |         type LoRAGrid;\n     |              ^^^^^^^^\n     = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n    --> src/storage/vdb/openvdb_bindings.rs:71:12\n     |\n71   | pub struct OpenVDBLoRAAdapter {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n     = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n    --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n    --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n     |\n211  | pub struct HashMap<K, V, S = RandomState> {\n     |            ^^^^^^^\n     = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n     = note: 1 redundant requirement hidden\n     = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n    --> src/storage/vdb/hardware_accelerated.rs:241:12\n     |\n241  | pub struct HardwareVDBStorage {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n    --> src/inference/inference_service.rs:66:12\n     |\n66   | pub struct InferenceFlightService {\n     |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n     |\n861  |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n     |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListActionsStream`\n...\n1014 |         type ListActionsStream: tonic::codegen::tokio_stream::Stream<\n     |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`","rendered":null,"spans":[{"byte_end":43900,"byte_start":43883,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":1014,"line_start":1014,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListActionsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListActionsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":14226,"byte_start":14222,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":389,"line_start":389,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListActionsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n    --> src/inference/inference_service.rs:389:26\n     |\n389  |     ) -> Result<Response<Self::ListActionsStream>, Status> {\n     |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n     |\n     = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n     = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n     |\n18   | pub struct Opaque {\n     |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n    --> src/storage/vdb/openvdb_bindings.rs:21:14\n     |\n21   |         type LoRAGrid;\n     |              ^^^^^^^^\n     = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n    --> src/storage/vdb/openvdb_bindings.rs:71:12\n     |\n71   | pub struct OpenVDBLoRAAdapter {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n     = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n    --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n    --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n     |\n211  | pub struct HashMap<K, V, S = RandomState> {\n     |            ^^^^^^^\n     = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n     = note: 1 redundant requirement hidden\n     = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n    --> src/storage/vdb/hardware_accelerated.rs:241:12\n     |\n241  | pub struct HardwareVDBStorage {\n     |            ^^^^^^^^^^^^^^^^^^\n     = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n    --> src/inference/inference_service.rs:66:12\n     |\n66   | pub struct InferenceFlightService {\n     |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`\n    --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n     |\n861  |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n     |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::ListActionsStream`\n...\n1014 |         type ListActionsStream: tonic::codegen::tokio_stream::Stream<\n     |              ----------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::ListActionsStream`","rendered":null,"spans":[{"byte_end":43900,"byte_start":43883,"column_end":31,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":1014,"line_start":1014,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"        type ListActionsStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::ListActionsStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":14226,"byte_start":14222,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":389,"line_start":389,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::ListActionsStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/inference/inference_service.rs:408:26\n    |\n408 |     ) -> Result<Response<Self::DoExchangeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoExchangeStream`\n...\n981 |         type DoExchangeStream: tonic::codegen::tokio_stream::Stream<\n    |              ---------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`","rendered":null,"spans":[{"byte_end":42101,"byte_start":42085,"column_end":30,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":981,"line_start":981,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":14,"text":"        type DoExchangeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoExchangeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":14861,"byte_start":14857,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":408,"line_start":408,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoExchangeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/inference/inference_service.rs:408:26\n    |\n408 |     ) -> Result<Response<Self::DoExchangeStream>, Status> {\n    |                          ^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `inference::inference_service::InferenceFlightService`\n   --> src/inference/inference_service.rs:66:12\n    |\n66  | pub struct InferenceFlightService {\n    |            ^^^^^^^^^^^^^^^^^^^^^^\nnote: required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs:861:30\n    |\n861 |     pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {\n    |                              ^^^^^^^^^^^^^^^^^ required by this bound in `FlightService::DoExchangeStream`\n...\n981 |         type DoExchangeStream: tonic::codegen::tokio_stream::Stream<\n    |              ---------------- required by a bound in this associated type\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `inference::inference_service::InferenceFlightService`","rendered":null,"spans":[{"byte_end":1976,"byte_start":1954,"column_end":34,"column_start":12,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":12,"text":"pub struct InferenceFlightService {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `arrow_flight::flight_service_server::FlightService::DoExchangeStream`","rendered":null,"spans":[{"byte_end":42101,"byte_start":42085,"column_end":30,"column_start":14,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":false,"label":"required by a bound in this associated type","line_end":981,"line_start":981,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":14,"text":"        type DoExchangeStream: tonic::codegen::tokio_stream::Stream<"}]},{"byte_end":35374,"byte_start":35357,"column_end":47,"column_start":30,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrow-flight-53.4.0/src/arrow.flight.protocol.rs","is_primary":true,"label":"required by this bound in `FlightService::DoExchangeStream`","line_end":861,"line_start":861,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":30,"text":"    pub trait FlightService: std::marker::Send + std::marker::Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":14861,"byte_start":14857,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/inference/inference_service.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":408,"line_start":408,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"    ) -> Result<Response<Self::DoExchangeStream>, Status> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/metrics/storage.rs:150:14\n    |\n150 |             .get_storage_stats()\n    |              ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::get_storage_stats`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::get_storage_stats`\n...\n175 |     async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;\n    |              ----------------- required by a bound in this associated function\nhelp: consider removing this method call, as the receiver has type `&Self` and `&Self: std::marker::Send` trivially holds\n    |\n149 -         let storage_stats = self.vdb_storage()\n149 +         let storage_stats = self\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::get_storage_stats`","rendered":null,"spans":[{"byte_end":5510,"byte_start":5493,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::get_storage_stats`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `&Self` and `&Self: std::marker::Send` trivially holds","rendered":null,"spans":[{"byte_end":4729,"byte_start":4715,"column_end":47,"column_start":33,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":149,"line_start":149,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":47,"highlight_start":33,"text":"        let storage_stats = self.vdb_storage()"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":4760,"byte_start":4743,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":150,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"            .get_storage_stats()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/metrics/storage.rs:150:14\n    |\n150 |             .get_storage_stats()\n    |              ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::get_storage_stats`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::get_storage_stats`\n...\n175 |     async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;\n    |              ----------------- required by a bound in this associated function\nhelp: consider removing this method call, as the receiver has type `&Self` and `&Self: Sync` trivially holds\n    |\n149 -         let storage_stats = self.vdb_storage()\n149 +         let storage_stats = self\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::get_storage_stats`","rendered":null,"spans":[{"byte_end":5510,"byte_start":5493,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":175,"line_start":175,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::get_storage_stats`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `&Self` and `&Self: Sync` trivially holds","rendered":null,"spans":[{"byte_end":4729,"byte_start":4715,"column_end":47,"column_start":33,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":149,"line_start":149,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":47,"highlight_start":33,"text":"        let storage_stats = self.vdb_storage()"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":4760,"byte_start":4743,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":150,"line_start":150,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"            .get_storage_stats()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/metrics/storage.rs:207:14\n    |\n207 |             .list_adapters()\n    |              ^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::list_adapters`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::list_adapters`\n...\n166 |     async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;\n    |              ------------- required by a bound in this associated function\nhelp: consider removing this method call, as the receiver has type `&Self` and `&Self: std::marker::Send` trivially holds\n    |\n206 -         let adapters = self.vdb_storage()\n206 +         let adapters = self\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::list_adapters`","rendered":null,"spans":[{"byte_end":5094,"byte_start":5081,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::list_adapters`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `&Self` and `&Self: std::marker::Send` trivially holds","rendered":null,"spans":[{"byte_end":7035,"byte_start":7021,"column_end":42,"column_start":28,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":206,"line_start":206,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":42,"highlight_start":28,"text":"        let adapters = self.vdb_storage()"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7062,"byte_start":7049,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":207,"line_start":207,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"            .list_adapters()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/metrics/storage.rs:207:14\n    |\n207 |             .list_adapters()\n    |              ^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::list_adapters`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::list_adapters`\n...\n166 |     async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;\n    |              ------------- required by a bound in this associated function\nhelp: consider removing this method call, as the receiver has type `&Self` and `&Self: Sync` trivially holds\n    |\n206 -         let adapters = self.vdb_storage()\n206 +         let adapters = self\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::list_adapters`","rendered":null,"spans":[{"byte_end":5094,"byte_start":5081,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::list_adapters`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `&Self` and `&Self: Sync` trivially holds","rendered":null,"spans":[{"byte_end":7035,"byte_start":7021,"column_end":42,"column_start":28,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":206,"line_start":206,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":42,"highlight_start":28,"text":"        let adapters = self.vdb_storage()"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7062,"byte_start":7049,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":207,"line_start":207,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"            .list_adapters()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/metrics/storage.rs:215:18\n    |\n215 |                 .get_adapter_stats(&adapter.adapter_id)\n    |                  ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::get_adapter_stats`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::get_adapter_stats`\n...\n169 |     async fn get_adapter_stats(&self, id: &str) -> Result<AdapterStats, SparseStorageError>;\n    |              ----------------- required by a bound in this associated function\nhelp: consider removing this method call, as the receiver has type `&Self` and `&Self: std::marker::Send` trivially holds\n    |\n214 -             let stats = self.vdb_storage()\n214 +             let stats = self\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::get_adapter_stats`","rendered":null,"spans":[{"byte_end":5236,"byte_start":5219,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"    async fn get_adapter_stats(&self, id: &str) -> Result<AdapterStats, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::get_adapter_stats`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `&Self` and `&Self: std::marker::Send` trivially holds","rendered":null,"spans":[{"byte_end":7295,"byte_start":7281,"column_end":43,"column_start":29,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":214,"line_start":214,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":43,"highlight_start":29,"text":"            let stats = self.vdb_storage()"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":7330,"byte_start":7313,"column_end":35,"column_start":18,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":215,"line_start":215,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":18,"text":"                .get_adapter_stats(&adapter.adapter_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/metrics/storage.rs:215:18\n    |\n215 |                 .get_adapter_stats(&adapter.adapter_id)\n    |                  ^^^^^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::get_adapter_stats`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::get_adapter_stats`\n...\n169 |     async fn get_adapter_stats(&self, id: &str) -> Result<AdapterStats, SparseStorageError>;\n    |              ----------------- required by a bound in this associated function\nhelp: consider removing this method call, as the receiver has type `&Self` and `&Self: Sync` trivially holds\n    |\n214 -             let stats = self.vdb_storage()\n214 +             let stats = self\n    |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::get_adapter_stats`","rendered":null,"spans":[{"byte_end":5236,"byte_start":5219,"column_end":31,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":169,"line_start":169,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":31,"highlight_start":14,"text":"    async fn get_adapter_stats(&self, id: &str) -> Result<AdapterStats, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::get_adapter_stats`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]},{"children":[],"code":null,"level":"help","message":"consider removing this method call, as the receiver has type `&Self` and `&Self: Sync` trivially holds","rendered":null,"spans":[{"byte_end":7295,"byte_start":7281,"column_end":43,"column_start":29,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":null,"line_end":214,"line_start":214,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":43,"highlight_start":29,"text":"            let stats = self.vdb_storage()"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":7330,"byte_start":7313,"column_end":35,"column_start":18,"expansion":null,"file_name":"src/metrics/storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":215,"line_start":215,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":18,"text":"                .get_adapter_stats(&adapter.adapter_id)"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/query/planner.rs:90:33\n    |\n90  |           self.optimizations.push(Box::new(ViewOptimizationRule::new(\n    |  _________________________________^\n91  | |             self.vdb_storage.clone(),\n92  | |         )));\n    | |__________^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `ViewOptimizationRule`\n   --> src/query/rules/view.rs:62:12\n    |\n62  | pub struct ViewOptimizationRule {\n    |            ^^^^^^^^^^^^^^^^^^^^\n    = note: required for the cast from `Box<ViewOptimizationRule>` to `Box<(dyn OptimizerRule + std::marker::Send + Sync + 'static)>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ViewOptimizationRule`","rendered":null,"spans":[{"byte_end":1665,"byte_start":1645,"column_end":32,"column_start":12,"expansion":null,"file_name":"src/query/rules/view.rs","is_primary":true,"label":null,"line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":12,"text":"pub struct ViewOptimizationRule {"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Box<ViewOptimizationRule>` to `Box<(dyn OptimizerRule + std::marker::Send + Sync + 'static)>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":3113,"byte_start":3029,"column_end":11,"column_start":33,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":92,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":33,"text":"        self.optimizations.push(Box::new(ViewOptimizationRule::new("},{"highlight_end":38,"highlight_start":1,"text":"            self.vdb_storage.clone(),"},{"highlight_end":11,"highlight_start":1,"text":"        )));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/query/planner.rs:90:33\n    |\n90  |           self.optimizations.push(Box::new(ViewOptimizationRule::new(\n    |  _________________________________^\n91  | |             self.vdb_storage.clone(),\n92  | |         )));\n    | |__________^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `ViewOptimizationRule`\n   --> src/query/rules/view.rs:62:12\n    |\n62  | pub struct ViewOptimizationRule {\n    |            ^^^^^^^^^^^^^^^^^^^^\n    = note: required for the cast from `Box<ViewOptimizationRule>` to `Box<(dyn OptimizerRule + std::marker::Send + Sync + 'static)>`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `ViewOptimizationRule`","rendered":null,"spans":[{"byte_end":1665,"byte_start":1645,"column_end":32,"column_start":12,"expansion":null,"file_name":"src/query/rules/view.rs","is_primary":true,"label":null,"line_end":62,"line_start":62,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":12,"text":"pub struct ViewOptimizationRule {"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Box<ViewOptimizationRule>` to `Box<(dyn OptimizerRule + std::marker::Send + Sync + 'static)>`","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":3113,"byte_start":3029,"column_end":11,"column_start":33,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":92,"line_start":90,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":68,"highlight_start":33,"text":"        self.optimizations.push(Box::new(ViewOptimizationRule::new("},{"highlight_end":38,"highlight_start":1,"text":"            self.vdb_storage.clone(),"},{"highlight_end":11,"highlight_start":1,"text":"        )));"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/query/planner.rs:98:79\n    |\n98  |       async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {\n    |  _______________________________________________________________________________^\n99  | |         // Parse SQL into logical plan\n100 | |         let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;\n...   |\n107 | |         Ok(logical_plan)\n108 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `DataFusionPlanner`\n   --> src/query/planner.rs:54:12\n    |\n54  | pub struct DataFusionPlanner {\n    |            ^^^^^^^^^^^^^^^^^\n    = note: required for `&DataFusionPlanner` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/query/planner.rs:98:79\n    |\n98  |       async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {\n    |  _______________________________________________________________________________^\n99  | |         // Parse SQL into logical plan\n100 | |         let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;\n...   |\n107 | |         Ok(logical_plan)\n108 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/query/planner.rs:98:79: 108:6}>>` to `Pin<Box<dyn Future<Output = Result<LogicalPlan, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15292857884110040841.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `DataFusionPlanner`","rendered":null,"spans":[{"byte_end":1866,"byte_start":1849,"column_end":29,"column_start":12,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":12,"text":"pub struct DataFusionPlanner {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&DataFusionPlanner` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":3589,"byte_start":3273,"column_end":6,"column_start":79,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":108,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":79,"text":"    async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {"},{"highlight_end":39,"highlight_start":1,"text":"        // Parse SQL into logical plan"},{"highlight_end":83,"highlight_start":1,"text":"        let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply schema hints if available"},{"highlight_end":52,"highlight_start":1,"text":"        if let Some(_schema) = &query.schema_hint {"},{"highlight_end":55,"highlight_start":1,"text":"            // TODO: Implement schema hint application"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":25,"highlight_start":1,"text":"        Ok(logical_plan)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/query/planner.rs:98:79: 108:6}>>` to `Pin<Box<dyn Future<Output = Result<LogicalPlan, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15292857884110040841.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":3589,"byte_start":3273,"column_end":6,"column_start":79,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":108,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":79,"text":"    async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {"},{"highlight_end":39,"highlight_start":1,"text":"        // Parse SQL into logical plan"},{"highlight_end":83,"highlight_start":1,"text":"        let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply schema hints if available"},{"highlight_end":52,"highlight_start":1,"text":"        if let Some(_schema) = &query.schema_hint {"},{"highlight_end":55,"highlight_start":1,"text":"            // TODO: Implement schema hint application"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":25,"highlight_start":1,"text":"        Ok(logical_plan)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/query/planner.rs:98:79\n    |\n98  |       async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {\n    |  _______________________________________________________________________________^\n99  | |         // Parse SQL into logical plan\n100 | |         let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;\n...   |\n107 | |         Ok(logical_plan)\n108 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `DataFusionPlanner`\n   --> src/query/planner.rs:54:12\n    |\n54  | pub struct DataFusionPlanner {\n    |            ^^^^^^^^^^^^^^^^^\n    = note: required for `&DataFusionPlanner` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/query/planner.rs:98:79\n    |\n98  |       async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {\n    |  _______________________________________________________________________________^\n99  | |         // Parse SQL into logical plan\n100 | |         let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;\n...   |\n107 | |         Ok(logical_plan)\n108 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/query/planner.rs:98:79: 108:6}>>` to `Pin<Box<dyn Future<Output = Result<LogicalPlan, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15292857884110040841.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `DataFusionPlanner`","rendered":null,"spans":[{"byte_end":1866,"byte_start":1849,"column_end":29,"column_start":12,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":12,"text":"pub struct DataFusionPlanner {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&DataFusionPlanner` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":3589,"byte_start":3273,"column_end":6,"column_start":79,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":108,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":79,"text":"    async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {"},{"highlight_end":39,"highlight_start":1,"text":"        // Parse SQL into logical plan"},{"highlight_end":83,"highlight_start":1,"text":"        let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply schema hints if available"},{"highlight_end":52,"highlight_start":1,"text":"        if let Some(_schema) = &query.schema_hint {"},{"highlight_end":55,"highlight_start":1,"text":"            // TODO: Implement schema hint application"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":25,"highlight_start":1,"text":"        Ok(logical_plan)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/query/planner.rs:98:79: 108:6}>>` to `Pin<Box<dyn Future<Output = Result<LogicalPlan, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15292857884110040841.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":3589,"byte_start":3273,"column_end":6,"column_start":79,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":108,"line_start":98,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":79,"text":"    async fn create_logical_plan(&self, query: &Query) -> Result<LogicalPlan> {"},{"highlight_end":39,"highlight_start":1,"text":"        // Parse SQL into logical plan"},{"highlight_end":83,"highlight_start":1,"text":"        let logical_plan = self.ctx.sql(&query.sql).await?.into_optimized_plan()?;"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply schema hints if available"},{"highlight_end":52,"highlight_start":1,"text":"        if let Some(_schema) = &query.schema_hint {"},{"highlight_end":55,"highlight_start":1,"text":"            // TODO: Implement schema hint application"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":25,"highlight_start":1,"text":"        Ok(logical_plan)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/query/planner.rs:110:83\n    |\n110 |       async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {\n    |  ___________________________________________________________________________________^\n111 | |         // Get session state\n112 | |         let state = self.ctx.state();\n...   |\n125 | |         state.create_physical_plan(&optimized_plan).await\n126 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `DataFusionPlanner`\n   --> src/query/planner.rs:54:12\n    |\n54  | pub struct DataFusionPlanner {\n    |            ^^^^^^^^^^^^^^^^^\n    = note: required for `&DataFusionPlanner` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/query/planner.rs:110:83\n    |\n110 |       async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {\n    |  ___________________________________________________________________________________^\n111 | |         // Get session state\n112 | |         let state = self.ctx.state();\n...   |\n125 | |         state.create_physical_plan(&optimized_plan).await\n126 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/query/planner.rs:110:83: 126:6}>>` to `Pin<Box<dyn Future<Output = Result<Arc<...>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2943008955480248090.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `DataFusionPlanner`","rendered":null,"spans":[{"byte_end":1866,"byte_start":1849,"column_end":29,"column_start":12,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":12,"text":"pub struct DataFusionPlanner {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&DataFusionPlanner` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":4201,"byte_start":3673,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":126,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Get session state"},{"highlight_end":38,"highlight_start":1,"text":"        let state = self.ctx.state();"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply custom optimization rules"},{"highlight_end":39,"highlight_start":1,"text":"        let mut optimized_plan = plan;"},{"highlight_end":42,"highlight_start":1,"text":"        for rule in &self.optimizations {"},{"highlight_end":41,"highlight_start":1,"text":"            if rule.supports_rewrite() {"},{"highlight_end":62,"highlight_start":1,"text":"                match rule.rewrite(optimized_plan, &state)? {"},{"highlight_end":69,"highlight_start":1,"text":"                    transformed => optimized_plan = transformed.data"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":56,"highlight_start":1,"text":"        // Convert to physical plan using session state"},{"highlight_end":58,"highlight_start":1,"text":"        state.create_physical_plan(&optimized_plan).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/query/planner.rs:110:83: 126:6}>>` to `Pin<Box<dyn Future<Output = Result<Arc<...>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2943008955480248090.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":4201,"byte_start":3673,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":126,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Get session state"},{"highlight_end":38,"highlight_start":1,"text":"        let state = self.ctx.state();"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply custom optimization rules"},{"highlight_end":39,"highlight_start":1,"text":"        let mut optimized_plan = plan;"},{"highlight_end":42,"highlight_start":1,"text":"        for rule in &self.optimizations {"},{"highlight_end":41,"highlight_start":1,"text":"            if rule.supports_rewrite() {"},{"highlight_end":62,"highlight_start":1,"text":"                match rule.rewrite(optimized_plan, &state)? {"},{"highlight_end":69,"highlight_start":1,"text":"                    transformed => optimized_plan = transformed.data"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":56,"highlight_start":1,"text":"        // Convert to physical plan using session state"},{"highlight_end":58,"highlight_start":1,"text":"        state.create_physical_plan(&optimized_plan).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/query/planner.rs:110:83\n    |\n110 |       async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {\n    |  ___________________________________________________________________________________^\n111 | |         // Get session state\n112 | |         let state = self.ctx.state();\n...   |\n125 | |         state.create_physical_plan(&optimized_plan).await\n126 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`\nnote: required because it appears within the type `DataFusionPlanner`\n   --> src/query/planner.rs:54:12\n    |\n54  | pub struct DataFusionPlanner {\n    |            ^^^^^^^^^^^^^^^^^\n    = note: required for `&DataFusionPlanner` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/query/planner.rs:110:83\n    |\n110 |       async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {\n    |  ___________________________________________________________________________________^\n111 | |         // Get session state\n112 | |         let state = self.ctx.state();\n...   |\n125 | |         state.create_physical_plan(&optimized_plan).await\n126 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/query/planner.rs:110:83: 126:6}>>` to `Pin<Box<dyn Future<Output = Result<Arc<...>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2943008955480248090.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<sparse_storage::VDBSparseStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `DataFusionPlanner`","rendered":null,"spans":[{"byte_end":1866,"byte_start":1849,"column_end":29,"column_start":12,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":54,"line_start":54,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":12,"text":"pub struct DataFusionPlanner {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&DataFusionPlanner` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":4201,"byte_start":3673,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":null,"line_end":126,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Get session state"},{"highlight_end":38,"highlight_start":1,"text":"        let state = self.ctx.state();"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply custom optimization rules"},{"highlight_end":39,"highlight_start":1,"text":"        let mut optimized_plan = plan;"},{"highlight_end":42,"highlight_start":1,"text":"        for rule in &self.optimizations {"},{"highlight_end":41,"highlight_start":1,"text":"            if rule.supports_rewrite() {"},{"highlight_end":62,"highlight_start":1,"text":"                match rule.rewrite(optimized_plan, &state)? {"},{"highlight_end":69,"highlight_start":1,"text":"                    transformed => optimized_plan = transformed.data"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":56,"highlight_start":1,"text":"        // Convert to physical plan using session state"},{"highlight_end":58,"highlight_start":1,"text":"        state.create_physical_plan(&optimized_plan).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/query/planner.rs:110:83: 126:6}>>` to `Pin<Box<dyn Future<Output = Result<Arc<...>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2943008955480248090.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":4201,"byte_start":3673,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/query/planner.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":126,"line_start":110,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn optimize(&self, plan: LogicalPlan) -> Result<Arc<dyn ExecutionPlan>> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Get session state"},{"highlight_end":38,"highlight_start":1,"text":"        let state = self.ctx.state();"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":43,"highlight_start":1,"text":"        // Apply custom optimization rules"},{"highlight_end":39,"highlight_start":1,"text":"        let mut optimized_plan = plan;"},{"highlight_end":42,"highlight_start":1,"text":"        for rule in &self.optimizations {"},{"highlight_end":41,"highlight_start":1,"text":"            if rule.supports_rewrite() {"},{"highlight_end":62,"highlight_start":1,"text":"                match rule.rewrite(optimized_plan, &state)? {"},{"highlight_end":69,"highlight_start":1,"text":"                    transformed => optimized_plan = transformed.data"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":1,"highlight_start":1,"text":""},{"highlight_end":56,"highlight_start":1,"text":"        // Convert to physical plan using session state"},{"highlight_end":58,"highlight_start":1,"text":"        state.create_physical_plan(&optimized_plan).await"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:448:41\n    |\n448 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n449 | |         // Store using hardware-accelerated VDB storage\n450 | |         if self.config.neural_compression {\n451 | |             self.hardware_storage\n...   |\n479 | |         Ok(())\n480 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:448:41\n    |\n448 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n449 | |         // Store using hardware-accelerated VDB storage\n450 | |         if self.config.neural_compression {\n451 | |             self.hardware_storage\n...   |\n479 | |         Ok(())\n480 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:448:41: 480:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-14991371053765255837.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":16246,"byte_start":14943,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":480,"line_start":448,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":56,"highlight_start":1,"text":"        // Store using hardware-accelerated VDB storage"},{"highlight_end":44,"highlight_start":1,"text":"        if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":68,"highlight_start":1,"text":"                .store_adapter_neural_compressed(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":62,"highlight_start":1,"text":"                .store_adapter_accelerated(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":45,"highlight_start":1,"text":"        // Cache the adapter for fast access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":37,"highlight_start":1,"text":"        // Update storage statistics"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":54,"highlight_start":1,"text":"            let mut stats = self.stats.write().await;"},{"highlight_end":39,"highlight_start":1,"text":"            stats.total_adapters += 1;"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":59,"highlight_start":1,"text":"            let adapter_stats = adapter.get_stats().await;"},{"highlight_end":98,"highlight_start":1,"text":"            stats.total_active_weights += adapter_stats.memory_usage_bytes / 4; // Rough estimate"},{"highlight_end":102,"highlight_start":1,"text":"            stats.avg_sparsity_ratio = (stats.avg_sparsity_ratio + adapter_stats.avg_sparsity) / 2.0;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":65,"highlight_start":1,"text":"        println!(\"✅ Stored adapter '{}' with {}% sparsity\", id, "},{"highlight_end":73,"highlight_start":1,"text":"                (1.0 - adapter.get_stats().await.avg_sparsity) * 100.0);"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:448:41: 480:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-14991371053765255837.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":16246,"byte_start":14943,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":480,"line_start":448,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":56,"highlight_start":1,"text":"        // Store using hardware-accelerated VDB storage"},{"highlight_end":44,"highlight_start":1,"text":"        if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":68,"highlight_start":1,"text":"                .store_adapter_neural_compressed(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":62,"highlight_start":1,"text":"                .store_adapter_accelerated(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":45,"highlight_start":1,"text":"        // Cache the adapter for fast access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":37,"highlight_start":1,"text":"        // Update storage statistics"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":54,"highlight_start":1,"text":"            let mut stats = self.stats.write().await;"},{"highlight_end":39,"highlight_start":1,"text":"            stats.total_adapters += 1;"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":59,"highlight_start":1,"text":"            let adapter_stats = adapter.get_stats().await;"},{"highlight_end":98,"highlight_start":1,"text":"            stats.total_active_weights += adapter_stats.memory_usage_bytes / 4; // Rough estimate"},{"highlight_end":102,"highlight_start":1,"text":"            stats.avg_sparsity_ratio = (stats.avg_sparsity_ratio + adapter_stats.avg_sparsity) / 2.0;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":65,"highlight_start":1,"text":"        println!(\"✅ Stored adapter '{}' with {}% sparsity\", id, "},{"highlight_end":73,"highlight_start":1,"text":"                (1.0 - adapter.get_stats().await.avg_sparsity) * 100.0);"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:448:41\n    |\n448 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n449 | |         // Store using hardware-accelerated VDB storage\n450 | |         if self.config.neural_compression {\n451 | |             self.hardware_storage\n...   |\n479 | |         Ok(())\n480 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:448:41\n    |\n448 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n449 | |         // Store using hardware-accelerated VDB storage\n450 | |         if self.config.neural_compression {\n451 | |             self.hardware_storage\n...   |\n479 | |         Ok(())\n480 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:448:41: 480:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-14991371053765255837.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":16246,"byte_start":14943,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":480,"line_start":448,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":56,"highlight_start":1,"text":"        // Store using hardware-accelerated VDB storage"},{"highlight_end":44,"highlight_start":1,"text":"        if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":68,"highlight_start":1,"text":"                .store_adapter_neural_compressed(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":62,"highlight_start":1,"text":"                .store_adapter_accelerated(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":45,"highlight_start":1,"text":"        // Cache the adapter for fast access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":37,"highlight_start":1,"text":"        // Update storage statistics"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":54,"highlight_start":1,"text":"            let mut stats = self.stats.write().await;"},{"highlight_end":39,"highlight_start":1,"text":"            stats.total_adapters += 1;"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":59,"highlight_start":1,"text":"            let adapter_stats = adapter.get_stats().await;"},{"highlight_end":98,"highlight_start":1,"text":"            stats.total_active_weights += adapter_stats.memory_usage_bytes / 4; // Rough estimate"},{"highlight_end":102,"highlight_start":1,"text":"            stats.avg_sparsity_ratio = (stats.avg_sparsity_ratio + adapter_stats.avg_sparsity) / 2.0;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":65,"highlight_start":1,"text":"        println!(\"✅ Stored adapter '{}' with {}% sparsity\", id, "},{"highlight_end":73,"highlight_start":1,"text":"                (1.0 - adapter.get_stats().await.avg_sparsity) * 100.0);"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:448:41: 480:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-14991371053765255837.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":16246,"byte_start":14943,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":480,"line_start":448,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":56,"highlight_start":1,"text":"        // Store using hardware-accelerated VDB storage"},{"highlight_end":44,"highlight_start":1,"text":"        if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":68,"highlight_start":1,"text":"                .store_adapter_neural_compressed(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":62,"highlight_start":1,"text":"                .store_adapter_accelerated(id, adapter).await"},{"highlight_end":81,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":45,"highlight_start":1,"text":"        // Cache the adapter for fast access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":37,"highlight_start":1,"text":"        // Update storage statistics"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":54,"highlight_start":1,"text":"            let mut stats = self.stats.write().await;"},{"highlight_end":39,"highlight_start":1,"text":"            stats.total_adapters += 1;"},{"highlight_end":13,"highlight_start":1,"text":"            "},{"highlight_end":59,"highlight_start":1,"text":"            let adapter_stats = adapter.get_stats().await;"},{"highlight_end":98,"highlight_start":1,"text":"            stats.total_active_weights += adapter_stats.memory_usage_bytes / 4; // Rough estimate"},{"highlight_end":102,"highlight_start":1,"text":"            stats.avg_sparsity_ratio = (stats.avg_sparsity_ratio + adapter_stats.avg_sparsity) / 2.0;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":65,"highlight_start":1,"text":"        println!(\"✅ Stored adapter '{}' with {}% sparsity\", id, "},{"highlight_end":73,"highlight_start":1,"text":"                (1.0 - adapter.get_stats().await.avg_sparsity) * 100.0);"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:487:56\n    |\n487 |       ) -> Result<SparseLoRAAdapter, SparseStorageError> {\n    |  ________________________________________________________^\n488 | |         // Check cache first\n489 | |         {\n490 | |             let cache = self.adapter_cache.read().await;\n...   |\n513 | |         Ok(adapter)\n514 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:487:56\n    |\n487 |       ) -> Result<SparseLoRAAdapter, SparseStorageError> {\n    |  ________________________________________________________^\n488 | |         // Check cache first\n489 | |         {\n490 | |             let cache = self.adapter_cache.read().await;\n...   |\n513 | |         Ok(adapter)\n514 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:487:56: 514:6}>>` to `Pin<Box<dyn Future<Output = Result<SparseLoRAAdapter, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2788964714725941437.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":17397,"byte_start":16460,"column_end":6,"column_start":56,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":514,"line_start":487,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":56,"text":"    ) -> Result<SparseLoRAAdapter, SparseStorageError> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Check cache first"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":57,"highlight_start":1,"text":"            let cache = self.adapter_cache.read().await;"},{"highlight_end":51,"highlight_start":1,"text":"            if let Some(adapter) = cache.get(id) {"},{"highlight_end":53,"highlight_start":1,"text":"                return Ok(adapter.as_ref().clone());"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":33,"highlight_start":1,"text":"        // Load from VDB storage"},{"highlight_end":58,"highlight_start":1,"text":"        let adapter = if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":66,"highlight_start":1,"text":"                .load_adapter_neural_compressed(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":60,"highlight_start":1,"text":"                .load_adapter_accelerated(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":35,"highlight_start":1,"text":"        // Cache for future access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":20,"highlight_start":1,"text":"        Ok(adapter)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:487:56: 514:6}>>` to `Pin<Box<dyn Future<Output = Result<SparseLoRAAdapter, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2788964714725941437.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":17397,"byte_start":16460,"column_end":6,"column_start":56,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":514,"line_start":487,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":56,"text":"    ) -> Result<SparseLoRAAdapter, SparseStorageError> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Check cache first"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":57,"highlight_start":1,"text":"            let cache = self.adapter_cache.read().await;"},{"highlight_end":51,"highlight_start":1,"text":"            if let Some(adapter) = cache.get(id) {"},{"highlight_end":53,"highlight_start":1,"text":"                return Ok(adapter.as_ref().clone());"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":33,"highlight_start":1,"text":"        // Load from VDB storage"},{"highlight_end":58,"highlight_start":1,"text":"        let adapter = if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":66,"highlight_start":1,"text":"                .load_adapter_neural_compressed(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":60,"highlight_start":1,"text":"                .load_adapter_accelerated(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":35,"highlight_start":1,"text":"        // Cache for future access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":20,"highlight_start":1,"text":"        Ok(adapter)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:487:56\n    |\n487 |       ) -> Result<SparseLoRAAdapter, SparseStorageError> {\n    |  ________________________________________________________^\n488 | |         // Check cache first\n489 | |         {\n490 | |             let cache = self.adapter_cache.read().await;\n...   |\n513 | |         Ok(adapter)\n514 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:487:56\n    |\n487 |       ) -> Result<SparseLoRAAdapter, SparseStorageError> {\n    |  ________________________________________________________^\n488 | |         // Check cache first\n489 | |         {\n490 | |             let cache = self.adapter_cache.read().await;\n...   |\n513 | |         Ok(adapter)\n514 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:487:56: 514:6}>>` to `Pin<Box<dyn Future<Output = Result<SparseLoRAAdapter, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2788964714725941437.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":17397,"byte_start":16460,"column_end":6,"column_start":56,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":514,"line_start":487,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":56,"text":"    ) -> Result<SparseLoRAAdapter, SparseStorageError> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Check cache first"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":57,"highlight_start":1,"text":"            let cache = self.adapter_cache.read().await;"},{"highlight_end":51,"highlight_start":1,"text":"            if let Some(adapter) = cache.get(id) {"},{"highlight_end":53,"highlight_start":1,"text":"                return Ok(adapter.as_ref().clone());"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":33,"highlight_start":1,"text":"        // Load from VDB storage"},{"highlight_end":58,"highlight_start":1,"text":"        let adapter = if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":66,"highlight_start":1,"text":"                .load_adapter_neural_compressed(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":60,"highlight_start":1,"text":"                .load_adapter_accelerated(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":35,"highlight_start":1,"text":"        // Cache for future access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":20,"highlight_start":1,"text":"        Ok(adapter)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:487:56: 514:6}>>` to `Pin<Box<dyn Future<Output = Result<SparseLoRAAdapter, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-2788964714725941437.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":17397,"byte_start":16460,"column_end":6,"column_start":56,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":514,"line_start":487,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":56,"text":"    ) -> Result<SparseLoRAAdapter, SparseStorageError> {"},{"highlight_end":29,"highlight_start":1,"text":"        // Check cache first"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":57,"highlight_start":1,"text":"            let cache = self.adapter_cache.read().await;"},{"highlight_end":51,"highlight_start":1,"text":"            if let Some(adapter) = cache.get(id) {"},{"highlight_end":53,"highlight_start":1,"text":"                return Ok(adapter.as_ref().clone());"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":33,"highlight_start":1,"text":"        // Load from VDB storage"},{"highlight_end":58,"highlight_start":1,"text":"        let adapter = if self.config.neural_compression {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":66,"highlight_start":1,"text":"                .load_adapter_neural_compressed(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":17,"highlight_start":1,"text":"        } else {"},{"highlight_end":34,"highlight_start":1,"text":"            self.hardware_storage"},{"highlight_end":60,"highlight_start":1,"text":"                .load_adapter_accelerated(id, config).await"},{"highlight_end":80,"highlight_start":1,"text":"                .map_err(|e| SparseStorageError::HardwareError(e.to_string()))?"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":35,"highlight_start":1,"text":"        // Cache for future access"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":62,"highlight_start":1,"text":"            let mut cache = self.adapter_cache.write().await;"},{"highlight_end":69,"highlight_start":1,"text":"            cache.insert(id.to_string(), Arc::new(adapter.clone()));"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":20,"highlight_start":1,"text":"        Ok(adapter)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:520:41\n    |\n520 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n521 | |         // Add updates to streaming queue for background processing\n522 | |         {\n523 | |             let mut queue = self.update_queue.write().await;\n...   |\n538 | |         Ok(())\n539 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:520:41\n    |\n520 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n521 | |         // Add updates to streaming queue for background processing\n522 | |         {\n523 | |             let mut queue = self.update_queue.write().await;\n...   |\n538 | |         Ok(())\n539 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:520:41: 539:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":18212,"byte_start":17590,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":539,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":68,"highlight_start":1,"text":"        // Add updates to streaming queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":46,"highlight_start":1,"text":"            queue.extend_from_slice(updates);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":67,"highlight_start":1,"text":"        // If we have too many queued updates, process immediately"},{"highlight_end":27,"highlight_start":1,"text":"        let queue_size = {"},{"highlight_end":56,"highlight_start":1,"text":"            let queue = self.update_queue.read().await;"},{"highlight_end":24,"highlight_start":1,"text":"            queue.len()"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":60,"highlight_start":1,"text":"        if queue_size > self.config.update_batch_size * 2 {"},{"highlight_end":68,"highlight_start":1,"text":"            // Force immediate processing to prevent memory buildup"},{"highlight_end":55,"highlight_start":1,"text":"            self.process_update_batch(updates).await?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:520:41: 539:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":18212,"byte_start":17590,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":539,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":68,"highlight_start":1,"text":"        // Add updates to streaming queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":46,"highlight_start":1,"text":"            queue.extend_from_slice(updates);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":67,"highlight_start":1,"text":"        // If we have too many queued updates, process immediately"},{"highlight_end":27,"highlight_start":1,"text":"        let queue_size = {"},{"highlight_end":56,"highlight_start":1,"text":"            let queue = self.update_queue.read().await;"},{"highlight_end":24,"highlight_start":1,"text":"            queue.len()"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":60,"highlight_start":1,"text":"        if queue_size > self.config.update_batch_size * 2 {"},{"highlight_end":68,"highlight_start":1,"text":"            // Force immediate processing to prevent memory buildup"},{"highlight_end":55,"highlight_start":1,"text":"            self.process_update_batch(updates).await?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:520:41\n    |\n520 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n521 | |         // Add updates to streaming queue for background processing\n522 | |         {\n523 | |             let mut queue = self.update_queue.write().await;\n...   |\n538 | |         Ok(())\n539 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:520:41\n    |\n520 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n521 | |         // Add updates to streaming queue for background processing\n522 | |         {\n523 | |             let mut queue = self.update_queue.write().await;\n...   |\n538 | |         Ok(())\n539 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:520:41: 539:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":18212,"byte_start":17590,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":539,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":68,"highlight_start":1,"text":"        // Add updates to streaming queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":46,"highlight_start":1,"text":"            queue.extend_from_slice(updates);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":67,"highlight_start":1,"text":"        // If we have too many queued updates, process immediately"},{"highlight_end":27,"highlight_start":1,"text":"        let queue_size = {"},{"highlight_end":56,"highlight_start":1,"text":"            let queue = self.update_queue.read().await;"},{"highlight_end":24,"highlight_start":1,"text":"            queue.len()"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":60,"highlight_start":1,"text":"        if queue_size > self.config.update_batch_size * 2 {"},{"highlight_end":68,"highlight_start":1,"text":"            // Force immediate processing to prevent memory buildup"},{"highlight_end":55,"highlight_start":1,"text":"            self.process_update_batch(updates).await?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:520:41: 539:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":18212,"byte_start":17590,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":539,"line_start":520,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":68,"highlight_start":1,"text":"        // Add updates to streaming queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":46,"highlight_start":1,"text":"            queue.extend_from_slice(updates);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":67,"highlight_start":1,"text":"        // If we have too many queued updates, process immediately"},{"highlight_end":27,"highlight_start":1,"text":"        let queue_size = {"},{"highlight_end":56,"highlight_start":1,"text":"            let queue = self.update_queue.read().await;"},{"highlight_end":24,"highlight_start":1,"text":"            queue.len()"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":60,"highlight_start":1,"text":"        if queue_size > self.config.update_batch_size * 2 {"},{"highlight_end":68,"highlight_start":1,"text":"            // Force immediate processing to prevent memory buildup"},{"highlight_end":55,"highlight_start":1,"text":"            self.process_update_batch(updates).await?;"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:547:41\n    |\n547 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n548 | |         // Create update record\n549 | |         let sequence = {\n550 | |             let mut counter = self.sequence_counter.write().await;\n...   |\n575 | |         Ok(())\n576 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:547:41\n    |\n547 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n548 | |         // Create update record\n549 | |         let sequence = {\n550 | |             let mut counter = self.sequence_counter.write().await;\n...   |\n575 | |         Ok(())\n576 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:547:41: 576:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":19266,"byte_start":18444,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":576,"line_start":547,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":32,"highlight_start":1,"text":"        // Create update record"},{"highlight_end":25,"highlight_start":1,"text":"        let sequence = {"},{"highlight_end":67,"highlight_start":1,"text":"            let mut counter = self.sequence_counter.write().await;"},{"highlight_end":27,"highlight_start":1,"text":"            *counter += 1;"},{"highlight_end":21,"highlight_start":1,"text":"            *counter"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        let update = SparseWeightUpdate {"},{"highlight_end":48,"highlight_start":1,"text":"            adapter_id: adapter_id.to_string(),"},{"highlight_end":23,"highlight_start":1,"text":"            updates: {"},{"highlight_end":46,"highlight_start":1,"text":"                let mut map = HashMap::new();"},{"highlight_end":46,"highlight_start":1,"text":"                map.insert(coord, new_value);"},{"highlight_end":20,"highlight_start":1,"text":"                map"},{"highlight_end":15,"highlight_start":1,"text":"            },"},{"highlight_end":52,"highlight_start":1,"text":"            timestamp: std::time::SystemTime::now()"},{"highlight_end":55,"highlight_start":1,"text":"                .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":26,"highlight_start":1,"text":"                .unwrap()"},{"highlight_end":28,"highlight_start":1,"text":"                .as_secs(),"},{"highlight_end":22,"highlight_start":1,"text":"            sequence,"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":43,"highlight_start":1,"text":"        // Queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":32,"highlight_start":1,"text":"            queue.push(update);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:547:41: 576:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":19266,"byte_start":18444,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":576,"line_start":547,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":32,"highlight_start":1,"text":"        // Create update record"},{"highlight_end":25,"highlight_start":1,"text":"        let sequence = {"},{"highlight_end":67,"highlight_start":1,"text":"            let mut counter = self.sequence_counter.write().await;"},{"highlight_end":27,"highlight_start":1,"text":"            *counter += 1;"},{"highlight_end":21,"highlight_start":1,"text":"            *counter"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        let update = SparseWeightUpdate {"},{"highlight_end":48,"highlight_start":1,"text":"            adapter_id: adapter_id.to_string(),"},{"highlight_end":23,"highlight_start":1,"text":"            updates: {"},{"highlight_end":46,"highlight_start":1,"text":"                let mut map = HashMap::new();"},{"highlight_end":46,"highlight_start":1,"text":"                map.insert(coord, new_value);"},{"highlight_end":20,"highlight_start":1,"text":"                map"},{"highlight_end":15,"highlight_start":1,"text":"            },"},{"highlight_end":52,"highlight_start":1,"text":"            timestamp: std::time::SystemTime::now()"},{"highlight_end":55,"highlight_start":1,"text":"                .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":26,"highlight_start":1,"text":"                .unwrap()"},{"highlight_end":28,"highlight_start":1,"text":"                .as_secs(),"},{"highlight_end":22,"highlight_start":1,"text":"            sequence,"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":43,"highlight_start":1,"text":"        // Queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":32,"highlight_start":1,"text":"            queue.push(update);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:547:41\n    |\n547 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n548 | |         // Create update record\n549 | |         let sequence = {\n550 | |             let mut counter = self.sequence_counter.write().await;\n...   |\n575 | |         Ok(())\n576 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:547:41\n    |\n547 |       ) -> Result<(), SparseStorageError> {\n    |  _________________________________________^\n548 | |         // Create update record\n549 | |         let sequence = {\n550 | |             let mut counter = self.sequence_counter.write().await;\n...   |\n575 | |         Ok(())\n576 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:547:41: 576:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":19266,"byte_start":18444,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":576,"line_start":547,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":32,"highlight_start":1,"text":"        // Create update record"},{"highlight_end":25,"highlight_start":1,"text":"        let sequence = {"},{"highlight_end":67,"highlight_start":1,"text":"            let mut counter = self.sequence_counter.write().await;"},{"highlight_end":27,"highlight_start":1,"text":"            *counter += 1;"},{"highlight_end":21,"highlight_start":1,"text":"            *counter"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        let update = SparseWeightUpdate {"},{"highlight_end":48,"highlight_start":1,"text":"            adapter_id: adapter_id.to_string(),"},{"highlight_end":23,"highlight_start":1,"text":"            updates: {"},{"highlight_end":46,"highlight_start":1,"text":"                let mut map = HashMap::new();"},{"highlight_end":46,"highlight_start":1,"text":"                map.insert(coord, new_value);"},{"highlight_end":20,"highlight_start":1,"text":"                map"},{"highlight_end":15,"highlight_start":1,"text":"            },"},{"highlight_end":52,"highlight_start":1,"text":"            timestamp: std::time::SystemTime::now()"},{"highlight_end":55,"highlight_start":1,"text":"                .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":26,"highlight_start":1,"text":"                .unwrap()"},{"highlight_end":28,"highlight_start":1,"text":"                .as_secs(),"},{"highlight_end":22,"highlight_start":1,"text":"            sequence,"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":43,"highlight_start":1,"text":"        // Queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":32,"highlight_start":1,"text":"            queue.push(update);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:547:41: 576:6}>>` to `Pin<Box<dyn Future<Output = Result<(), SparseStorageError>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-6885310114320041017.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":19266,"byte_start":18444,"column_end":6,"column_start":41,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":576,"line_start":547,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":41,"text":"    ) -> Result<(), SparseStorageError> {"},{"highlight_end":32,"highlight_start":1,"text":"        // Create update record"},{"highlight_end":25,"highlight_start":1,"text":"        let sequence = {"},{"highlight_end":67,"highlight_start":1,"text":"            let mut counter = self.sequence_counter.write().await;"},{"highlight_end":27,"highlight_start":1,"text":"            *counter += 1;"},{"highlight_end":21,"highlight_start":1,"text":"            *counter"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        let update = SparseWeightUpdate {"},{"highlight_end":48,"highlight_start":1,"text":"            adapter_id: adapter_id.to_string(),"},{"highlight_end":23,"highlight_start":1,"text":"            updates: {"},{"highlight_end":46,"highlight_start":1,"text":"                let mut map = HashMap::new();"},{"highlight_end":46,"highlight_start":1,"text":"                map.insert(coord, new_value);"},{"highlight_end":20,"highlight_start":1,"text":"                map"},{"highlight_end":15,"highlight_start":1,"text":"            },"},{"highlight_end":52,"highlight_start":1,"text":"            timestamp: std::time::SystemTime::now()"},{"highlight_end":55,"highlight_start":1,"text":"                .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":26,"highlight_start":1,"text":"                .unwrap()"},{"highlight_end":28,"highlight_start":1,"text":"                .as_secs(),"},{"highlight_end":22,"highlight_start":1,"text":"            sequence,"},{"highlight_end":11,"highlight_start":1,"text":"        };"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":43,"highlight_start":1,"text":"        // Queue for background processing"},{"highlight_end":10,"highlight_start":1,"text":"        {"},{"highlight_end":61,"highlight_start":1,"text":"            let mut queue = self.update_queue.write().await;"},{"highlight_end":32,"highlight_start":1,"text":"            queue.push(update);"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":15,"highlight_start":1,"text":"        Ok(())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:583:44\n    |\n583 |       ) -> Result<usize, SparseStorageError> {\n    |  ____________________________________________^\n584 | |         // Try GPU-accelerated batch update first\n585 | |         #[cfg(feature = \"cuda\")]\n586 | |         if self.config.hardware_acceleration {\n...   |\n598 | |         Ok(updates.len())\n599 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:583:44\n    |\n583 |       ) -> Result<usize, SparseStorageError> {\n    |  ____________________________________________^\n584 | |         // Try GPU-accelerated batch update first\n585 | |         #[cfg(feature = \"cuda\")]\n586 | |         if self.config.hardware_acceleration {\n...   |\n598 | |         Ok(updates.len())\n599 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:583:44: 599:6}>>` to `Pin<Box<dyn Future<Output = Result<usize, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15313283127088287977.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":20062,"byte_start":19487,"column_end":6,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":599,"line_start":583,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":44,"text":"    ) -> Result<usize, SparseStorageError> {"},{"highlight_end":50,"highlight_start":1,"text":"        // Try GPU-accelerated batch update first"},{"highlight_end":33,"highlight_start":1,"text":"        #[cfg(feature = \"cuda\")]"},{"highlight_end":47,"highlight_start":1,"text":"        if self.config.hardware_acceleration {"},{"highlight_end":87,"highlight_start":1,"text":"            match self.hardware_storage.gpu_sparse_update(adapter_id, updates).await {"},{"highlight_end":51,"highlight_start":1,"text":"                Ok(_) => return Ok(updates.len()),"},{"highlight_end":28,"highlight_start":1,"text":"                Err(e) => {"},{"highlight_end":80,"highlight_start":1,"text":"                    eprintln!(\"GPU update failed, falling back to CPU: {}\", e);"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":40,"highlight_start":1,"text":"        // Fallback to CPU batch update"},{"highlight_end":66,"highlight_start":1,"text":"        self.apply_cpu_sparse_update(adapter_id, updates).await?;"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(updates.len())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:583:44: 599:6}>>` to `Pin<Box<dyn Future<Output = Result<usize, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15313283127088287977.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":20062,"byte_start":19487,"column_end":6,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":599,"line_start":583,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":44,"text":"    ) -> Result<usize, SparseStorageError> {"},{"highlight_end":50,"highlight_start":1,"text":"        // Try GPU-accelerated batch update first"},{"highlight_end":33,"highlight_start":1,"text":"        #[cfg(feature = \"cuda\")]"},{"highlight_end":47,"highlight_start":1,"text":"        if self.config.hardware_acceleration {"},{"highlight_end":87,"highlight_start":1,"text":"            match self.hardware_storage.gpu_sparse_update(adapter_id, updates).await {"},{"highlight_end":51,"highlight_start":1,"text":"                Ok(_) => return Ok(updates.len()),"},{"highlight_end":28,"highlight_start":1,"text":"                Err(e) => {"},{"highlight_end":80,"highlight_start":1,"text":"                    eprintln!(\"GPU update failed, falling back to CPU: {}\", e);"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":40,"highlight_start":1,"text":"        // Fallback to CPU batch update"},{"highlight_end":66,"highlight_start":1,"text":"        self.apply_cpu_sparse_update(adapter_id, updates).await?;"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(updates.len())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:583:44\n    |\n583 |       ) -> Result<usize, SparseStorageError> {\n    |  ____________________________________________^\n584 | |         // Try GPU-accelerated batch update first\n585 | |         #[cfg(feature = \"cuda\")]\n586 | |         if self.config.hardware_acceleration {\n...   |\n598 | |         Ok(updates.len())\n599 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:583:44\n    |\n583 |       ) -> Result<usize, SparseStorageError> {\n    |  ____________________________________________^\n584 | |         // Try GPU-accelerated batch update first\n585 | |         #[cfg(feature = \"cuda\")]\n586 | |         if self.config.hardware_acceleration {\n...   |\n598 | |         Ok(updates.len())\n599 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:583:44: 599:6}>>` to `Pin<Box<dyn Future<Output = Result<usize, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15313283127088287977.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":20062,"byte_start":19487,"column_end":6,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":599,"line_start":583,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":44,"text":"    ) -> Result<usize, SparseStorageError> {"},{"highlight_end":50,"highlight_start":1,"text":"        // Try GPU-accelerated batch update first"},{"highlight_end":33,"highlight_start":1,"text":"        #[cfg(feature = \"cuda\")]"},{"highlight_end":47,"highlight_start":1,"text":"        if self.config.hardware_acceleration {"},{"highlight_end":87,"highlight_start":1,"text":"            match self.hardware_storage.gpu_sparse_update(adapter_id, updates).await {"},{"highlight_end":51,"highlight_start":1,"text":"                Ok(_) => return Ok(updates.len()),"},{"highlight_end":28,"highlight_start":1,"text":"                Err(e) => {"},{"highlight_end":80,"highlight_start":1,"text":"                    eprintln!(\"GPU update failed, falling back to CPU: {}\", e);"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":40,"highlight_start":1,"text":"        // Fallback to CPU batch update"},{"highlight_end":66,"highlight_start":1,"text":"        self.apply_cpu_sparse_update(adapter_id, updates).await?;"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(updates.len())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:583:44: 599:6}>>` to `Pin<Box<dyn Future<Output = Result<usize, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15313283127088287977.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":20062,"byte_start":19487,"column_end":6,"column_start":44,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":599,"line_start":583,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":44,"text":"    ) -> Result<usize, SparseStorageError> {"},{"highlight_end":50,"highlight_start":1,"text":"        // Try GPU-accelerated batch update first"},{"highlight_end":33,"highlight_start":1,"text":"        #[cfg(feature = \"cuda\")]"},{"highlight_end":47,"highlight_start":1,"text":"        if self.config.hardware_acceleration {"},{"highlight_end":87,"highlight_start":1,"text":"            match self.hardware_storage.gpu_sparse_update(adapter_id, updates).await {"},{"highlight_end":51,"highlight_start":1,"text":"                Ok(_) => return Ok(updates.len()),"},{"highlight_end":28,"highlight_start":1,"text":"                Err(e) => {"},{"highlight_end":80,"highlight_start":1,"text":"                    eprintln!(\"GPU update failed, falling back to CPU: {}\", e);"},{"highlight_end":18,"highlight_start":1,"text":"                }"},{"highlight_end":14,"highlight_start":1,"text":"            }"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":40,"highlight_start":1,"text":"        // Fallback to CPU batch update"},{"highlight_end":66,"highlight_start":1,"text":"        self.apply_cpu_sparse_update(adapter_id, updates).await?;"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(updates.len())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:611:32\n    |\n611 |         let adapter_ids = self.list_adapters().await?\n    |                                ^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::list_adapters`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::list_adapters`\n...\n166 |     async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;\n    |              ------------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::list_adapters`","rendered":null,"spans":[{"byte_end":5094,"byte_start":5081,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::list_adapters`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":20436,"byte_start":20423,"column_end":45,"column_start":32,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":611,"line_start":611,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":32,"text":"        let adapter_ids = self.list_adapters().await?"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:611:32\n    |\n611 |         let adapter_ids = self.list_adapters().await?\n    |                                ^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::list_adapters`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::list_adapters`\n...\n166 |     async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;\n    |              ------------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::list_adapters`","rendered":null,"spans":[{"byte_end":5094,"byte_start":5081,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::list_adapters`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":20436,"byte_start":20423,"column_end":45,"column_start":32,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":611,"line_start":611,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":32,"text":"        let adapter_ids = self.list_adapters().await?"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:619:39\n    |\n619 |             if let Ok(adapter) = self.load_adapter(&adapter_id, SparseLoRAConfig::default()).await {\n    |                                       ^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::load_adapter`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::load_adapter`\n...\n123 |     async fn load_adapter(\n    |              ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::load_adapter`","rendered":null,"spans":[{"byte_end":3718,"byte_start":3706,"column_end":26,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":123,"line_start":123,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"    async fn load_adapter("}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::load_adapter`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":20772,"byte_start":20760,"column_end":51,"column_start":39,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":619,"line_start":619,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":39,"text":"            if let Ok(adapter) = self.load_adapter(&adapter_id, SparseLoRAConfig::default()).await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:619:39\n    |\n619 |             if let Ok(adapter) = self.load_adapter(&adapter_id, SparseLoRAConfig::default()).await {\n    |                                       ^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::load_adapter`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::load_adapter`\n...\n123 |     async fn load_adapter(\n    |              ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::load_adapter`","rendered":null,"spans":[{"byte_end":3718,"byte_start":3706,"column_end":26,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":123,"line_start":123,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"    async fn load_adapter("}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::load_adapter`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":20772,"byte_start":20760,"column_end":51,"column_start":39,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":619,"line_start":619,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":51,"highlight_start":39,"text":"            if let Ok(adapter) = self.load_adapter(&adapter_id, SparseLoRAConfig::default()).await {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:655:28\n    |\n655 |         let adapter = self.load_adapter(adapter_id, SparseLoRAConfig::default()).await?;\n    |                            ^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::load_adapter`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::load_adapter`\n...\n123 |     async fn load_adapter(\n    |              ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::load_adapter`","rendered":null,"spans":[{"byte_end":3718,"byte_start":3706,"column_end":26,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":123,"line_start":123,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"    async fn load_adapter("}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::load_adapter`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":22140,"byte_start":22128,"column_end":40,"column_start":28,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":655,"line_start":655,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":28,"text":"        let adapter = self.load_adapter(adapter_id, SparseLoRAConfig::default()).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:655:28\n    |\n655 |         let adapter = self.load_adapter(adapter_id, SparseLoRAConfig::default()).await?;\n    |                            ^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::load_adapter`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::load_adapter`\n...\n123 |     async fn load_adapter(\n    |              ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::load_adapter`","rendered":null,"spans":[{"byte_end":3718,"byte_start":3706,"column_end":26,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":123,"line_start":123,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"    async fn load_adapter("}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::load_adapter`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":22140,"byte_start":22128,"column_end":40,"column_start":28,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":655,"line_start":655,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":28,"text":"        let adapter = self.load_adapter(adapter_id, SparseLoRAConfig::default()).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:676:83\n    |\n676 |       async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n677 | |         // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo\n678 | |         let hw_adapter_infos = self.hardware_storage.list_adapters().await;\n679 | |         let mut adapter_infos = Vec::new();\n...   |\n706 | |         Ok(adapter_infos)\n707 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:676:83\n    |\n676 |       async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n677 | |         // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo\n678 | |         let hw_adapter_infos = self.hardware_storage.list_adapters().await;\n679 | |         let mut adapter_infos = Vec::new();\n...   |\n706 | |         Ok(adapter_infos)\n707 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:676:83: 707:6}>>` to `Pin<Box<dyn Future<Output = Result<Vec<AdapterInfo>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15773332072449919902.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":24381,"byte_start":23024,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":707,"line_start":676,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {"},{"highlight_end":88,"highlight_start":1,"text":"        // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo"},{"highlight_end":76,"highlight_start":1,"text":"        let hw_adapter_infos = self.hardware_storage.list_adapters().await;"},{"highlight_end":44,"highlight_start":1,"text":"        let mut adapter_infos = Vec::new();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        for hw_info in hw_adapter_infos {"},{"highlight_end":45,"highlight_start":1,"text":"            adapter_infos.push(AdapterInfo {"},{"highlight_end":44,"highlight_start":1,"text":"                domain: hw_info.id.clone(),"},{"highlight_end":40,"highlight_start":1,"text":"                adapter_id: hw_info.id,"},{"highlight_end":44,"highlight_start":1,"text":"                metadata: AdapterMetadata {"},{"highlight_end":51,"highlight_start":1,"text":"                    domain: \"default\".to_string(),"},{"highlight_end":61,"highlight_start":1,"text":"                    created_at: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":63,"highlight_start":1,"text":"                    last_updated: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":32,"highlight_start":1,"text":"                    version: 1,"},{"highlight_end":48,"highlight_start":1,"text":"                    sparsity: hw_info.sparsity,"},{"highlight_end":71,"highlight_start":1,"text":"                    active_parameters: hw_info.active_voxels as usize,"},{"highlight_end":105,"highlight_start":1,"text":"                    total_parameters: (hw_info.active_voxels as f64 / hw_info.sparsity as f64) as usize,"},{"highlight_end":39,"highlight_start":1,"text":"                    training_steps: 0,"},{"highlight_end":41,"highlight_start":1,"text":"                    learning_rate: 1e-4,"},{"highlight_end":61,"highlight_start":1,"text":"                    adapter_type: \"sparse_lora\".to_string(),"},{"highlight_end":19,"highlight_start":1,"text":"                },"},{"highlight_end":16,"highlight_start":1,"text":"            });"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(adapter_infos)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:676:83: 707:6}>>` to `Pin<Box<dyn Future<Output = Result<Vec<AdapterInfo>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15773332072449919902.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":24381,"byte_start":23024,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":707,"line_start":676,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {"},{"highlight_end":88,"highlight_start":1,"text":"        // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo"},{"highlight_end":76,"highlight_start":1,"text":"        let hw_adapter_infos = self.hardware_storage.list_adapters().await;"},{"highlight_end":44,"highlight_start":1,"text":"        let mut adapter_infos = Vec::new();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        for hw_info in hw_adapter_infos {"},{"highlight_end":45,"highlight_start":1,"text":"            adapter_infos.push(AdapterInfo {"},{"highlight_end":44,"highlight_start":1,"text":"                domain: hw_info.id.clone(),"},{"highlight_end":40,"highlight_start":1,"text":"                adapter_id: hw_info.id,"},{"highlight_end":44,"highlight_start":1,"text":"                metadata: AdapterMetadata {"},{"highlight_end":51,"highlight_start":1,"text":"                    domain: \"default\".to_string(),"},{"highlight_end":61,"highlight_start":1,"text":"                    created_at: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":63,"highlight_start":1,"text":"                    last_updated: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":32,"highlight_start":1,"text":"                    version: 1,"},{"highlight_end":48,"highlight_start":1,"text":"                    sparsity: hw_info.sparsity,"},{"highlight_end":71,"highlight_start":1,"text":"                    active_parameters: hw_info.active_voxels as usize,"},{"highlight_end":105,"highlight_start":1,"text":"                    total_parameters: (hw_info.active_voxels as f64 / hw_info.sparsity as f64) as usize,"},{"highlight_end":39,"highlight_start":1,"text":"                    training_steps: 0,"},{"highlight_end":41,"highlight_start":1,"text":"                    learning_rate: 1e-4,"},{"highlight_end":61,"highlight_start":1,"text":"                    adapter_type: \"sparse_lora\".to_string(),"},{"highlight_end":19,"highlight_start":1,"text":"                },"},{"highlight_end":16,"highlight_start":1,"text":"            });"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(adapter_infos)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:676:83\n    |\n676 |       async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n677 | |         // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo\n678 | |         let hw_adapter_infos = self.hardware_storage.list_adapters().await;\n679 | |         let mut adapter_infos = Vec::new();\n...   |\n706 | |         Ok(adapter_infos)\n707 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:676:83\n    |\n676 |       async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n677 | |         // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo\n678 | |         let hw_adapter_infos = self.hardware_storage.list_adapters().await;\n679 | |         let mut adapter_infos = Vec::new();\n...   |\n706 | |         Ok(adapter_infos)\n707 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:676:83: 707:6}>>` to `Pin<Box<dyn Future<Output = Result<Vec<AdapterInfo>, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15773332072449919902.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":24381,"byte_start":23024,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":707,"line_start":676,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {"},{"highlight_end":88,"highlight_start":1,"text":"        // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo"},{"highlight_end":76,"highlight_start":1,"text":"        let hw_adapter_infos = self.hardware_storage.list_adapters().await;"},{"highlight_end":44,"highlight_start":1,"text":"        let mut adapter_infos = Vec::new();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        for hw_info in hw_adapter_infos {"},{"highlight_end":45,"highlight_start":1,"text":"            adapter_infos.push(AdapterInfo {"},{"highlight_end":44,"highlight_start":1,"text":"                domain: hw_info.id.clone(),"},{"highlight_end":40,"highlight_start":1,"text":"                adapter_id: hw_info.id,"},{"highlight_end":44,"highlight_start":1,"text":"                metadata: AdapterMetadata {"},{"highlight_end":51,"highlight_start":1,"text":"                    domain: \"default\".to_string(),"},{"highlight_end":61,"highlight_start":1,"text":"                    created_at: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":63,"highlight_start":1,"text":"                    last_updated: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":32,"highlight_start":1,"text":"                    version: 1,"},{"highlight_end":48,"highlight_start":1,"text":"                    sparsity: hw_info.sparsity,"},{"highlight_end":71,"highlight_start":1,"text":"                    active_parameters: hw_info.active_voxels as usize,"},{"highlight_end":105,"highlight_start":1,"text":"                    total_parameters: (hw_info.active_voxels as f64 / hw_info.sparsity as f64) as usize,"},{"highlight_end":39,"highlight_start":1,"text":"                    training_steps: 0,"},{"highlight_end":41,"highlight_start":1,"text":"                    learning_rate: 1e-4,"},{"highlight_end":61,"highlight_start":1,"text":"                    adapter_type: \"sparse_lora\".to_string(),"},{"highlight_end":19,"highlight_start":1,"text":"                },"},{"highlight_end":16,"highlight_start":1,"text":"            });"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(adapter_infos)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:676:83: 707:6}>>` to `Pin<Box<dyn Future<Output = Result<Vec<AdapterInfo>, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-15773332072449919902.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":24381,"byte_start":23024,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":707,"line_start":676,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError> {"},{"highlight_end":88,"highlight_start":1,"text":"        // Convert from hardware_accelerated::AdapterInfo to adapter_store::AdapterInfo"},{"highlight_end":76,"highlight_start":1,"text":"        let hw_adapter_infos = self.hardware_storage.list_adapters().await;"},{"highlight_end":44,"highlight_start":1,"text":"        let mut adapter_infos = Vec::new();"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":42,"highlight_start":1,"text":"        for hw_info in hw_adapter_infos {"},{"highlight_end":45,"highlight_start":1,"text":"            adapter_infos.push(AdapterInfo {"},{"highlight_end":44,"highlight_start":1,"text":"                domain: hw_info.id.clone(),"},{"highlight_end":40,"highlight_start":1,"text":"                adapter_id: hw_info.id,"},{"highlight_end":44,"highlight_start":1,"text":"                metadata: AdapterMetadata {"},{"highlight_end":51,"highlight_start":1,"text":"                    domain: \"default\".to_string(),"},{"highlight_end":61,"highlight_start":1,"text":"                    created_at: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":63,"highlight_start":1,"text":"                    last_updated: std::time::SystemTime::now()"},{"highlight_end":63,"highlight_start":1,"text":"                        .duration_since(std::time::UNIX_EPOCH)"},{"highlight_end":34,"highlight_start":1,"text":"                        .unwrap()"},{"highlight_end":36,"highlight_start":1,"text":"                        .as_secs(),"},{"highlight_end":32,"highlight_start":1,"text":"                    version: 1,"},{"highlight_end":48,"highlight_start":1,"text":"                    sparsity: hw_info.sparsity,"},{"highlight_end":71,"highlight_start":1,"text":"                    active_parameters: hw_info.active_voxels as usize,"},{"highlight_end":105,"highlight_start":1,"text":"                    total_parameters: (hw_info.active_voxels as f64 / hw_info.sparsity as f64) as usize,"},{"highlight_end":39,"highlight_start":1,"text":"                    training_steps: 0,"},{"highlight_end":41,"highlight_start":1,"text":"                    learning_rate: 1e-4,"},{"highlight_end":61,"highlight_start":1,"text":"                    adapter_type: \"sparse_lora\".to_string(),"},{"highlight_end":19,"highlight_start":1,"text":"                },"},{"highlight_end":16,"highlight_start":1,"text":"            });"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":9,"highlight_start":1,"text":"        "},{"highlight_end":26,"highlight_start":1,"text":"        Ok(adapter_infos)"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:711:28\n    |\n711 |         let adapter = self.load_adapter(id, SparseLoRAConfig::default()).await?;\n    |                            ^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::load_adapter`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::load_adapter`\n...\n123 |     async fn load_adapter(\n    |              ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::load_adapter`","rendered":null,"spans":[{"byte_end":3718,"byte_start":3706,"column_end":26,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":123,"line_start":123,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"    async fn load_adapter("}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::load_adapter`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":24570,"byte_start":24558,"column_end":40,"column_start":28,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":711,"line_start":711,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":28,"text":"        let adapter = self.load_adapter(id, SparseLoRAConfig::default()).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:711:28\n    |\n711 |         let adapter = self.load_adapter(id, SparseLoRAConfig::default()).await?;\n    |                            ^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::load_adapter`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::load_adapter`\n...\n123 |     async fn load_adapter(\n    |              ------------ required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::load_adapter`","rendered":null,"spans":[{"byte_end":3718,"byte_start":3706,"column_end":26,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":123,"line_start":123,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":26,"highlight_start":14,"text":"    async fn load_adapter("}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::load_adapter`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":24570,"byte_start":24558,"column_end":40,"column_start":28,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":711,"line_start":711,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":28,"text":"        let adapter = self.load_adapter(id, SparseLoRAConfig::default()).await?;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:734:36\n    |\n734 |         let adapters_before = self.list_adapters().await?.len();\n    |                                    ^^^^^^^^^^^^^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::list_adapters`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::list_adapters`\n...\n166 |     async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;\n    |              ------------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::list_adapters`","rendered":null,"spans":[{"byte_end":5094,"byte_start":5081,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::list_adapters`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":25634,"byte_start":25621,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":734,"line_start":734,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":36,"text":"        let adapters_before = self.list_adapters().await?.len();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:734:36\n    |\n734 |         let adapters_before = self.list_adapters().await?.len();\n    |                                    ^^^^^^^^^^^^^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\nnote: required by a bound in `sparse_storage::SparseStorage::list_adapters`\n   --> src/storage/vdb/sparse_storage.rs:114:26\n    |\n114 | pub trait SparseStorage: Send + Sync + 'static {\n    |                          ^^^^ required by this bound in `SparseStorage::list_adapters`\n...\n166 |     async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;\n    |              ------------- required by a bound in this associated function\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required by a bound in `sparse_storage::SparseStorage::list_adapters`","rendered":null,"spans":[{"byte_end":5094,"byte_start":5081,"column_end":27,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":166,"line_start":166,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":14,"text":"    async fn list_adapters(&self) -> Result<Vec<AdapterInfo>, SparseStorageError>;"}]},{"byte_end":3411,"byte_start":3407,"column_end":30,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"required by this bound in `SparseStorage::list_adapters`","line_end":114,"line_start":114,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":26,"text":"pub trait SparseStorage: Send + Sync + 'static {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":25634,"byte_start":25621,"column_end":49,"column_start":36,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":734,"line_start":734,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":36,"text":"        let adapters_before = self.list_adapters().await?.len();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be sent between threads safely\n   --> src/storage/vdb/sparse_storage.rs:758:83\n    |\n758 |       async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n759 | |         let stats = self.stats.read().await;\n760 | |         Ok(stats.clone())\n761 | |     }\n    | |_____^ `*const cxx::void` cannot be sent between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:758:83\n    |\n758 |       async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n759 | |         let stats = self.stats.read().await;\n760 | |         Ok(stats.clone())\n761 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:758:83: 761:6}>>` to `Pin<Box<dyn Future<Output = Result<StorageStats, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13343570662546627202.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `std::marker::Send` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":26639,"byte_start":26561,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":761,"line_start":758,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {"},{"highlight_end":45,"highlight_start":1,"text":"        let stats = self.stats.read().await;"},{"highlight_end":26,"highlight_start":1,"text":"        Ok(stats.clone())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:758:83: 761:6}>>` to `Pin<Box<dyn Future<Output = Result<StorageStats, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13343570662546627202.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be sent between threads safely","spans":[{"byte_end":26639,"byte_start":26561,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be sent between threads safely","line_end":761,"line_start":758,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {"},{"highlight_end":45,"highlight_start":1,"text":"        let stats = self.stats.read().await;"},{"highlight_end":26,"highlight_start":1,"text":"        Ok(stats.clone())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `*const cxx::void` cannot be shared between threads safely\n   --> src/storage/vdb/sparse_storage.rs:758:83\n    |\n758 |       async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n759 | |         let stats = self.stats.read().await;\n760 | |         Ok(stats.clone())\n761 | |     }\n    | |_____^ `*const cxx::void` cannot be shared between threads safely\n    |\n    = help: within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`\n    = note: required because it appears within the type `[*const cxx::void; 0]`\nnote: required because it appears within the type `cxx::private::Opaque`\n   --> /private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs:18:12\n    |\n18  | pub struct Opaque {\n    |            ^^^^^^\nnote: required because it appears within the type `LoRAGrid`\n   --> src/storage/vdb/openvdb_bindings.rs:21:14\n    |\n21  |         type LoRAGrid;\n    |              ^^^^^^^^\n    = note: required for `UniquePtr<LoRAGrid>` to implement `Sync`\nnote: required because it appears within the type `OpenVDBLoRAAdapter`\n   --> src/storage/vdb/openvdb_bindings.rs:71:12\n    |\n71  | pub struct OpenVDBLoRAAdapter {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`\n    = note: required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`\nnote: required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`\n   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12\nnote: required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`\n   --> /private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:211:12\n    |\n211 | pub struct HashMap<K, V, S = RandomState> {\n    |            ^^^^^^^\n    = note: required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`\n    = note: 1 redundant requirement hidden\n    = note: required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`\nnote: required because it appears within the type `hardware_accelerated::HardwareVDBStorage`\n   --> src/storage/vdb/hardware_accelerated.rs:241:12\n    |\n241 | pub struct HardwareVDBStorage {\n    |            ^^^^^^^^^^^^^^^^^^\n    = note: required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`\nnote: required because it appears within the type `sparse_storage::VDBSparseStorage`\n   --> src/storage/vdb/sparse_storage.rs:216:12\n    |\n216 | pub struct VDBSparseStorage {\n    |            ^^^^^^^^^^^^^^^^\n    = note: required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`\nnote: required because it's used within this `async` block\n   --> src/storage/vdb/sparse_storage.rs:758:83\n    |\n758 |       async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {\n    |  ___________________________________________________________________________________^\n759 | |         let stats = self.stats.read().await;\n760 | |         Ok(stats.clone())\n761 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:758:83: 761:6}>>` to `Pin<Box<dyn Future<Output = Result<StorageStats, ...>> + Send>>`\n    = note: the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13343570662546627202.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"within `LoRAGrid`, the trait `Sync` is not implemented for `*const cxx::void`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `[*const cxx::void; 0]`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `cxx::private::Opaque`","rendered":null,"spans":[{"byte_end":314,"byte_start":308,"column_end":18,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cxx-1.0.158/src/opaque.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"pub struct Opaque {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `LoRAGrid`","rendered":null,"spans":[{"byte_end":488,"byte_start":480,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":21,"line_start":21,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        type LoRAGrid;"}]}]},{"children":[],"code":null,"level":"note","message":"required for `UniquePtr<LoRAGrid>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `OpenVDBLoRAAdapter`","rendered":null,"spans":[{"byte_end":2558,"byte_start":2540,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/openvdb_bindings.rs","is_primary":true,"label":null,"line_end":71,"line_start":71,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct OpenVDBLoRAAdapter {"}]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `(std::string::String, OpenVDBLoRAAdapter)`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `hashbrown::raw::RawTable<(std::string::String, OpenVDBLoRAAdapter)>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hashbrown::map::HashMap<std::string::String, OpenVDBLoRAAdapter, RandomState>`","rendered":null,"spans":[{"byte_end":6701,"byte_start":6694,"column_end":19,"column_start":12,"expansion":null,"file_name":"/rust/deps/hashbrown-0.15.0/src/map.rs","is_primary":true,"label":null,"line_end":185,"line_start":185,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `HashMap<std::string::String, OpenVDBLoRAAdapter>`","rendered":null,"spans":[{"byte_end":7844,"byte_start":7837,"column_end":19,"column_start":12,"expansion":null,"file_name":"/private/birdetta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs","is_primary":true,"label":null,"line_end":211,"line_start":211,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":12,"text":"pub struct HashMap<K, V, S = RandomState> {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"1 redundant requirement hidden","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `Arc<tokio::sync::RwLock<HashMap<std::string::String, OpenVDBLoRAAdapter>>>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `hardware_accelerated::HardwareVDBStorage`","rendered":null,"spans":[{"byte_end":8398,"byte_start":8380,"column_end":30,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/hardware_accelerated.rs","is_primary":true,"label":null,"line_end":241,"line_start":241,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":12,"text":"pub struct HardwareVDBStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `Arc<hardware_accelerated::HardwareVDBStorage>` to implement `Sync`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it appears within the type `sparse_storage::VDBSparseStorage`","rendered":null,"spans":[{"byte_end":6724,"byte_start":6708,"column_end":28,"column_start":12,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":216,"line_start":216,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":12,"text":"pub struct VDBSparseStorage {"}]}]},{"children":[],"code":null,"level":"note","message":"required for `&sparse_storage::VDBSparseStorage` to implement `std::marker::Send`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required because it's used within this `async` block","rendered":null,"spans":[{"byte_end":26639,"byte_start":26561,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":null,"line_end":761,"line_start":758,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {"},{"highlight_end":45,"highlight_start":1,"text":"        let stats = self.stats.read().await;"},{"highlight_end":26,"highlight_start":1,"text":"        Ok(stats.clone())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]},{"children":[],"code":null,"level":"note","message":"required for the cast from `Pin<Box<{async block@src/storage/vdb/sparse_storage.rs:758:83: 761:6}>>` to `Pin<Box<dyn Future<Output = Result<StorageStats, ...>> + Send>>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the full name for the type has been written to '/mnt/hyprstream/hyprstream/target/debug/deps/hyprstream_core-bba27b9338bc9c22.long-type-13343570662546627202.txt'","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"consider using `--verbose` to print the full type name to the console","rendered":null,"spans":[]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`*const cxx::void` cannot be shared between threads safely","spans":[{"byte_end":26639,"byte_start":26561,"column_end":6,"column_start":83,"expansion":null,"file_name":"src/storage/vdb/sparse_storage.rs","is_primary":true,"label":"`*const cxx::void` cannot be shared between threads safely","line_end":761,"line_start":758,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":84,"highlight_start":83,"text":"    async fn get_storage_stats(&self) -> Result<StorageStats, SparseStorageError> {"},{"highlight_end":45,"highlight_start":1,"text":"        let stats = self.stats.read().await;"},{"highlight_end":26,"highlight_start":1,"text":"        Ok(stats.clone())"},{"highlight_end":6,"highlight_start":1,"text":"    }"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused import: `StreamExt`\n  --> src/api/inference_service.rs:16:37\n   |\n16 | use futures::stream::{self, Stream, StreamExt};\n   |                                     ^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `StreamExt`","spans":[{"byte_end":642,"byte_start":633,"column_end":46,"column_start":37,"expansion":null,"file_name":"src/api/inference_service.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":37,"text":"use futures::stream::{self, Stream, StreamExt};"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `key`\n   --> src/inference/mod.rs:371:21\n    |\n371 | fn parse_weight_key(key: &str) -> Option<(usize, (i32, i32))> {\n    |                     ^^^ help: if this is intentional, prefix it with an underscore: `_key`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":11817,"byte_start":11814,"column_end":24,"column_start":21,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":371,"line_start":371,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":24,"highlight_start":21,"text":"fn parse_weight_key(key: &str) -> Option<(usize, (i32, i32))> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `key`","spans":[{"byte_end":11817,"byte_start":11814,"column_end":24,"column_start":21,"expansion":null,"file_name":"src/inference/mod.rs","is_primary":true,"label":null,"line_end":371,"line_start":371,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":21,"text":"fn parse_weight_key(key: &str) -> Option<(usize, (i32, i32))> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `config`\n   --> src/models/qwen3.rs:356:44\n    |\n356 |     fn is_stop_token(&self, token_id: u32, config: &GenerationConfig) -> bool {\n    |                                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":11658,"byte_start":11652,"column_end":50,"column_start":44,"expansion":null,"file_name":"src/models/qwen3.rs","is_primary":true,"label":null,"line_end":356,"line_start":356,"suggested_replacement":"_config","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":50,"highlight_start":44,"text":"    fn is_stop_token(&self, token_id: u32, config: &GenerationConfig) -> bool {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `config`","spans":[{"byte_end":11658,"byte_start":11652,"column_end":50,"column_start":44,"expansion":null,"file_name":"src/models/qwen3.rs","is_primary":true,"label":null,"line_end":356,"line_start":356,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":44,"text":"    fn is_stop_token(&self, token_id: u32, config: &GenerationConfig) -> bool {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `path`\n   --> src/runtime/lora_wrapper.rs:315:36\n    |\n315 |     async fn load_model(&mut self, path: &Path) -> Result<()> {\n    |                                    ^^^^ help: if this is intentional, prefix it with an underscore: `_path`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":10928,"byte_start":10924,"column_end":40,"column_start":36,"expansion":null,"file_name":"src/runtime/lora_wrapper.rs","is_primary":true,"label":null,"line_end":315,"line_start":315,"suggested_replacement":"_path","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":40,"highlight_start":36,"text":"    async fn load_model(&mut self, path: &Path) -> Result<()> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `path`","spans":[{"byte_end":10928,"byte_start":10924,"column_end":40,"column_start":36,"expansion":null,"file_name":"src/runtime/lora_wrapper.rs","is_primary":true,"label":null,"line_end":315,"line_start":315,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":36,"text":"    async fn load_model(&mut self, path: &Path) -> Result<()> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `vs`\n   --> src/storage/vdb/neuralvdb_codec.rs:680:16\n    |\n680 |     pub fn new(vs: &Path, input_dim: i64) -> Result<Self, Box<dyn std::error::Error>> {\n    |                ^^ help: if this is intentional, prefix it with an underscore: `_vs`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":23087,"byte_start":23085,"column_end":18,"column_start":16,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":680,"line_start":680,"suggested_replacement":"_vs","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":16,"text":"    pub fn new(vs: &Path, input_dim: i64) -> Result<Self, Box<dyn std::error::Error>> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `vs`","spans":[{"byte_end":23087,"byte_start":23085,"column_end":18,"column_start":16,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":680,"line_start":680,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":16,"text":"    pub fn new(vs: &Path, input_dim: i64) -> Result<Self, Box<dyn std::error::Error>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `vs`\n   --> src/storage/vdb/neuralvdb_codec.rs:722:16\n    |\n722 |     pub fn new(vs: &Path, input_dim: i64, latent_dim: i64) -> Result<Self, Box<dyn std::error::Error>> {\n    |                ^^ help: if this is intentional, prefix it with an underscore: `_vs`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":24574,"byte_start":24572,"column_end":18,"column_start":16,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":722,"line_start":722,"suggested_replacement":"_vs","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":18,"highlight_start":16,"text":"    pub fn new(vs: &Path, input_dim: i64, latent_dim: i64) -> Result<Self, Box<dyn std::error::Error>> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `vs`","spans":[{"byte_end":24574,"byte_start":24572,"column_end":18,"column_start":16,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":722,"line_start":722,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":16,"text":"    pub fn new(vs: &Path, input_dim: i64, latent_dim: i64) -> Result<Self, Box<dyn std::error::Error>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `compressed`\n   --> src/storage/vdb/neuralvdb_codec.rs:765:26\n    |\n765 |     pub fn decode(&self, compressed: &Tensor) -> Result<Tensor, Box<dyn std::error::Error>> {\n    |                          ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_compressed`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":26302,"byte_start":26292,"column_end":36,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":765,"line_start":765,"suggested_replacement":"_compressed","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":36,"highlight_start":26,"text":"    pub fn decode(&self, compressed: &Tensor) -> Result<Tensor, Box<dyn std::error::Error>> {"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `compressed`","spans":[{"byte_end":26302,"byte_start":26292,"column_end":36,"column_start":26,"expansion":null,"file_name":"src/storage/vdb/neuralvdb_codec.rs","is_primary":true,"label":null,"line_end":765,"line_start":765,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":26,"text":"    pub fn decode(&self, compressed: &Tensor) -> Result<Tensor, Box<dyn std::error::Error>> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"warning: unused variable: `h`\n   --> src/storage/vdb/mod.rs:256:22\n    |\n256 |                 let (h, w) = (shape[0], shape[1]);\n    |                      ^ help: if this is intentional, prefix it with an underscore: `_h`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":7914,"byte_start":7913,"column_end":23,"column_start":22,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":null,"line_end":256,"line_start":256,"suggested_replacement":"_h","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":23,"highlight_start":22,"text":"                let (h, w) = (shape[0], shape[1]);"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `h`","spans":[{"byte_end":7914,"byte_start":7913,"column_end":23,"column_start":22,"expansion":null,"file_name":"src/storage/vdb/mod.rs","is_primary":true,"label":null,"line_end":256,"line_start":256,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":22,"text":"                let (h, w) = (shape[0], shape[1]);"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0046, E0061, E0063, E0277, E0308, E0382, E0412, E0422, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0046, E0061, E0063, E0277, E0308, E0382, E0412, E0422, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///mnt/hyprstream/hyprstream#0.1.0-alpha-7","manifest_path":"/mnt/hyprstream/hyprstream/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hyprstream_core","src_path":"/mnt/hyprstream/hyprstream/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0046`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0046`.","spans":[]}}
warning: hyprstream@0.1.0-alpha-7: Found CUDA at /usr/local/cuda, enabling GPU acceleration
warning: hyprstream@0.1.0-alpha-7: Building CPU-only version (CUDA integration in progress)
warning: hyprstream@0.1.0-alpha-7: pkg-config failed, trying system OpenVDB installation...
warning: hyprstream@0.1.0-alpha-7: Found system OpenVDB installation
warning: hyprstream@0.1.0-alpha-7: ✅ Built with OpenVDB support - VDB features enabled
error: could not compile `hyprstream` (lib) due to 163 previous errors; 43 warnings emitted
{"reason":"build-finished","success":false}
